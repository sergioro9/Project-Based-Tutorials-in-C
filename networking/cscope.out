cscope 15 $HOME/practice/c/Project-Based-Tutorials-in-C/networking -c               0000193528
	@src/showip.c

5 #include 
	~<stdio.h
>

6 #include 
	~<string.h
>

7 #include 
	~<sys/types.h
>

8 #include 
	~<sys/socket.h
>

9 #include 
	~<netdb.h
>

10 #include 
	~<arpa/inet.h
>

11 #include 
	~<netinet/in.h
>

13 int 
	$main
(int 
argc
, char *
argv
[])

15 struct 
addrinfo
 
hints
, *
res
, *
p
;

16 int 
status
;

17 char 
ipstr
[
INET6_ADDRSTRLEN
];

19 if (
argc
 != 2) {

20 
	`fprintf
(
stderr
,"usage: showip hostname\n");

21 
	`fprintf
(
stderr
,"example: showip sergioro.mx\n");

25 
	`memset
(&
hints
, 0, sizeof hints);

26 
hints
.
ai_family
 = 
AF_UNSPEC
;

27 
hints
.
ai_socktype
 = 
SOCK_STREAM
;

29 if ((
status
 = 
	`getaddrinfo
(
argv
[1], 
NULL
, &
hints
, &
res
)) != 0) {

30 
	`fprintf
(
stderr
, "getaddrinfo: %s\n", 
	`gai_strerror
(
status
));

34 
	`printf
("IP addresses for %s:\n\n", 
argv
[1]);

36 for(
p
 = 
res
;p != 
NULL
; p = p->
ai_next
) {

37 void *
addr
;

38 char *
ipver
;

42 if (
p
->
ai_family
 == 
AF_INET
) {

43 struct 
sockaddr_in
 *
ipv4
 = (struct sockaddr_in *)
p
->
ai_addr
;

44 
addr
 = &(
ipv4
->
sin_addr
);

45 
ipver
 = "IPv4";

47 struct 
sockaddr_in6
 *
ipv6
 = (struct sockaddr_in6 *)
p
->
ai_addr
;

48 
addr
 = &(
ipv6
->
sin6_addr
);

49 
ipver
 = "IPv6";

53 
	`inet_ntop
(
p
->
ai_family
, 
addr
, 
ipstr
, sizeof ipstr);

54 
	`printf
(" %s: %s\n", 
ipver
, 
ipstr
);

57 
	`freeaddrinfo
(
res
);

60 
	}
}

	@/usr/include/arpa/inet.h

18 #ifndef 
_ARPA_INET_H


19 #define 
	#_ARPA_INET_H
 1

	)

21 #include 
	~<features.h
>

22 #include 
	~<netinet/in.h
>

25 #ifndef 
__socklen_t_defined


26 typedef 
__socklen_t
 
	tsocklen_t
;

27 #define 
	#__socklen_t_defined


	)

30 
__BEGIN_DECLS


34 extern 
in_addr_t
 
	$inet_addr
 (const char *
__cp
) 
__THROW
;

37 extern 
in_addr_t
 
	$inet_lnaof
 (struct 
in_addr
 
__in
) 
__THROW
;

41 extern struct 
in_addr
 
	$inet_makeaddr
 (
in_addr_t
 
__net
, in_addr_t 
__host
)

42 
__THROW
;

45 extern 
in_addr_t
 
	$inet_netof
 (struct 
in_addr
 
__in
) 
__THROW
;

49 extern 
in_addr_t
 
	$inet_network
 (const char *
__cp
) 
__THROW
;

53 extern char *
	$inet_ntoa
 (struct 
in_addr
 
__in
) 
__THROW
;

58 extern int 
	$inet_pton
 (int 
__af
, const char *
__restrict
 
__cp
,

59 void *
__restrict
 
__buf
) 
__THROW
;

64 extern const char *
	$inet_ntop
 (int 
__af
, const void *
__restrict
 
__cp
,

65 char *
__restrict
 
__buf
, 
socklen_t
 
__len
)

66 
__THROW
;

70 #ifdef 
__USE_MISC


73 extern int 
	$inet_aton
 (const char *
__cp
, struct 
in_addr
 *
__inp
) 
__THROW
;

77 extern char *
	$inet_neta
 (
in_addr_t
 
__net
, char *
__buf
, 
size_t
 
__len
) 
__THROW
;

82 extern char *
	$inet_net_ntop
 (int 
__af
, const void *
__cp
, int 
__bits
,

83 char *
__buf
, 
size_t
 
__len
) 
__THROW
;

88 extern int 
	$inet_net_pton
 (int 
__af
, const char *
__cp
,

89 void *
__buf
, 
size_t
 
__len
) 
__THROW
;

94 extern unsigned int 
	$inet_nsap_addr
 (const char *
__cp
,

95 unsigned char *
__buf
, int 
__len
) 
__THROW
;

99 extern char *
	$inet_nsap_ntoa
 (int 
__len
, const unsigned char *
__cp
,

100 char *
__buf
) 
__THROW
;

103 
__END_DECLS


	@/usr/include/netdb.h

22 #ifndef 
_NETDB_H


23 #define 
	#_NETDB_H
 1

	)

25 #include 
	~<features.h
>

27 #include 
	~<netinet/in.h
>

28 #include 
	~<bits/stdint-uintn.h
>

29 #ifdef 
__USE_MISC


32 #include 
	~<rpc/netdb.h
>

35 #ifdef 
__USE_GNU


36 #include 
	~<bits/types/sigevent_t.h
>

37 #include 
	~<bits/types/struct_timespec.h
>

40 #include 
	~<bits/netdb.h
>

43 #define 
	#_PATH_HEQUIV
 "/etc/hosts.equiv"

	)

44 #define 
	#_PATH_HOSTS
 "/etc/hosts"

	)

45 #define 
	#_PATH_NETWORKS
 "/etc/networks"

	)

46 #define 
	#_PATH_NSSWITCH_CONF
 "/etc/nsswitch.conf"

	)

47 #define 
	#_PATH_PROTOCOLS
 "/etc/protocols"

	)

48 #define 
	#_PATH_SERVICES
 "/etc/services"

	)

51 
	g__BEGIN_DECLS


53 #if 
defined
 
__USE_MISC
 || !defined 
__USE_XOPEN2K8


56 #define 
	#h_errno
 (*
	`__h_errno_location
 ())

	)

59 extern int *
	$__h_errno_location
 (void) 
__THROW
 
	`__attribute__
 ((
__const__
));

63 #define 
	#HOST_NOT_FOUND
 1

	)

64 #define 
	#TRY_AGAIN
 2

	)

66 #define 
	#NO_RECOVERY
 3

	)

68 #define 
	#NO_DATA
 4

	)

71 #ifdef 
__USE_MISC


72 #define 
	#NETDB_INTERNAL
 -1

	)

73 #define 
	#NETDB_SUCCESS
 0

	)

74 #define 
	#NO_ADDRESS
 
NO_DATA


	)

77 #if 
defined
 
__USE_XOPEN2K
 || defined 
__USE_XOPEN_EXTENDED


79 #define 
	#IPPORT_RESERVED
 1024

	)

82 #ifdef 
__USE_GNU


84 #define 
	#SCOPE_DELIMITER
 '%'

	)

87 #ifdef 
__USE_MISC


90 extern void 
	$herror
 (const char *
__str
) 
__THROW
;

93 extern const char *
	$hstrerror
 (int 
__err_num
) 
__THROW
;

98 struct 
	shostent


100 char *
h_name
;

101 char **
h_aliases
;

102 int 
h_addrtype
;

103 int 
h_length
;

104 char **
h_addr_list
;

105 #ifdef 
__USE_MISC


106 #define 
	#h_addr
 
h_addr_list
[0]

	)

115 extern void 
	`sethostent
 (int 
__stay_open
);

121 extern void 
	`endhostent
 (void);

128 extern struct 
hostent
 *
	`gethostent
 (void);

135 extern struct 
hostent
 *
	`gethostbyaddr
 (const void *
__addr
, 
__socklen_t
 
__len
,

136 int 
__type
);

142 extern struct 
hostent
 *
	`gethostbyname
 (const char *
__name
);

144 #ifdef 
__USE_MISC


153 extern struct 
hostent
 *
	`gethostbyname2
 (const char *
__name
, int 
__af
);

165 extern int 
	`gethostent_r
 (struct 
hostent
 *
__restrict
 
__result_buf
,

166 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

167 struct 
hostent
 **
__restrict
 
__result
,

168 int *
__restrict
 
__h_errnop
);

170 extern int 
	`gethostbyaddr_r
 (const void *
__restrict
 
__addr
, 
__socklen_t
 
__len
,

171 int 
__type
,

172 struct 
hostent
 *
__restrict
 
__result_buf
,

173 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

174 struct 
hostent
 **
__restrict
 
__result
,

175 int *
__restrict
 
__h_errnop
);

177 extern int 
	`gethostbyname_r
 (const char *
__restrict
 
__name
,

178 struct 
hostent
 *
__restrict
 
__result_buf
,

179 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

180 struct 
hostent
 **
__restrict
 
__result
,

181 int *
__restrict
 
__h_errnop
);

183 extern int 
	`gethostbyname2_r
 (const char *
__restrict
 
__name
, int 
__af
,

184 struct 
hostent
 *
__restrict
 
__result_buf
,

185 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

186 struct 
hostent
 **
__restrict
 
__result
,

187 int *
__restrict
 
__h_errnop
);

196 extern void 
	`setnetent
 (int 
__stay_open
);

202 extern void 
	`endnetent
 (void);

209 extern struct 
netent
 *
	`getnetent
 (void);

216 extern struct 
netent
 *
	`getnetbyaddr
 (
uint32_t
 
__net
, int 
__type
);

222 extern struct 
netent
 *
	`getnetbyname
 (const char *
__name
);

224 #ifdef 
__USE_MISC


235 extern int 
	`getnetent_r
 (struct 
netent
 *
__restrict
 
__result_buf
,

236 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

237 struct 
netent
 **
__restrict
 
__result
,

238 int *
__restrict
 
__h_errnop
);

240 extern int 
	`getnetbyaddr_r
 (
uint32_t
 
__net
, int 
__type
,

241 struct 
netent
 *
__restrict
 
__result_buf
,

242 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

243 struct 
netent
 **
__restrict
 
__result
,

244 int *
__restrict
 
__h_errnop
);

246 extern int 
	`getnetbyname_r
 (const char *
__restrict
 
__name
,

247 struct 
netent
 *
__restrict
 
__result_buf
,

248 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

249 struct 
netent
 **
__restrict
 
__result
,

250 int *
__restrict
 
__h_errnop
);

255 struct 
	sservent


257 char *
s_name
;

258 char **
s_aliases
;

259 int 
s_port
;

260 char *
s_proto
;

268 extern void 
	`setservent
 (int 
__stay_open
);

274 extern void 
	`endservent
 (void);

281 extern struct 
servent
 *
	`getservent
 (void);

288 extern struct 
servent
 *
	`getservbyname
 (const char *
__name
, const char *
__proto
);

295 extern struct 
servent
 *
	`getservbyport
 (int 
__port
, const char *
__proto
);

298 #ifdef 
__USE_MISC


306 extern int 
	`getservent_r
 (struct 
servent
 *
__restrict
 
__result_buf
,

307 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

308 struct 
servent
 **
__restrict
 
__result
);

310 extern int 
	`getservbyname_r
 (const char *
__restrict
 
__name
,

311 const char *
__restrict
 
__proto
,

312 struct 
servent
 *
__restrict
 
__result_buf
,

313 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

314 struct 
servent
 **
__restrict
 
__result
);

316 extern int 
	`getservbyport_r
 (int 
__port
, const char *
__restrict
 
__proto
,

317 struct 
servent
 *
__restrict
 
__result_buf
,

318 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

319 struct 
servent
 **
__restrict
 
__result
);

324 struct 
	sprotoent


326 char *
p_name
;

327 char **
p_aliases
;

328 int 
p_proto
;

336 extern void 
	`setprotoent
 (int 
__stay_open
);

342 extern void 
	`endprotoent
 (void);

349 extern struct 
protoent
 *
	`getprotoent
 (void);

355 extern struct 
protoent
 *
	`getprotobyname
 (const char *
__name
);

361 extern struct 
protoent
 *
	`getprotobynumber
 (int 
__proto
);

364 #ifdef 
__USE_MISC


372 extern int 
	`getprotoent_r
 (struct 
protoent
 *
__restrict
 
__result_buf
,

373 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

374 struct 
protoent
 **
__restrict
 
__result
);

376 extern int 
	`getprotobyname_r
 (const char *
__restrict
 
__name
,

377 struct 
protoent
 *
__restrict
 
__result_buf
,

378 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

379 struct 
protoent
 **
__restrict
 
__result
);

381 extern int 
	`getprotobynumber_r
 (int 
__proto
,

382 struct 
protoent
 *
__restrict
 
__result_buf
,

383 char *
__restrict
 
__buf
, 
size_t
 
__buflen
,

384 struct 
protoent
 **
__restrict
 
__result
);

393 extern int 
	`setnetgrent
 (const char *
__netgroup
);

401 extern void 
	`endnetgrent
 (void);

410 extern int 
	`getnetgrent
 (char **
__restrict
 
__hostp
,

411 char **
__restrict
 
__userp
,

412 char **
__restrict
 
__domainp
);

421 extern int 
	`innetgr
 (const char *
__netgroup
, const char *
__host
,

422 const char *
__user
, const char *
__domain
);

430 extern int 
	`getnetgrent_r
 (char **
__restrict
 
__hostp
,

431 char **
__restrict
 
__userp
,

432 char **
__restrict
 
__domainp
,

433 char *
__restrict
 
__buffer
, 
size_t
 
__buflen
);

437 #ifdef 
__USE_MISC


449 extern int 
	`rcmd
 (char **
__restrict
 
__ahost
, unsigned short int 
__rport
,

450 const char *
__restrict
 
__locuser
,

451 const char *
__restrict
 
__remuser
,

452 const char *
__restrict
 
__cmd
, int *__restrict 
__fd2p
);

461 extern int 
	`rcmd_af
 (char **
__restrict
 
__ahost
, unsigned short int 
__rport
,

462 const char *
__restrict
 
__locuser
,

463 const char *
__restrict
 
__remuser
,

464 const char *
__restrict
 
__cmd
, int *__restrict 
__fd2p
,

465 
sa_family_t
 
__af
);

477 extern int 
	`rexec
 (char **
__restrict
 
__ahost
, int 
__rport
,

478 const char *
__restrict
 
__name
,

479 const char *
__restrict
 
__pass
,

480 const char *
__restrict
 
__cmd
, int *__restrict 
__fd2p
);

489 extern int 
	`rexec_af
 (char **
__restrict
 
__ahost
, int 
__rport
,

490 const char *
__restrict
 
__name
,

491 const char *
__restrict
 
__pass
,

492 const char *
__restrict
 
__cmd
, int *__restrict 
__fd2p
,

493 
sa_family_t
 
__af
);

503 extern int 
	`ruserok
 (const char *
__rhost
, int 
__suser
,

504 const char *
__remuser
, const char *
__locuser
);

513 extern int 
	`ruserok_af
 (const char *
__rhost
, int 
__suser
,

514 const char *
__remuser
, const char *
__locuser
,

515 
sa_family_t
 
__af
);

526 extern int 
	`iruserok
 (
uint32_t
 
__raddr
, int 
__suser
,

527 const char *
__remuser
, const char *
__locuser
);

537 extern int 
	`iruserok_af
 (const void *
__raddr
, int 
__suser
,

538 const char *
__remuser
, const char *
__locuser
,

539 
sa_family_t
 
__af
);

549 extern int 
	`rresvport
 (int *
__alport
);

558 extern int 
	`rresvport_af
 (int *
__alport
, 
sa_family_t
 
__af
);

563 #ifdef 
__USE_XOPEN2K


565 struct 
	saddrinfo


567 int 
ai_flags
;

568 int 
ai_family
;

569 int 
ai_socktype
;

570 int 
ai_protocol
;

571 
socklen_t
 
ai_addrlen
;

572 struct 
sockaddr
 *
ai_addr
;

573 char *
ai_canonname
;

574 struct 
addrinfo
 *
ai_next
;

577 #ifdef 
__USE_GNU


579 struct 
	sgaicb


581 const char *
ar_name
;

582 const char *
ar_service
;

583 const struct 
addrinfo
 *
ar_request
;

584 struct 
addrinfo
 *
ar_result
;

586 int 
__return
;

587 int 
__glibc_reserved
[5];

591 #define 
	#GAI_WAIT
 0

	)

592 #define 
	#GAI_NOWAIT
 1

	)

596 #define 
	#AI_PASSIVE
 0x0001

	)

597 #define 
	#AI_CANONNAME
 0x0002

	)

598 #define 
	#AI_NUMERICHOST
 0x0004

	)

599 #define 
	#AI_V4MAPPED
 0x0008

	)

600 #define 
	#AI_ALL
 0x0010

	)

601 #define 
	#AI_ADDRCONFIG
 0x0020

	)

603 #ifdef 
__USE_GNU


604 #define 
	#AI_IDN
 0x0040

	)

607 #define 
	#AI_CANONIDN
 0x0080

	)

608 #define 
	#AI_IDN_ALLOW_UNASSIGNED
 \

609 
	`__glibc_macro_warning
 ("AI_IDN_ALLOW_UNASSIGNED is deprecated") 0x0100

	)

610 #define 
	#AI_IDN_USE_STD3_ASCII_RULES
 \

611 
	`__glibc_macro_warning
 ("AI_IDN_USE_STD3_ASCII_RULES is deprecated") 0x0200

	)

613 #define 
	#AI_NUMERICSERV
 0x0400

	)

616 #define 
	#EAI_BADFLAGS
 -1

	)

617 #define 
	#EAI_NONAME
 -2

	)

618 #define 
	#EAI_AGAIN
 -3

	)

619 #define 
	#EAI_FAIL
 -4

	)

620 #define 
	#EAI_FAMILY
 -6

	)

621 #define 
	#EAI_SOCKTYPE
 -7

	)

622 #define 
	#EAI_SERVICE
 -8

	)

623 #define 
	#EAI_MEMORY
 -10

	)

624 #define 
	#EAI_SYSTEM
 -11

	)

625 #define 
	#EAI_OVERFLOW
 -12

	)

626 #ifdef 
__USE_GNU


627 #define 
	#EAI_NODATA
 -5

	)

628 #define 
	#EAI_ADDRFAMILY
 -9

	)

629 #define 
	#EAI_INPROGRESS
 -100

	)

630 #define 
	#EAI_CANCELED
 -101

	)

631 #define 
	#EAI_NOTCANCELED
 -102

	)

632 #define 
	#EAI_ALLDONE
 -103

	)

633 #define 
	#EAI_INTR
 -104

	)

634 #define 
	#EAI_IDN_ENCODE
 -105

	)

637 #ifdef 
__USE_MISC


638 #define 
	#NI_MAXHOST
 1025

	)

639 #define 
	#NI_MAXSERV
 32

	)

642 #define 
	#NI_NUMERICHOST
 1

	)

643 #define 
	#NI_NUMERICSERV
 2

	)

644 #define 
	#NI_NOFQDN
 4

	)

645 #define 
	#NI_NAMEREQD
 8

	)

646 #define 
	#NI_DGRAM
 16

	)

647 #ifdef 
__USE_GNU


648 #define 
	#NI_IDN
 32

	)

649 #define 
	#NI_IDN_ALLOW_UNASSIGNED
 \

650 
	`__glibc_macro_warning
 ("NI_IDN_ALLOW_UNASSIGNED is deprecated") 64

	)

651 #define 
	#NI_IDN_USE_STD3_ASCII_RULES
 \

652 
	`__glibc_macro_warning
 ("NI_IDN_USE_STD3_ASCII_RULES is deprecated") 128

	)

660 extern int 
	`getaddrinfo
 (const char *
__restrict
 
__name
,

661 const char *
__restrict
 
__service
,

662 const struct 
addrinfo
 *
__restrict
 
__req
,

663 struct 
addrinfo
 **
__restrict
 
__pai
);

666 extern void 
	$freeaddrinfo
 (struct 
addrinfo
 *
__ai
) 
__THROW
;

669 extern const char *
	$gai_strerror
 (int 
__ecode
) 
__THROW
;

675 extern int 
	`getnameinfo
 (const struct 
sockaddr
 *
__restrict
 
__sa
,

676 
socklen_t
 
__salen
, char *
__restrict
 
__host
,

677 
socklen_t
 
__hostlen
, char *
__restrict
 
__serv
,

678 
socklen_t
 
__servlen
, int 
__flags
);

681 #ifdef 
__USE_GNU


690 extern int 
	`getaddrinfo_a
 (int 
__mode
, struct 
gaicb
 *
__list
[
__restrict_arr
],

691 int 
__ent
, struct 
sigevent
 *
__restrict
 
__sig
);

701 extern int 
	`gai_suspend
 (const struct 
gaicb
 *const 
__list
[], int 
__ent
,

702 const struct 
timespec
 *
__timeout
);

705 extern int 
	$gai_error
 (struct 
gaicb
 *
__req
) 
__THROW
;

708 extern int 
	$gai_cancel
 (struct 
gaicb
 *
__gaicbp
) 
__THROW
;

711 
__END_DECLS


	@/usr/include/netinet/in.h

18 #ifndef 
_NETINET_IN_H


19 #define 
	#_NETINET_IN_H
 1

	)

21 #include 
	~<features.h
>

22 #include 
	~<bits/stdint-uintn.h
>

23 #include 
	~<sys/socket.h
>

24 #include 
	~<bits/types.h
>

27 
__BEGIN_DECLS


30 typedef 
uint32_t
 
	tin_addr_t
;

31 struct 
	sin_addr


33 
in_addr_t
 
	ms_addr
;

37 #include 
	~<bits/in.h
>

42 
	mIPPROTO_IP
 = 0,

43 #define 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 #define 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 #define 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 #define 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 #define 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 #define 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 #define 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 #define 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 #define 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 #define 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 #define 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 #define 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 #define 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 #define 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 #define 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 #define 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 #define 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 #define 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 #define 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 #define 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 #define 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 #define 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 #define 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 #define 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 #define 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #if !
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 #define 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 #define 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 #define 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 #define 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 #define 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 #define 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 #define 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 typedef 
uint16_t
 
	tin_port_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 #define 
	#IN_CLASSA
(
a
) ((((
in_addr_t
)(a)) & 0x80000000) == 0)

	)

167 #define 
	#IN_CLASSA_NET
 0xff000000

	)

168 #define 
	#IN_CLASSA_NSHIFT
 24

	)

169 #define 
	#IN_CLASSA_HOST
 (0xffffffff & ~
IN_CLASSA_NET
)

	)

170 #define 
	#IN_CLASSA_MAX
 128

	)

172 #define 
	#IN_CLASSB
(
a
) ((((
in_addr_t
)(a)) & 0xc0000000) == 0x80000000)

	)

173 #define 
	#IN_CLASSB_NET
 0xffff0000

	)

174 #define 
	#IN_CLASSB_NSHIFT
 16

	)

175 #define 
	#IN_CLASSB_HOST
 (0xffffffff & ~
IN_CLASSB_NET
)

	)

176 #define 
	#IN_CLASSB_MAX
 65536

	)

178 #define 
	#IN_CLASSC
(
a
) ((((
in_addr_t
)(a)) & 0xe0000000) == 0xc0000000)

	)

179 #define 
	#IN_CLASSC_NET
 0xffffff00

	)

180 #define 
	#IN_CLASSC_NSHIFT
 8

	)

181 #define 
	#IN_CLASSC_HOST
 (0xffffffff & ~
IN_CLASSC_NET
)

	)

183 #define 
	#IN_CLASSD
(
a
) ((((
in_addr_t
)(a)) & 0xf0000000) == 0xe0000000)

	)

184 #define 
	#IN_MULTICAST
(
a
) 
	`IN_CLASSD
(a)

	)

186 #define 
	#IN_EXPERIMENTAL
(
a
) ((((
in_addr_t
)(a)) & 0xe0000000) == 0xe0000000)

	)

187 #define 
	#IN_BADCLASS
(
a
) ((((
in_addr_t
)(a)) & 0xf0000000) == 0xf0000000)

	)

190 #define 
	#INADDR_ANY
 ((
in_addr_t
) 0x00000000)

	)

192 #define 
	#INADDR_BROADCAST
 ((
in_addr_t
) 0xffffffff)

	)

194 #define 
	#INADDR_NONE
 ((
in_addr_t
) 0xffffffff)

	)

197 #define 
	#IN_LOOPBACKNET
 127

	)

199 #ifndef 
INADDR_LOOPBACK


200 #define 
	#INADDR_LOOPBACK
 ((
in_addr_t
) 0x7f000001)

	)

204 #define 
	#INADDR_UNSPEC_GROUP
 ((
in_addr_t
) 0xe0000000)

	)

205 #define 
	#INADDR_ALLHOSTS_GROUP
 ((
in_addr_t
) 0xe0000001)

	)

206 #define 
	#INADDR_ALLRTRS_GROUP
 ((
in_addr_t
) 0xe0000002)

	)

207 #define 
	#INADDR_MAX_LOCAL_GROUP
 ((
in_addr_t
) 0xe00000ff)

	)

209 #if !
__USE_KERNEL_IPV6_DEFS


211 struct 
	sin6_addr


215 
uint8_t
 
	m__u6_addr8
[16];

216 
uint16_t
 
	m__u6_addr16
[8];

217 
uint32_t
 
	m__u6_addr32
[4];

218 } 
	m__in6_u
;

219 #define 
	#s6_addr
 
__in6_u
.
__u6_addr8


	)

220 #ifdef 
__USE_MISC


221 #define 
	#s6_addr16
 
__in6_u
.
__u6_addr16


	)

222 #define 
	#s6_addr32
 
__in6_u
.
__u6_addr32


	)

227 extern const struct 
in6_addr
 
in6addr_any
;

228 extern const struct 
in6_addr
 
in6addr_loopback
;

229 #define 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 #define 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 #define 
	#INET_ADDRSTRLEN
 16

	)

233 #define 
	#INET6_ADDRSTRLEN
 46

	)

237 struct 
	ssockaddr_in


239 
__SOCKADDR_COMMON
 (
sin_
);

240 
in_port_t
 
	msin_port
;

241 struct 
in_addr
 
	msin_addr
;

244 unsigned char 
	msin_zero
[sizeof (struct 
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246 sizeof (
in_port_t
) -

247 sizeof (struct 
in_addr
)];

250 #if !
__USE_KERNEL_IPV6_DEFS


252 struct 
	ssockaddr_in6


254 
__SOCKADDR_COMMON
 (
sin6_
);

255 
in_port_t
 
	msin6_port
;

256 
uint32_t
 
	msin6_flowinfo
;

257 struct 
in6_addr
 
	msin6_addr
;

258 
uint32_t
 
	msin6_scope_id
;

262 #ifdef 
__USE_MISC


264 struct 
	sip_mreq


267 struct 
in_addr
 
	mimr_multiaddr
;

270 struct 
in_addr
 
	mimr_interface
;

273 struct 
	sip_mreq_source


276 struct 
in_addr
 
	mimr_multiaddr
;

279 struct 
in_addr
 
	mimr_interface
;

282 struct 
in_addr
 
	mimr_sourceaddr
;

286 #if !
__USE_KERNEL_IPV6_DEFS


288 struct 
	sipv6_mreq


291 struct 
in6_addr
 
	mipv6mr_multiaddr
;

294 unsigned int 
	mipv6mr_interface
;

298 #ifdef 
__USE_MISC


300 struct 
	sgroup_req


303 
uint32_t
 
	mgr_interface
;

306 struct 
sockaddr_storage
 
	mgr_group
;

309 struct 
	sgroup_source_req


312 
uint32_t
 
	mgsr_interface
;

315 struct 
sockaddr_storage
 
	mgsr_group
;

318 struct 
sockaddr_storage
 
	mgsr_source
;

323 struct 
	sip_msfilter


326 struct 
in_addr
 
	mimsf_multiaddr
;

329 struct 
in_addr
 
	mimsf_interface
;

332 
uint32_t
 
	mimsf_fmode
;

335 
uint32_t
 
	mimsf_numsrc
;

337 struct 
in_addr
 
	mimsf_slist
[1];

340 #define 
	#IP_MSFILTER_SIZE
(
numsrc
) (sizeof (struct 
ip_msfilter
) \

341 - sizeof (struct 
in_addr
) \

342 + (
numsrc
) * sizeof (struct 
in_addr
))

	)

344 struct 
	sgroup_filter


347 
uint32_t
 
	mgf_interface
;

350 struct 
sockaddr_storage
 
	mgf_group
;

353 
uint32_t
 
	mgf_fmode
;

356 
uint32_t
 
	mgf_numsrc
;

358 struct 
sockaddr_storage
 
	mgf_slist
[1];

361 #define 
	#GROUP_FILTER_SIZE
(
numsrc
) (sizeof (struct 
group_filter
) \

362 - sizeof (struct 
sockaddr_storage
) \

363 + ((
numsrc
) \

364 * sizeof (struct 
sockaddr_storage
)))

	)

374 extern 
uint32_t
 
	$ntohl
 (
uint32_t
 
__netlong
) 
__THROW
 
	`__attribute__
 ((
__const__
));

375 extern 
uint16_t
 
	$ntohs
 (
uint16_t
 
__netshort
)

376 
__THROW
 
	`__attribute__
 ((
__const__
));

377 extern 
uint32_t
 
	$htonl
 (
uint32_t
 
__hostlong
)

378 
__THROW
 
	`__attribute__
 ((
__const__
));

379 extern 
uint16_t
 
	$htons
 (
uint16_t
 
__hostshort
)

380 
__THROW
 
	`__attribute__
 ((
__const__
));

382 #include 
	~<endian.h
>

385 #include 
	~<bits/byteswap.h
>

386 #include 
	~<bits/uintn-identity.h
>

388 #ifdef 
__OPTIMIZE__


392 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


395 #define 
	#ntohl
(
x
) 
	`__uint32_identity
 (x)

	)

396 #define 
	#ntohs
(
x
) 
	`__uint16_identity
 (x)

	)

397 #define 
	#htonl
(
x
) 
	`__uint32_identity
 (x)

	)

398 #define 
	#htons
(
x
) 
	`__uint16_identity
 (x)

	)

400 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


401 #define 
	#ntohl
(
x
) 
	`__bswap_32
 (x)

	)

402 #define 
	#ntohs
(
x
) 
	`__bswap_16
 (x)

	)

403 #define 
	#htonl
(
x
) 
	`__bswap_32
 (x)

	)

404 #define 
	#htons
(
x
) 
	`__bswap_16
 (x)

	)

409 #ifdef 
__GNUC__


410 #define 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

411 (
__extension__
 \

412 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

413 
__a
->
__in6_u
.
__u6_addr32
[0] == 0 \

414 && 
__a
->
__in6_u
.
__u6_addr32
[1] == 0 \

415 && 
__a
->
__in6_u
.
__u6_addr32
[2] == 0 \

416 && 
__a
->
__in6_u
.
__u6_addr32
[3] == 0; 
	}
}))

	)

418 #define 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

419 (
__extension__
 \

420 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

421 
__a
->
__in6_u
.
__u6_addr32
[0] == 0 \

422 && 
__a
->
__in6_u
.
__u6_addr32
[1] == 0 \

423 && 
__a
->
__in6_u
.
__u6_addr32
[2] == 0 \

424 && 
__a
->
__in6_u
.
__u6_addr32
[3] == 
	`htonl
 (1); }))

	)

426 #define 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

427 (
__extension__
 \

428 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

429 (
__a
->
__in6_u
.
__u6_addr32
[0] & 
	`htonl
 (0xffc00000)) == htonl (0xfe800000); }))

	)

431 #define 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

432 (
__extension__
 \

433 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

434 (
__a
->
__in6_u
.
__u6_addr32
[0] & 
	`htonl
 (0xffc00000)) == htonl (0xfec00000); }))

	)

436 #define 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

437 (
__extension__
 \

438 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

439 
__a
->
__in6_u
.
__u6_addr32
[0] == 0 \

440 && 
__a
->
__in6_u
.
__u6_addr32
[1] == 0 \

441 && 
__a
->
__in6_u
.
__u6_addr32
[2] == 
	`htonl
 (0xffff); }))

	)

443 #define 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

444 (
__extension__
 \

445 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

446 
__a
->
__in6_u
.
__u6_addr32
[0] == 0 \

447 && 
__a
->
__in6_u
.
__u6_addr32
[1] == 0 \

448 && 
__a
->
__in6_u
.
__u6_addr32
[2] == 0 \

449 && 
	`ntohl
 (
__a
->
__in6_u
.
__u6_addr32
[3]) > 1; }))

	)

451 #define 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

452 (
__extension__
 \

453 ({ const struct 
in6_addr
 *
__a
 = (const struct in6_addr *) (
a
); \

454 const struct 
in6_addr
 *
__b
 = (const struct in6_addr *) (
b
); \

455 
__a
->
__in6_u
.
__u6_addr32
[0] == 
__b
->__in6_u.__u6_addr32[0] \

456 && 
__a
->
__in6_u
.
__u6_addr32
[1] == 
__b
->__in6_u.__u6_addr32[1] \

457 && 
__a
->
__in6_u
.
__u6_addr32
[2] == 
__b
->__in6_u.__u6_addr32[2] \

458 && 
__a
->
__in6_u
.
__u6_addr32
[3] == 
__b
->__in6_u.__u6_addr32[3]; }))

	)

460 #define 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

461 (((const 
uint32_t
 *) (
a
))[0] == 0 \

462 && ((const 
uint32_t
 *) (
a
))[1] == 0 \

463 && ((const 
uint32_t
 *) (
a
))[2] == 0 \

464 && ((const 
uint32_t
 *) (
a
))[3] == 0)

	)

466 #define 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

467 (((const 
uint32_t
 *) (
a
))[0] == 0 \

468 && ((const 
uint32_t
 *) (
a
))[1] == 0 \

469 && ((const 
uint32_t
 *) (
a
))[2] == 0 \

470 && ((const 
uint32_t
 *) (
a
))[3] == 
	`htonl
 (1))

	)

472 #define 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

473 ((((const 
uint32_t
 *) (
a
))[0] & 
	`htonl
 (0xffc00000)) \

474 == 
	`htonl
 (0xfe800000))

	)

476 #define 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

477 ((((const 
uint32_t
 *) (
a
))[0] & 
	`htonl
 (0xffc00000)) \

478 == 
	`htonl
 (0xfec00000))

	)

480 #define 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

481 ((((const 
uint32_t
 *) (
a
))[0] == 0) \

482 && (((const 
uint32_t
 *) (
a
))[1] == 0) \

483 && (((const 
uint32_t
 *) (
a
))[2] == 
	`htonl
 (0xffff)))

	)

485 #define 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

486 ((((const 
uint32_t
 *) (
a
))[0] == 0) \

487 && (((const 
uint32_t
 *) (
a
))[1] == 0) \

488 && (((const 
uint32_t
 *) (
a
))[2] == 0) \

489 && (
	`ntohl
 (((const 
uint32_t
 *) (
a
))[3]) > 1))

	)

491 #define 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

492 ((((const 
uint32_t
 *) (
a
))[0] == ((const uint32_t *) (
b
))[0]) \

493 && (((const 
uint32_t
 *) (
a
))[1] == ((const uint32_t *) (
b
))[1]) \

494 && (((const 
uint32_t
 *) (
a
))[2] == ((const uint32_t *) (
b
))[2]) \

495 && (((const 
uint32_t
 *) (
a
))[3] == ((const uint32_t *) (
b
))[3]))

	)

498 #define 
	#IN6_IS_ADDR_MULTICAST
(
a
) (((const 
uint8_t
 *) (a))[0] == 0xff)

	)

500 #ifdef 
__USE_MISC


502 extern int 
	$bindresvport
 (int 
__sockfd
, struct 
sockaddr_in
 *
__sock_in
) 
__THROW
;

505 extern int 
	$bindresvport6
 (int 
__sockfd
, struct 
sockaddr_in6
 *
__sock_in
)

506 
__THROW
;

510 #define 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

511 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

512 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0x1))

	)

514 #define 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

515 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

516 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0x2))

	)

518 #define 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

519 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

520 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0x5))

	)

522 #define 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

523 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

524 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0x8))

	)

526 #define 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

527 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

528 && ((((const 
uint8_t
 *) (
a
))[1] & 0xf) == 0xe))

	)

531 #ifdef 
__USE_GNU


532 struct 
cmsghdr
;

534 #if !
__USE_KERNEL_IPV6_DEFS


536 struct 
	sin6_pktinfo


538 struct 
in6_addr
 
ipi6_addr
;

539 unsigned int 
ipi6_ifindex
;

543 struct 
	sip6_mtuinfo


545 struct 
sockaddr_in6
 
ip6m_addr
;

546 
uint32_t
 
ip6m_mtu
;

551 extern int 
	$inet6_option_space
 (int 
__nbytes
)

552 
__THROW
 
__attribute_deprecated__
;

553 extern int 
	$inet6_option_init
 (void *
__bp
, struct 
cmsghdr
 **
__cmsgp
,

554 int 
__type
) 
__THROW
 
__attribute_deprecated__
;

555 extern int 
	$inet6_option_append
 (struct 
cmsghdr
 *
__cmsg
,

556 const 
uint8_t
 *
__typep
, int 
__multx
,

557 int 
__plusy
) 
__THROW
 
__attribute_deprecated__
;

558 extern 
uint8_t
 *
	$inet6_option_alloc
 (struct 
cmsghdr
 *
__cmsg
, int 
__datalen
,

559 int 
__multx
, int 
__plusy
)

560 
__THROW
 
__attribute_deprecated__
;

561 extern int 
	$inet6_option_next
 (const struct 
cmsghdr
 *
__cmsg
,

562 
uint8_t
 **
__tptrp
)

563 
__THROW
 
__attribute_deprecated__
;

564 extern int 
	$inet6_option_find
 (const struct 
cmsghdr
 *
__cmsg
,

565 
uint8_t
 **
__tptrp
, int 
__type
)

566 
__THROW
 
__attribute_deprecated__
;

570 extern int 
	$inet6_opt_init
 (void *
__extbuf
, 
socklen_t
 
__extlen
) 
__THROW
;

571 extern int 
	$inet6_opt_append
 (void *
__extbuf
, 
socklen_t
 
__extlen
, int 
__offset
,

572 
uint8_t
 
__type
, 
socklen_t
 
__len
, uint8_t 
__align
,

573 void **
__databufp
) 
__THROW
;

574 extern int 
	$inet6_opt_finish
 (void *
__extbuf
, 
socklen_t
 
__extlen
, int 
__offset
)

575 
__THROW
;

576 extern int 
	$inet6_opt_set_val
 (void *
__databuf
, int 
__offset
, void *
__val
,

577 
socklen_t
 
__vallen
) 
__THROW
;

578 extern int 
	$inet6_opt_next
 (void *
__extbuf
, 
socklen_t
 
__extlen
, int 
__offset
,

579 
uint8_t
 *
__typep
, 
socklen_t
 *
__lenp
,

580 void **
__databufp
) 
__THROW
;

581 extern int 
	$inet6_opt_find
 (void *
__extbuf
, 
socklen_t
 
__extlen
, int 
__offset
,

582 
uint8_t
 
__type
, 
socklen_t
 *
__lenp
,

583 void **
__databufp
) 
__THROW
;

584 extern int 
	$inet6_opt_get_val
 (void *
__databuf
, int 
__offset
, void *
__val
,

585 
socklen_t
 
__vallen
) 
__THROW
;

589 extern 
socklen_t
 
	$inet6_rth_space
 (int 
__type
, int 
__segments
) 
__THROW
;

590 extern void *
	$inet6_rth_init
 (void *
__bp
, 
socklen_t
 
__bp_len
, int 
__type
,

591 int 
__segments
) 
__THROW
;

592 extern int 
	$inet6_rth_add
 (void *
__bp
, const struct 
in6_addr
 *
__addr
) 
__THROW
;

593 extern int 
	$inet6_rth_reverse
 (const void *
__in
, void *
__out
) 
__THROW
;

594 extern int 
	$inet6_rth_segments
 (const void *
__bp
) 
__THROW
;

595 extern struct 
in6_addr
 *
	$inet6_rth_getaddr
 (const void *
__bp
, int 
__index
)

596 
__THROW
;

602 extern int 
	$getipv4sourcefilter
 (int 
__s
, struct 
in_addr
 
__interface_addr
,

603 struct 
in_addr
 
__group
, 
uint32_t
 *
__fmode
,

604 
uint32_t
 *
__numsrc
, struct 
in_addr
 *
__slist
)

605 
__THROW
;

608 extern int 
	$setipv4sourcefilter
 (int 
__s
, struct 
in_addr
 
__interface_addr
,

609 struct 
in_addr
 
__group
, 
uint32_t
 
__fmode
,

610 
uint32_t
 
__numsrc
,

611 const struct 
in_addr
 *
__slist
)

612 
__THROW
;

616 extern int 
	$getsourcefilter
 (int 
__s
, 
uint32_t
 
__interface_addr
,

617 const struct 
sockaddr
 *
__group
,

618 
socklen_t
 
__grouplen
, 
uint32_t
 *
__fmode
,

619 
uint32_t
 *
__numsrc
,

620 struct 
sockaddr_storage
 *
__slist
) 
__THROW
;

623 extern int 
	$setsourcefilter
 (int 
__s
, 
uint32_t
 
__interface_addr
,

624 const struct 
sockaddr
 *
__group
,

625 
socklen_t
 
__grouplen
, 
uint32_t
 
__fmode
,

626 
uint32_t
 
__numsrc
,

627 const struct 
sockaddr_storage
 *
__slist
) 
__THROW
;

630 
__END_DECLS


	@/usr/include/stdio.h

23 #ifndef 
_STDIO_H


24 #define 
	#_STDIO_H
 1

	)

26 #define 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 #include 
	~<bits/libc-header-start.h
>

29 
	g__BEGIN_DECLS


31 #define 
	#__need_size_t


	)

32 #define 
	#__need_NULL


	)

33 #include 
	~<stddef.h
>

35 #define 
	#__need___va_list


	)

36 #include 
	~<stdarg.h
>

38 #include 
	~<bits/types.h
>

39 #include 
	~<bits/types/__fpos_t.h
>

40 #include 
	~<bits/types/__fpos64_t.h
>

41 #include 
	~<bits/types/__FILE.h
>

42 #include 
	~<bits/types/FILE.h
>

43 #include 
	~<bits/types/struct_FILE.h
>

45 #ifdef 
__USE_GNU


46 #include 
	~<bits/types/cookie_io_functions_t.h
>

49 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


50 #ifdef 
__GNUC__


51 #ifndef 
_VA_LIST_DEFINED


52 typedef 
__gnuc_va_list
 
	tva_list
;

53 #define 
	#_VA_LIST_DEFINED


	)

56 #include 
	~<stdarg.h
>

60 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


61 #ifndef 
__off_t_defined


62 #ifndef 
__USE_FILE_OFFSET64


63 typedef 
__off_t
 
	toff_t
;

65 typedef 
__off64_t
 
	toff_t
;

67 #define 
	#__off_t_defined


	)

69 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


70 typedef 
__off64_t
 
	toff64_t
;

71 #define 
	#__off64_t_defined


	)

75 #ifdef 
__USE_XOPEN2K8


76 #ifndef 
__ssize_t_defined


77 typedef 
__ssize_t
 
	tssize_t
;

78 #define 
	#__ssize_t_defined


	)

83 #ifndef 
__USE_FILE_OFFSET64


84 typedef 
__fpos_t
 
	tfpos_t
;

86 typedef 
__fpos64_t
 
	tfpos_t
;

88 #ifdef 
__USE_LARGEFILE64


89 typedef 
__fpos64_t
 
	tfpos64_t
;

93 #define 
	#_IOFBF
 0

	)

94 #define 
	#_IOLBF
 1

	)

95 #define 
	#_IONBF
 2

	)

99 #define 
	#BUFSIZ
 8192

	)

104 #define 
	#EOF
 (-1)

	)

109 #define 
	#SEEK_SET
 0

	)

110 #define 
	#SEEK_CUR
 1

	)

111 #define 
	#SEEK_END
 2

	)

112 #ifdef 
__USE_GNU


113 #define 
	#SEEK_DATA
 3

	)

114 #define 
	#SEEK_HOLE
 4

	)

118 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


120 #define 
	#P_tmpdir
 "/tmp"

	)

133 #include 
	~<bits/stdio_lim.h
>

137 extern 
FILE
 *
stdin
;

138 extern 
FILE
 *
stdout
;

139 extern 
FILE
 *
stderr
;

141 #define 
	#stdin
 
stdin


	)

142 #define 
	#stdout
 
stdout


	)

143 #define 
	#stderr
 
stderr


	)

146 extern int 
	$remove
 (const char *
__filename
) 
__THROW
;

148 extern int 
	$rename
 (const char *
__old
, const char *
__new
) 
__THROW
;

150 #ifdef 
__USE_ATFILE


152 extern int 
	$renameat
 (int 
__oldfd
, const char *
__old
, int 
__newfd
,

153 const char *
__new
) 
__THROW
;

156 #ifdef 
__USE_GNU


158 #define 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 #define 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 #define 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 extern int 
	$renameat2
 (int 
__oldfd
, const char *
__old
, int 
__newfd
,

165 const char *
__new
, unsigned int 
__flags
) 
__THROW
;

172 #ifndef 
__USE_FILE_OFFSET64


173 extern 
FILE
 *
	$tmpfile
 (void) 
__wur
;

175 #ifdef 
__REDIRECT


176 extern 
FILE
 *
	`__REDIRECT
 (
tmpfile
, (void), 
tmpfile64
) 
__wur
;

178 #define 
	#tmpfile
 
tmpfile64


	)

182 #ifdef 
__USE_LARGEFILE64


183 extern 
FILE
 *
	$tmpfile64
 (void) 
__wur
;

187 extern char *
	$tmpnam
 (char *
__s
) 
__THROW
 
__wur
;

189 #ifdef 
__USE_MISC


192 extern char *
	$tmpnam_r
 (char *
__s
) 
__THROW
 
__wur
;

196 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


204 extern char *
	$tempnam
 (const char *
__dir
, const char *
__pfx
)

205 
__THROW
 
__attribute_malloc__
 
__wur
;

213 extern int 
	`fclose
 (
FILE
 *
__stream
);

218 extern int 
	`fflush
 (
FILE
 *
__stream
);

220 #ifdef 
__USE_MISC


227 extern int 
	`fflush_unlocked
 (
FILE
 *
__stream
);

230 #ifdef 
__USE_GNU


237 extern int 
	`fcloseall
 (void);

241 #ifndef 
__USE_FILE_OFFSET64


246 extern 
FILE
 *
	$fopen
 (const char *
__restrict
 
__filename
,

247 const char *
__restrict
 
__modes
) 
__wur
;

252 extern 
FILE
 *
	$freopen
 (const char *
__restrict
 
__filename
,

253 const char *
__restrict
 
__modes
,

254 
FILE
 *
__restrict
 
__stream
) 
__wur
;

256 #ifdef 
__REDIRECT


257 extern 
FILE
 *
	`__REDIRECT
 (
fopen
, (const char *
__restrict
 
__filename
,

258 const char *
__restrict
 
__modes
), 
fopen64
)

259 
__wur
;

260 extern 
FILE
 *
	`__REDIRECT
 (
freopen
, (const char *
__restrict
 
__filename
,

261 const char *
__restrict
 
__modes
,

262 
FILE
 *
__restrict
 
__stream
), 
freopen64
)

263 
__wur
;

265 #define 
	#fopen
 
fopen64


	)

266 #define 
	#freopen
 
freopen64


	)

269 #ifdef 
__USE_LARGEFILE64


270 extern 
FILE
 *
	$fopen64
 (const char *
__restrict
 
__filename
,

271 const char *
__restrict
 
__modes
) 
__wur
;

272 extern 
FILE
 *
	$freopen64
 (const char *
__restrict
 
__filename
,

273 const char *
__restrict
 
__modes
,

274 
FILE
 *
__restrict
 
__stream
) 
__wur
;

277 #ifdef 
__USE_POSIX


279 extern 
FILE
 *
	$fdopen
 (int 
__fd
, const char *
__modes
) 
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 extern 
FILE
 *
	$fopencookie
 (void *
__restrict
 
__magic_cookie
,

286 const char *
__restrict
 
__modes
,

287 
cookie_io_functions_t
 
__io_funcs
) 
__THROW
 
__wur
;

290 #if 
defined
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 extern 
FILE
 *
	$fmemopen
 (void *
__s
, 
size_t
 
__len
, const char *
__modes
)

293 
__THROW
 
__wur
;

298 extern 
FILE
 *
	$open_memstream
 (char **
__bufloc
, 
size_t
 *
__sizeloc
) 
__THROW
 
__wur
;

304 extern void 
	$setbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
) 
__THROW
;

308 extern int 
	$setvbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

309 int 
__modes
, 
size_t
 
__n
) 
__THROW
;

311 #ifdef 
__USE_MISC


314 extern void 
	$setbuffer
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

315 
size_t
 
__size
) 
__THROW
;

318 extern void 
	$setlinebuf
 (
FILE
 *
__stream
) 
__THROW
;

326 extern int 
	`fprintf
 (
FILE
 *
__restrict
 
__stream
,

327 const char *
__restrict
 
__format
, ...);

332 extern int 
	`printf
 (const char *
__restrict
 
__format
, ...);

334 extern int 
	$sprintf
 (char *
__restrict
 
__s
,

335 const char *
__restrict
 
__format
, ...) 
__THROWNL
;

341 extern int 
	`vfprintf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

342 
__gnuc_va_list
 
__arg
);

347 extern int 
	`vprintf
 (const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
);

349 extern int 
	$vsprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__format
,

350 
__gnuc_va_list
 
__arg
) 
__THROWNL
;

352 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_UNIX98


354 extern int 
	$snprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

355 const char *
__restrict
 
__format
, ...)

356 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

358 extern int 
	$vsnprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

359 const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
)

360 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

363 #if 
	`__GLIBC_USE
 (
LIB_EXT2
)

366 extern int 
	$vasprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__f
,

367 
__gnuc_va_list
 
__arg
)

368 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 0))) 
__wur
;

369 extern int 
	$__asprintf
 (char **
__restrict
 
__ptr
,

370 const char *
__restrict
 
__fmt
, ...)

371 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

372 extern int 
	$asprintf
 (char **
__restrict
 
__ptr
,

373 const char *
__restrict
 
__fmt
, ...)

374 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

377 #ifdef 
__USE_XOPEN2K8


379 extern int 
	$vdprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
,

380 
__gnuc_va_list
 
__arg
)

381 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

382 extern int 
	$dprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, ...)

383 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

391 extern int 
	$fscanf
 (
FILE
 *
__restrict
 
__stream
,

392 const char *
__restrict
 
__format
, ...) 
__wur
;

397 extern int 
	$scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

399 extern int 
	$sscanf
 (const char *
__restrict
 
__s
,

400 const char *
__restrict
 
__format
, ...) 
__THROW
;

405 #if !
	`__GLIBC_USE
 (
DEPRECATED_SCANF
) && !
defined
 
__LDBL_COMPAT


406 #ifdef 
__REDIRECT


407 extern int 
	`__REDIRECT
 (
fscanf
, (
FILE
 *
__restrict
 
__stream
,

408 const char *
__restrict
 
__format
, ...),

409 
__isoc99_fscanf
) 
__wur
;

410 extern int 
	`__REDIRECT
 (
scanf
, (const char *
__restrict
 
__format
, ...),

411 
__isoc99_scanf
) 
__wur
;

412 extern int 
	`__REDIRECT_NTH
 (
sscanf
, (const char *
__restrict
 
__s
,

413 const char *
__restrict
 
__format
, ...),

414 
__isoc99_sscanf
);

416 extern int 
	$__isoc99_fscanf
 (
FILE
 *
__restrict
 
__stream
,

417 const char *
__restrict
 
__format
, ...) 
__wur
;

418 extern int 
	$__isoc99_scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

419 extern int 
	$__isoc99_sscanf
 (const char *
__restrict
 
__s
,

420 const char *
__restrict
 
__format
, ...) 
__THROW
;

421 #define 
	#fscanf
 
__isoc99_fscanf


	)

422 #define 
	#scanf
 
__isoc99_scanf


	)

423 #define 
	#sscanf
 
__isoc99_sscanf


	)

427 #ifdef 
__USE_ISOC99


432 extern int 
	$vfscanf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

433 
__gnuc_va_list
 
__arg
)

434 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

440 extern int 
	$vscanf
 (const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
)

441 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

444 extern int 
	$vsscanf
 (const char *
__restrict
 
__s
,

445 const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
)

446 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

449 #if !
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

450 #if 
defined
 
__REDIRECT
 && !defined 
__LDBL_COMPAT


451 extern int 
	`__REDIRECT
 (
vfscanf
,

452 (
FILE
 *
__restrict
 
__s
,

453 const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
),

454 
__isoc99_vfscanf
)

455 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

456 extern int 
	`__REDIRECT
 (
vscanf
, (const char *
__restrict
 
__format
,

457 
__gnuc_va_list
 
__arg
), 
__isoc99_vscanf
)

458 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

459 extern int 
	`__REDIRECT_NTH
 (
vsscanf
,

460 (const char *
__restrict
 
__s
,

461 const char *
__restrict
 
__format
,

462 
__gnuc_va_list
 
__arg
), 
__isoc99_vsscanf
)

463 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

464 #elif !
defined
 
__REDIRECT


465 extern int 
	$__isoc99_vfscanf
 (
FILE
 *
__restrict
 
__s
,

466 const char *
__restrict
 
__format
,

467 
__gnuc_va_list
 
__arg
) 
__wur
;

468 extern int 
	$__isoc99_vscanf
 (const char *
__restrict
 
__format
,

469 
__gnuc_va_list
 
__arg
) 
__wur
;

470 extern int 
	$__isoc99_vsscanf
 (const char *
__restrict
 
__s
,

471 const char *
__restrict
 
__format
,

472 
__gnuc_va_list
 
__arg
) 
__THROW
;

473 #define 
	#vfscanf
 
__isoc99_vfscanf


	)

474 #define 
	#vscanf
 
__isoc99_vscanf


	)

475 #define 
	#vsscanf
 
__isoc99_vsscanf


	)

485 extern int 
	`fgetc
 (
FILE
 *
__stream
);

486 extern int 
	`getc
 (
FILE
 *
__stream
);

492 extern int 
	`getchar
 (void);

494 #ifdef 
__USE_POSIX199506


499 extern int 
	`getc_unlocked
 (
FILE
 *
__stream
);

500 extern int 
	`getchar_unlocked
 (void);

503 #ifdef 
__USE_MISC


510 extern int 
	`fgetc_unlocked
 (
FILE
 *
__stream
);

521 extern int 
	`fputc
 (int 
__c
, 
FILE
 *
__stream
);

522 extern int 
	`putc
 (int 
__c
, 
FILE
 *
__stream
);

528 extern int 
	`putchar
 (int 
__c
);

530 #ifdef 
__USE_MISC


537 extern int 
	`fputc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

540 #ifdef 
__USE_POSIX199506


545 extern int 
	`putc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

546 extern int 
	`putchar_unlocked
 (int 
__c
);

550 #if 
defined
 
__USE_MISC
 \

551 || (
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
)

553 extern int 
	`getw
 (
FILE
 *
__stream
);

556 extern int 
	`putw
 (int 
__w
, 
FILE
 *
__stream
);

564 extern char *
	$fgets
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

565 
__wur
;

567 #if 
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 extern char *
	$gets
 (char *
__s
) 
__wur
 
__attribute_deprecated__
;

580 #ifdef 
__USE_GNU


587 extern char *
	$fgets_unlocked
 (char *
__restrict
 
__s
, int 
__n
,

588 
FILE
 *
__restrict
 
__stream
) 
__wur
;

592 #if 
defined
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 extern 
__ssize_t
 
	$__getdelim
 (char **
__restrict
 
__lineptr
,

604 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

605 
FILE
 *
__restrict
 
__stream
) 
__wur
;

606 extern 
__ssize_t
 
	$getdelim
 (char **
__restrict
 
__lineptr
,

607 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

608 
FILE
 *
__restrict
 
__stream
) 
__wur
;

616 extern 
__ssize_t
 
	$getline
 (char **
__restrict
 
__lineptr
,

617 
size_t
 *
__restrict
 
__n
,

618 
FILE
 *
__restrict
 
__stream
) 
__wur
;

626 extern int 
	`fputs
 (const char *
__restrict
 
__s
, 
FILE
 *__restrict 
__stream
);

632 extern int 
	`puts
 (const char *
__s
);

639 extern int 
	`ungetc
 (int 
__c
, 
FILE
 *
__stream
);

646 extern 
size_t
 
	$fread
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

652 extern 
size_t
 
	`fwrite
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

653 
size_t
 
__n
, 
FILE
 *
__restrict
 
__s
);

655 #ifdef 
__USE_GNU


662 extern int 
	`fputs_unlocked
 (const char *
__restrict
 
__s
,

663 
FILE
 *
__restrict
 
__stream
);

666 #ifdef 
__USE_MISC


673 extern 
size_t
 
	$fread_unlocked
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

675 extern 
size_t
 
	`fwrite_unlocked
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

676 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
);

684 extern int 
	`fseek
 (
FILE
 *
__stream
, long int 
__off
, int 
__whence
);

689 extern long int 
	$ftell
 (
FILE
 *
__stream
) 
__wur
;

694 extern void 
	`rewind
 (
FILE
 *
__stream
);

701 #if 
defined
 
__USE_LARGEFILE
 || defined 
__USE_XOPEN2K


702 #ifndef 
__USE_FILE_OFFSET64


707 extern int 
	`fseeko
 (
FILE
 *
__stream
, 
__off_t
 
__off
, int 
__whence
);

712 extern 
__off_t
 
	$ftello
 (
FILE
 *
__stream
) 
__wur
;

714 #ifdef 
__REDIRECT


715 extern int 
	`__REDIRECT
 (
fseeko
,

716 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
),

717 
fseeko64
);

718 extern 
__off64_t
 
	`__REDIRECT
 (
ftello
, (
FILE
 *
__stream
), 
ftello64
);

720 #define 
	#fseeko
 
fseeko64


	)

721 #define 
	#ftello
 
ftello64


	)

726 #ifndef 
__USE_FILE_OFFSET64


731 extern int 
	`fgetpos
 (
FILE
 *
__restrict
 
__stream
, 
fpos_t
 *__restrict 
__pos
);

736 extern int 
	`fsetpos
 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
);

738 #ifdef 
__REDIRECT


739 extern int 
	`__REDIRECT
 (
fgetpos
, (
FILE
 *
__restrict
 
__stream
,

740 
fpos_t
 *
__restrict
 
__pos
), 
fgetpos64
);

741 extern int 
	`__REDIRECT
 (
fsetpos
,

742 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
), 
fsetpos64
);

744 #define 
	#fgetpos
 
fgetpos64


	)

745 #define 
	#fsetpos
 
fsetpos64


	)

749 #ifdef 
__USE_LARGEFILE64


750 extern int 
	`fseeko64
 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
);

751 extern 
__off64_t
 
	$ftello64
 (
FILE
 *
__stream
) 
__wur
;

752 extern int 
	`fgetpos64
 (
FILE
 *
__restrict
 
__stream
, 
fpos64_t
 *__restrict 
__pos
);

753 extern int 
	`fsetpos64
 (
FILE
 *
__stream
, const 
fpos64_t
 *
__pos
);

757 extern void 
	$clearerr
 (
FILE
 *
__stream
) 
__THROW
;

759 extern int 
	$feof
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

761 extern int 
	$ferror
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

763 #ifdef 
__USE_MISC


765 extern void 
	$clearerr_unlocked
 (
FILE
 *
__stream
) 
__THROW
;

766 extern int 
	$feof_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

767 extern int 
	$ferror_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

775 extern void 
	`perror
 (const char *
__s
);

781 #include 
	~<bits/sys_errlist.h
>

784 #ifdef 
__USE_POSIX


786 extern int 
	$fileno
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

789 #ifdef 
__USE_MISC


791 extern int 
	$fileno_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

795 #ifdef 
__USE_POSIX2


800 extern 
FILE
 *
	$popen
 (const char *
__command
, const char *
__modes
) 
__wur
;

806 extern int 
	`pclose
 (
FILE
 *
__stream
);

810 #ifdef 
__USE_POSIX


812 extern char *
	$ctermid
 (char *
__s
) 
__THROW
;

816 #if (
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
) || defined 
__USE_GNU


818 extern char *
	`cuserid
 (char *
__s
);

822 #ifdef 
__USE_GNU


823 struct 
obstack
;

826 extern int 
	$obstack_printf
 (struct 
obstack
 *
__restrict
 
__obstack
,

827 const char *
__restrict
 
__format
, ...)

828 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

829 extern int 
	$obstack_vprintf
 (struct 
obstack
 *
__restrict
 
__obstack
,

830 const char *
__restrict
 
__format
,

831 
__gnuc_va_list
 
__args
)

832 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

836 #ifdef 
__USE_POSIX199506


840 extern void 
	$flockfile
 (
FILE
 *
__stream
) 
__THROW
;

844 extern int 
	$ftrylockfile
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

847 extern void 
	$funlockfile
 (
FILE
 *
__stream
) 
__THROW
;

850 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
 && !defined 
__USE_GNU


853 #include 
	~<bits/getopt_posix.h
>

858 extern int 
	`__uflow
 (
FILE
 *);

859 extern int 
	`__overflow
 (
FILE
 *, int);

863 #ifdef 
__USE_EXTERN_INLINES


864 #include 
	~<bits/stdio.h
>

866 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


867 #include 
	~<bits/stdio2.h
>

869 #ifdef 
__LDBL_COMPAT


870 #include 
	~<bits/stdio-ldbl.h
>

873 
__END_DECLS


	@/usr/include/string.h

22 #ifndef 
_STRING_H


23 #define 
	#_STRING_H
 1

	)

25 #define 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 #include 
	~<bits/libc-header-start.h
>

28 
	g__BEGIN_DECLS


31 #define 
	#__need_size_t


	)

32 #define 
	#__need_NULL


	)

33 #include 
	~<stddef.h
>

36 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (4, 4)

37 #define 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 extern void *
	$memcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

43 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

46 extern void *
	$memmove
 (void *
__dest
, const void *
__src
, 
size_t
 
__n
)

47 
__THROW
 
	`__nonnull
 ((1, 2));

52 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


53 extern void *
	$memccpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

54 int 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__nonnull
 ((1, 2));

60 extern void *
	$memset
 (void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

63 extern int 
	$memcmp
 (const void *
__s1
, const void *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

67 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


70 extern void *
	`memchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

72 extern const void *
	`memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

75 #ifdef 
__OPTIMIZE__


76 
__extern_always_inline
 void *

77 
	`memchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW


79 return 
	`__builtin_memchr
 (
__s
, 
__c
, 
__n
);

82 
__extern_always_inline
 const void *

83 
	`memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW


85 return 
	`__builtin_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 extern void *
	$memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

94 #ifdef 
__USE_GNU


97 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


98 extern "C++" void *
	$rawmemchr
 (void *
__s
, int 
__c
)

99 
__THROW
 
	`__asm
 ("rawmemchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

100 extern "C++" const void *
	$rawmemchr
 (const void *
__s
, int 
__c
)

101 
__THROW
 
	`__asm
 ("rawmemchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

103 extern void *
	$rawmemchr
 (const void *
__s
, int 
__c
)

104 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

108 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


109 extern "C++" void *
	$memrchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

111 extern "C++" const void *
	$memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

114 extern void *
	$memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

121 extern char *
	$strcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

122 
__THROW
 
	`__nonnull
 ((1, 2));

124 extern char *
	$strncpy
 (char *
__restrict
 
__dest
,

125 const char *
__restrict
 
__src
, 
size_t
 
__n
)

126 
__THROW
 
	`__nonnull
 ((1, 2));

129 extern char *
	$strcat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

130 
__THROW
 
	`__nonnull
 ((1, 2));

132 extern char *
	$strncat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

133 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

136 extern int 
	$strcmp
 (const char *
__s1
, const char *
__s2
)

137 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

139 extern int 
	$strncmp
 (const char *
__s1
, const char *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

143 extern int 
	$strcoll
 (const char *
__s1
, const char *
__s2
)

144 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

146 extern 
size_t
 
	$strxfrm
 (char *
__restrict
 
__dest
,

147 const char *
__restrict
 
__src
, 
size_t
 
__n
)

148 
__THROW
 
	`__nonnull
 ((2));

150 #ifdef 
__USE_XOPEN2K8


152 #include 
	~<bits/types/locale_t.h
>

155 extern int 
	$strcoll_l
 (const char *
__s1
, const char *
__s2
, 
locale_t
 
__l
)

156 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 3));

159 extern 
size_t
 
	$strxfrm_l
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
,

160 
locale_t
 
__l
) 
__THROW
 
	`__nonnull
 ((2, 4));

163 #if (
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 extern char *
	$strdup
 (const char *
__s
)

167 
__THROW
 
__attribute_malloc__
 
	`__nonnull
 ((1));

173 #if 
defined
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 extern char *
	$strndup
 (const char *
__string
, 
size_t
 
__n
)

175 
__THROW
 
__attribute_malloc__
 
	`__nonnull
 ((1));

178 #if 
defined
 
__USE_GNU
 && defined 
__GNUC__


180 #define 
	#strdupa
(
s
) \

181 (
__extension__
 \

183 const char *
__old
 = (
s
); \

184 
size_t
 
__len
 = 
	`strlen
 (
__old
) + 1; \

185 char *
__new
 = (char *) 
	`__builtin_alloca
 (
__len
); \

186 (char *) 
	`memcpy
 (
__new
, 
__old
, 
__len
); \

187 
	}
}))

	)

190 #define 
	#strndupa
(
s
, 
n
) \

191 (
__extension__
 \

193 const char *
__old
 = (
s
); \

194 
size_t
 
__len
 = 
	`strnlen
 (
__old
, (
n
)); \

195 char *
__new
 = (char *) 
	`__builtin_alloca
 (
__len
 + 1); \

196 
__new
[
__len
] = '\0'; \

197 (char *) 
	`memcpy
 (
__new
, 
__old
, 
__len
); \

198 }))

	)

202 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


205 extern char *
strchr
 (char *
__s
, int 
__c
)

206 
__THROW
 
__asm
 ("strchr") 
__attribute_pure__
 
__nonnull
 ((1));

207 extern const char *
strchr
 (const char *
__s
, int 
__c
)

208 
__THROW
 
__asm
 ("strchr") 
__attribute_pure__
 
__nonnull
 ((1));

210 #ifdef 
__OPTIMIZE__


211 
__extern_always_inline
 char *

212 
strchr
 (char *
__s
, int 
__c
) 
	g__THROW


214 return 
__builtin_strchr
 (
__s
, 
__c
);

217 
__extern_always_inline
 const char *

218 
strchr
 (const char *
__s
, int 
__c
) 
	g__THROW


220 return 
__builtin_strchr
 (
__s
, 
__c
);

225 extern char *
	$strchr
 (const char *
__s
, int 
__c
)

226 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

229 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


232 extern char *
	`strrchr
 (char *
__s
, int 
__c
)

233 
__THROW
 
	`__asm
 ("strrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

234 extern const char *
	`strrchr
 (const char *
__s
, int 
__c
)

235 
__THROW
 
	`__asm
 ("strrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

237 #ifdef 
__OPTIMIZE__


238 
__extern_always_inline
 char *

239 
	`strrchr
 (char *
__s
, int 
__c
) 
__THROW


241 return 
	`__builtin_strrchr
 (
__s
, 
__c
);

244 
__extern_always_inline
 const char *

245 
	`strrchr
 (const char *
__s
, int 
__c
) 
__THROW


247 return 
	`__builtin_strrchr
 (
__s
, 
__c
);

250 
	}
}

252 extern char *
	$strrchr
 (const char *
__s
, int 
__c
)

253 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

256 #ifdef 
__USE_GNU


259 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


260 extern "C++" char *
	$strchrnul
 (char *
__s
, int 
__c
)

261 
__THROW
 
	`__asm
 ("strchrnul") 
__attribute_pure__
 
	`__nonnull
 ((1));

262 extern "C++" const char *
	$strchrnul
 (const char *
__s
, int 
__c
)

263 
__THROW
 
	`__asm
 ("strchrnul") 
__attribute_pure__
 
	`__nonnull
 ((1));

265 extern char *
	$strchrnul
 (const char *
__s
, int 
__c
)

266 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

272 extern 
size_t
 
	$strcspn
 (const char *
__s
, const char *
__reject
)

273 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

276 extern 
size_t
 
	$strspn
 (const char *
__s
, const char *
__accept
)

277 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

279 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


282 extern char *
	`strpbrk
 (char *
__s
, const char *
__accept
)

283 
__THROW
 
	`__asm
 ("strpbrk") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

284 extern const char *
	`strpbrk
 (const char *
__s
, const char *
__accept
)

285 
__THROW
 
	`__asm
 ("strpbrk") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

287 #ifdef 
__OPTIMIZE__


288 
__extern_always_inline
 char *

289 
	`strpbrk
 (char *
__s
, const char *
__accept
) 
__THROW


291 return 
	`__builtin_strpbrk
 (
__s
, 
__accept
);

294 
__extern_always_inline
 const char *

295 
	`strpbrk
 (const char *
__s
, const char *
__accept
) 
__THROW


297 return 
	`__builtin_strpbrk
 (
__s
, 
__accept
);

300 
	}
}

302 extern char *
	$strpbrk
 (const char *
__s
, const char *
__accept
)

303 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

306 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


309 extern char *
	`strstr
 (char *
__haystack
, const char *
__needle
)

310 
__THROW
 
	`__asm
 ("strstr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

311 extern const char *
	`strstr
 (const char *
__haystack
, const char *
__needle
)

312 
__THROW
 
	`__asm
 ("strstr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

314 #ifdef 
__OPTIMIZE__


315 
__extern_always_inline
 char *

316 
	`strstr
 (char *
__haystack
, const char *
__needle
) 
__THROW


318 return 
	`__builtin_strstr
 (
__haystack
, 
__needle
);

321 
__extern_always_inline
 const char *

322 
	`strstr
 (const char *
__haystack
, const char *
__needle
) 
__THROW


324 return 
	`__builtin_strstr
 (
__haystack
, 
__needle
);

327 
	}
}

329 extern char *
	$strstr
 (const char *
__haystack
, const char *
__needle
)

330 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

335 extern char *
	$strtok
 (char *
__restrict
 
__s
, const char *__restrict 
__delim
)

336 
__THROW
 
	`__nonnull
 ((2));

340 extern char *
	$__strtok_r
 (char *
__restrict
 
__s
,

341 const char *
__restrict
 
__delim
,

342 char **
__restrict
 
__save_ptr
)

343 
__THROW
 
	`__nonnull
 ((2, 3));

344 #ifdef 
__USE_POSIX


345 extern char *
	$strtok_r
 (char *
__restrict
 
__s
, const char *__restrict 
__delim
,

346 char **
__restrict
 
__save_ptr
)

347 
__THROW
 
	`__nonnull
 ((2, 3));

350 #ifdef 
__USE_GNU


352 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


353 extern "C++" char *
	$strcasestr
 (char *
__haystack
, const char *
__needle
)

354 
__THROW
 
	`__asm
 ("strcasestr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

355 extern "C++" const char *
	$strcasestr
 (const char *
__haystack
,

356 const char *
__needle
)

357 
__THROW
 
	`__asm
 ("strcasestr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

359 extern char *
	$strcasestr
 (const char *
__haystack
, const char *
__needle
)

360 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

364 #ifdef 
__USE_GNU


368 extern void *
	$memmem
 (const void *
__haystack
, 
size_t
 
__haystacklen
,

369 const void *
__needle
, 
size_t
 
__needlelen
)

370 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 3));

374 extern void *
	$__mempcpy
 (void *
__restrict
 
__dest
,

375 const void *
__restrict
 
__src
, 
size_t
 
__n
)

376 
__THROW
 
	`__nonnull
 ((1, 2));

377 extern void *
	$mempcpy
 (void *
__restrict
 
__dest
,

378 const void *
__restrict
 
__src
, 
size_t
 
__n
)

379 
__THROW
 
	`__nonnull
 ((1, 2));

384 extern 
size_t
 
	$strlen
 (const char *
__s
)

385 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 extern 
size_t
 
	$strnlen
 (const char *
__string
, 
size_t
 
__maxlen
)

391 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

396 extern char *
	$strerror
 (int 
__errnum
) 
__THROW
;

397 #ifdef 
__USE_XOPEN2K


405 #if 
defined
 
__USE_XOPEN2K
 && !defined 
__USE_GNU


408 #ifdef 
__REDIRECT_NTH


409 extern int 
	`__REDIRECT_NTH
 (
strerror_r
,

410 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
),

411 
__xpg_strerror_r
) 
	`__nonnull
 ((2));

413 extern int 
	$__xpg_strerror_r
 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
)

414 
__THROW
 
	`__nonnull
 ((2));

415 #define 
	#strerror_r
 
__xpg_strerror_r


	)

420 extern char *
	$strerror_r
 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
)

421 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

425 #ifdef 
__USE_XOPEN2K8


427 extern char *
	$strerror_l
 (int 
__errnum
, 
locale_t
 
__l
) 
__THROW
;

430 #ifdef 
__USE_MISC


431 #include 
	~<strings.h
>

435 extern void 
	$explicit_bzero
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

439 extern char *
	$strsep
 (char **
__restrict
 
__stringp
,

440 const char *
__restrict
 
__delim
)

441 
__THROW
 
	`__nonnull
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 extern char *
	$strsignal
 (int 
__sig
) 
__THROW
;

449 extern char *
	$__stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

450 
__THROW
 
	`__nonnull
 ((1, 2));

451 extern char *
	$stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

452 
__THROW
 
	`__nonnull
 ((1, 2));

456 extern char *
	$__stpncpy
 (char *
__restrict
 
__dest
,

457 const char *
__restrict
 
__src
, 
size_t
 
__n
)

458 
__THROW
 
	`__nonnull
 ((1, 2));

459 extern char *
	$stpncpy
 (char *
__restrict
 
__dest
,

460 const char *
__restrict
 
__src
, 
size_t
 
__n
)

461 
__THROW
 
	`__nonnull
 ((1, 2));

464 #ifdef 
__USE_GNU


466 extern int 
	$strverscmp
 (const char *
__s1
, const char *
__s2
)

467 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

470 extern char *
	$strfry
 (char *
__string
) 
__THROW
 
	`__nonnull
 ((1));

473 extern void *
	$memfrob
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

475 #ifndef 
basename


480 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


481 extern "C++" char *
	$basename
 (char *
__filename
)

482 
__THROW
 
	`__asm
 ("basename") 
	`__nonnull
 ((1));

483 extern "C++" const char *
	$basename
 (const char *
__filename
)

484 
__THROW
 
	`__asm
 ("basename") 
	`__nonnull
 ((1));

486 extern char *
	$basename
 (const char *
__filename
) 
__THROW
 
	`__nonnull
 ((1));

491 #if 
	`__GNUC_PREREQ
 (3,4)

492 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


494 #include 
	~<bits/string_fortified.h
>

498 
__END_DECLS


	@/usr/include/sys/socket.h

19 #ifndef 
_SYS_SOCKET_H


20 #define 
	#_SYS_SOCKET_H
 1

	)

22 #include 
	~<features.h
>

24 
	g__BEGIN_DECLS


26 #include 
	~<bits/types/struct_iovec.h
>

27 #define 
	#__need_size_t


	)

28 #include 
	~<stddef.h
>

33 #include 
	~<bits/socket.h
>

35 #ifdef 
__USE_MISC


36 #include 
	~<bits/types/struct_osockaddr.h
>

43 
	mSHUT_RD
 = 0,

44 #define 
	#SHUT_RD
 
SHUT_RD


	)

45 
	mSHUT_WR
,

46 #define 
	#SHUT_WR
 
SHUT_WR


	)

47 
	mSHUT_RDWR


48 #define 
	#SHUT_RDWR
 
SHUT_RDWR


	)

57 #if 
defined
 
__cplusplus
 || !
__GNUC_PREREQ
 (2, 7) || !defined 
__USE_GNU


58 #define 
	#__SOCKADDR_ARG
 struct 
sockaddr
 *
__restrict


	)

59 #define 
	#__CONST_SOCKADDR_ARG
 const struct 
sockaddr
 *

	)

63 #define 
	#__SOCKADDR_ALLTYPES
 \

64 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

65 
	`__SOCKADDR_ONETYPE
 (
sockaddr_at
) \

66 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

67 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

68 
	`__SOCKADDR_ONETYPE
 (
sockaddr_eon
) \

69 
	`__SOCKADDR_ONETYPE
 (
sockaddr_in
) \

70 
	`__SOCKADDR_ONETYPE
 (
sockaddr_in6
) \

71 
	`__SOCKADDR_ONETYPE
 (
sockaddr_inarp
) \

72 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ipx
) \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

78 #define 
	#__SOCKADDR_ONETYPE
(
type
) struct type *
__restrict
 
__
##type##__;

	)

79 typedef union { 
	m__SOCKADDR_ALLTYPES


80 } 
	t__SOCKADDR_ARG
 
	t__attribute__
 ((
	t__transparent_union__
));

81 #undef 
__SOCKADDR_ONETYPE


82 #define 
	#__SOCKADDR_ONETYPE
(
type
) const struct type *
__restrict
 
__
##type##__;

	)

83 typedef union { 
	m__SOCKADDR_ALLTYPES


84 } 
	t__CONST_SOCKADDR_ARG
 
	t__attribute__
 ((
	t__transparent_union__
));

85 #undef 
__SOCKADDR_ONETYPE


88 #ifdef 
__USE_GNU


90 struct 
	smmsghdr


92 struct 
msghdr
 
	mmsg_hdr
;

93 unsigned int 
	mmsg_len
;

102 extern int 
	$socket
 (int 
__domain
, int 
__type
, int 
__protocol
) 
__THROW
;

108 extern int 
	$socketpair
 (int 
__domain
, int 
__type
, int 
__protocol
,

109 int 
__fds
[2]) 
__THROW
;

112 extern int 
	$bind
 (int 
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
socklen_t
 
__len
)

113 
__THROW
;

116 extern int 
	$getsockname
 (int 
__fd
, 
__SOCKADDR_ARG
 
__addr
,

117 
socklen_t
 *
__restrict
 
__len
) 
__THROW
;

126 extern int 
	`connect
 (int 
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
socklen_t
 
__len
);

130 extern int 
	$getpeername
 (int 
__fd
, 
__SOCKADDR_ARG
 
__addr
,

131 
socklen_t
 *
__restrict
 
__len
) 
__THROW
;

138 extern 
ssize_t
 
	`send
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
, int 
__flags
);

145 extern 
ssize_t
 
	`recv
 (int 
__fd
, void *
__buf
, 
size_t
 
__n
, int 
__flags
);

152 extern 
ssize_t
 
	`sendto
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
,

153 int 
__flags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

154 
socklen_t
 
__addr_len
);

163 extern 
ssize_t
 
	`recvfrom
 (int 
__fd
, void *
__restrict
 
__buf
, 
size_t
 
__n
,

164 int 
__flags
, 
__SOCKADDR_ARG
 
__addr
,

165 
socklen_t
 *
__restrict
 
__addr_len
);

173 extern 
ssize_t
 
	`sendmsg
 (int 
__fd
, const struct 
msghdr
 *
__message
,

174 int 
__flags
);

176 #ifdef 
__USE_GNU


182 extern int 
	`sendmmsg
 (int 
__fd
, struct 
mmsghdr
 *
__vmessages
,

183 unsigned int 
__vlen
, int 
__flags
);

191 extern 
ssize_t
 
	`recvmsg
 (int 
__fd
, struct 
msghdr
 *
__message
, int 
__flags
);

193 #ifdef 
__USE_GNU


199 extern int 
	`recvmmsg
 (int 
__fd
, struct 
mmsghdr
 *
__vmessages
,

200 unsigned int 
__vlen
, int 
__flags
,

201 struct 
timespec
 *
__tmo
);

208 extern int 
	$getsockopt
 (int 
__fd
, int 
__level
, int 
__optname
,

209 void *
__restrict
 
__optval
,

210 
socklen_t
 *
__restrict
 
__optlen
) 
__THROW
;

215 extern int 
	$setsockopt
 (int 
__fd
, int 
__level
, int 
__optname
,

216 const void *
__optval
, 
socklen_t
 
__optlen
) 
__THROW
;

222 extern int 
	$listen
 (int 
__fd
, int 
__n
) 
__THROW
;

232 extern int 
	`accept
 (int 
__fd
, 
__SOCKADDR_ARG
 
__addr
,

233 
socklen_t
 *
__restrict
 
__addr_len
);

235 #ifdef 
__USE_GNU


240 extern int 
	`accept4
 (int 
__fd
, 
__SOCKADDR_ARG
 
__addr
,

241 
socklen_t
 *
__restrict
 
__addr_len
, int 
__flags
);

250 extern int 
	$shutdown
 (int 
__fd
, int 
__how
) 
__THROW
;

253 #ifdef 
__USE_XOPEN2K


255 extern int 
	$sockatmark
 (int 
__fd
) 
__THROW
;

259 #ifdef 
__USE_MISC


263 extern int 
	$isfdtype
 (int 
__fd
, int 
__fdtype
) 
__THROW
;

268 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


269 #include 
	~<bits/socket2.h
>

272 
__END_DECLS


	@/usr/include/sys/types.h

22 #ifndef 
_SYS_TYPES_H


23 #define 
	#_SYS_TYPES_H
 1

	)

25 #include 
	~<features.h
>

27 
	g__BEGIN_DECLS


29 #include 
	~<bits/types.h
>

31 #ifdef 
__USE_MISC


32 #ifndef 
__u_char_defined


33 typedef 
__u_char
 
	tu_char
;

34 typedef 
__u_short
 
	tu_short
;

35 typedef 
__u_int
 
	tu_int
;

36 typedef 
__u_long
 
	tu_long
;

37 typedef 
__quad_t
 
	tquad_t
;

38 typedef 
__u_quad_t
 
	tu_quad_t
;

39 typedef 
__fsid_t
 
	tfsid_t
;

40 #define 
	#__u_char_defined


	)

42 typedef 
__loff_t
 
	tloff_t
;

45 #ifndef 
__ino_t_defined


46 #ifndef 
__USE_FILE_OFFSET64


47 typedef 
__ino_t
 
	tino_t
;

49 typedef 
__ino64_t
 
	tino_t
;

51 #define 
	#__ino_t_defined


	)

53 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__ino64_t_defined


54 typedef 
__ino64_t
 
	tino64_t
;

55 #define 
	#__ino64_t_defined


	)

58 #ifndef 
__dev_t_defined


59 typedef 
__dev_t
 
	tdev_t
;

60 #define 
	#__dev_t_defined


	)

63 #ifndef 
__gid_t_defined


64 typedef 
__gid_t
 
	tgid_t
;

65 #define 
	#__gid_t_defined


	)

68 #ifndef 
__mode_t_defined


69 typedef 
__mode_t
 
	tmode_t
;

70 #define 
	#__mode_t_defined


	)

73 #ifndef 
__nlink_t_defined


74 typedef 
__nlink_t
 
	tnlink_t
;

75 #define 
	#__nlink_t_defined


	)

78 #ifndef 
__uid_t_defined


79 typedef 
__uid_t
 
	tuid_t
;

80 #define 
	#__uid_t_defined


	)

83 #ifndef 
__off_t_defined


84 #ifndef 
__USE_FILE_OFFSET64


85 typedef 
__off_t
 
	toff_t
;

87 typedef 
__off64_t
 
	toff_t
;

89 #define 
	#__off_t_defined


	)

91 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


92 typedef 
__off64_t
 
	toff64_t
;

93 #define 
	#__off64_t_defined


	)

96 #ifndef 
__pid_t_defined


97 typedef 
__pid_t
 
	tpid_t
;

98 #define 
	#__pid_t_defined


	)

101 #if (
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8
) \

102 && !
defined
 
__id_t_defined


103 typedef 
__id_t
 
	tid_t
;

104 #define 
	#__id_t_defined


	)

107 #ifndef 
__ssize_t_defined


108 typedef 
__ssize_t
 
	tssize_t
;

109 #define 
	#__ssize_t_defined


	)

112 #ifdef 
__USE_MISC


113 #ifndef 
__daddr_t_defined


114 typedef 
__daddr_t
 
	tdaddr_t
;

115 typedef 
__caddr_t
 
	tcaddr_t
;

116 #define 
	#__daddr_t_defined


	)

120 #if (
defined
 
__USE_MISC
 || defined 
__USE_XOPEN
) && !defined 
__key_t_defined


121 typedef 
__key_t
 
	tkey_t
;

122 #define 
	#__key_t_defined


	)

125 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


126 #include 
	~<bits/types/clock_t.h
>

128 #include 
	~<bits/types/clockid_t.h
>

129 #include 
	~<bits/types/time_t.h
>

130 #include 
	~<bits/types/timer_t.h
>

132 #ifdef 
__USE_XOPEN


133 #ifndef 
__useconds_t_defined


134 typedef 
__useconds_t
 
	tuseconds_t
;

135 #define 
	#__useconds_t_defined


	)

137 #ifndef 
__suseconds_t_defined


138 typedef 
__suseconds_t
 
	tsuseconds_t
;

139 #define 
	#__suseconds_t_defined


	)

143 #define 
	#__need_size_t


	)

144 #include 
	~<stddef.h
>

146 #ifdef 
__USE_MISC


148 typedef unsigned long int 
	tulong
;

149 typedef unsigned short int 
	tushort
;

150 typedef unsigned int 
	tuint
;

155 #include 
	~<bits/stdint-intn.h
>

158 typedef 
__uint8_t
 
	tu_int8_t
;

159 typedef 
__uint16_t
 
	tu_int16_t
;

160 typedef 
__uint32_t
 
	tu_int32_t
;

161 typedef 
__uint64_t
 
	tu_int64_t
;

163 #if 
__GNUC_PREREQ
 (2, 7)

164 typedef int 
	tregister_t
 
	t__attribute__
 ((
	t__mode__
 (
	t__word__
)));

166 typedef int 
	tregister_t
;

171 #define 
	#__BIT_TYPES_DEFINED__
 1

	)

174 #ifdef 
__USE_MISC


176 #include 
	~<endian.h
>

179 #include 
	~<sys/select.h
>

183 #if (
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8
) \

184 && !
defined
 
__blksize_t_defined


185 typedef 
__blksize_t
 
	tblksize_t
;

186 #define 
	#__blksize_t_defined


	)

190 #ifndef 
__USE_FILE_OFFSET64


191 #ifndef 
__blkcnt_t_defined


192 typedef 
__blkcnt_t
 
	tblkcnt_t
;

193 #define 
	#__blkcnt_t_defined


	)

195 #ifndef 
__fsblkcnt_t_defined


196 typedef 
__fsblkcnt_t
 
	tfsblkcnt_t
;

197 #define 
	#__fsblkcnt_t_defined


	)

199 #ifndef 
__fsfilcnt_t_defined


200 typedef 
__fsfilcnt_t
 
	tfsfilcnt_t
;

201 #define 
	#__fsfilcnt_t_defined


	)

204 #ifndef 
__blkcnt_t_defined


205 typedef 
__blkcnt64_t
 
	tblkcnt_t
;

206 #define 
	#__blkcnt_t_defined


	)

208 #ifndef 
__fsblkcnt_t_defined


209 typedef 
__fsblkcnt64_t
 
	tfsblkcnt_t
;

210 #define 
	#__fsblkcnt_t_defined


	)

212 #ifndef 
__fsfilcnt_t_defined


213 typedef 
__fsfilcnt64_t
 
	tfsfilcnt_t
;

214 #define 
	#__fsfilcnt_t_defined


	)

218 #ifdef 
__USE_LARGEFILE64


219 typedef 
__blkcnt64_t
 
	tblkcnt64_t
;

220 typedef 
__fsblkcnt64_t
 
	tfsblkcnt64_t
;

221 typedef 
__fsfilcnt64_t
 
	tfsfilcnt64_t
;

226 #if 
defined
 
__USE_POSIX199506
 || defined 
__USE_UNIX98


227 #include 
	~<bits/pthreadtypes.h
>

230 
	g__END_DECLS


	@/usr/include/bits/byteswap.h

19 #if !
defined
 
_BYTESWAP_H
 && !defined 
_NETINET_IN_H
 && !defined 
_ENDIAN_H


23 #ifndef 
_BITS_BYTESWAP_H


24 #define 
	#_BITS_BYTESWAP_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/types.h
>

30 #define 
	#__bswap_constant_16
(
x
) \

31 ((
__uint16_t
) ((((
x
) >> 8) & 0xff) | (((x) & 0xff) << 8)))

	)

33 static 
__inline
 
__uint16_t


34 
	$__bswap_16
 (
__uint16_t
 
__bsx
)

36 #if 
	`__GNUC_PREREQ
 (4, 8)

37 return 
	`__builtin_bswap16
 (
__bsx
);

39 return 
	`__bswap_constant_16
 (
__bsx
);

41 
	}
}

44 #define 
	#__bswap_constant_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
) & 0x0000ff00u) << 8) | (((x) & 0x000000ffu) << 24))

	)

48 static 
__inline
 
__uint32_t


49 
	$__bswap_32
 (
__uint32_t
 
__bsx
)

51 #if 
	`__GNUC_PREREQ
 (4, 3)

52 return 
	`__builtin_bswap32
 (
__bsx
);

54 return 
	`__bswap_constant_32
 (
__bsx
);

56 
	}
}

59 #define 
	#__bswap_constant_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
) & 0x00000000000000ffull) << 56))

	)

69 
__extension__
 static 
__inline
 
__uint64_t


70 
	$__bswap_64
 (
__uint64_t
 
__bsx
)

72 #if 
	`__GNUC_PREREQ
 (4, 3)

73 return 
	`__builtin_bswap64
 (
__bsx
);

75 return 
	`__bswap_constant_64
 (
__bsx
);

77 
	}
}

	@/usr/include/bits/getopt_posix.h

20 #ifndef 
_GETOPT_POSIX_H


21 #define 
	#_GETOPT_POSIX_H
 1

	)

23 #if !
defined
 
_UNISTD_H
 && !defined 
_STDIO_H


27 #include 
	~<bits/getopt_core.h
>

29 
	g__BEGIN_DECLS


31 #if 
defined
 
__USE_POSIX2
 && !defined 
__USE_POSIX_IMPLICITLY
 \

32 && !
defined
 
	g__USE_GNU
 && !defined 
	g_GETOPT_H


37 #ifdef 
__REDIRECT


38 extern int 
__REDIRECT_NTH
 (
getopt
, (int 
___argc
, char *const *
___argv
,

39 const char *
__shortopts
),

40 
__posix_getopt
);

42 extern int 
	$__posix_getopt
 (int 
___argc
, char *const *
___argv
,

43 const char *
__shortopts
)

44 
__THROW
 
	`__nonnull
 ((2, 3));

45 #define 
	#getopt
 
__posix_getopt


	)

49 
__END_DECLS


	@/usr/include/bits/in.h

20 #ifndef 
_NETINET_IN_H


32 #if 
defined
 
_UAPI_LINUX_IN6_H
 \

33 || 
defined
 
	g_UAPI_IPV6_H
 \

34 || 
defined
 
	g_LINUX_IN6_H
 \

35 || 
defined
 
	g_IPV6_H


39 #define 
	#__USE_KERNEL_IPV6_DEFS
 1

	)

41 #define 
	#__USE_KERNEL_IPV6_DEFS
 0

	)

47 #define 
	#IP_OPTIONS
 4

	)

48 #define 
	#IP_HDRINCL
 3

	)

49 #define 
	#IP_TOS
 1

	)

50 #define 
	#IP_TTL
 2

	)

51 #define 
	#IP_RECVOPTS
 6

	)

53 #define 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

54 #define 
	#IP_RETOPTS
 7

	)

55 #define 
	#IP_MULTICAST_IF
 32

	)

56 #define 
	#IP_MULTICAST_TTL
 33

	)

57 #define 
	#IP_MULTICAST_LOOP
 34

	)

58 #define 
	#IP_ADD_MEMBERSHIP
 35

	)

59 #define 
	#IP_DROP_MEMBERSHIP
 36

	)

60 #define 
	#IP_UNBLOCK_SOURCE
 37

	)

61 #define 
	#IP_BLOCK_SOURCE
 38

	)

62 #define 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

63 #define 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

64 #define 
	#IP_MSFILTER
 41

	)

65 #ifdef 
__USE_MISC


66 #define 
	#MCAST_JOIN_GROUP
 42

	)

67 #define 
	#MCAST_BLOCK_SOURCE
 43

	)

68 #define 
	#MCAST_UNBLOCK_SOURCE
 44

	)

69 #define 
	#MCAST_LEAVE_GROUP
 45

	)

70 #define 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

71 #define 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

72 #define 
	#MCAST_MSFILTER
 48

	)

73 #define 
	#IP_MULTICAST_ALL
 49

	)

74 #define 
	#IP_UNICAST_IF
 50

	)

76 #define 
	#MCAST_EXCLUDE
 0

	)

77 #define 
	#MCAST_INCLUDE
 1

	)

80 #define 
	#IP_ROUTER_ALERT
 5

	)

81 #define 
	#IP_PKTINFO
 8

	)

82 #define 
	#IP_PKTOPTIONS
 9

	)

83 #define 
	#IP_PMTUDISC
 10

	)

84 #define 
	#IP_MTU_DISCOVER
 10

	)

85 #define 
	#IP_RECVERR
 11

	)

86 #define 
	#IP_RECVTTL
 12

	)

87 #define 
	#IP_RECVTOS
 13

	)

88 #define 
	#IP_MTU
 14

	)

89 #define 
	#IP_FREEBIND
 15

	)

90 #define 
	#IP_IPSEC_POLICY
 16

	)

91 #define 
	#IP_XFRM_POLICY
 17

	)

92 #define 
	#IP_PASSSEC
 18

	)

93 #define 
	#IP_TRANSPARENT
 19

	)

94 #define 
	#IP_MULTICAST_ALL
 49

	)

97 #define 
	#IP_ORIGDSTADDR
 20

	)

98 #define 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

100 #define 
	#IP_MINTTL
 21

	)

101 #define 
	#IP_NODEFRAG
 22

	)

102 #define 
	#IP_CHECKSUM
 23

	)

103 #define 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

104 #define 
	#IP_RECVFRAGSIZE
 25

	)

107 #define 
	#IP_PMTUDISC_DONT
 0

	)

108 #define 
	#IP_PMTUDISC_WANT
 1

	)

109 #define 
	#IP_PMTUDISC_DO
 2

	)

110 #define 
	#IP_PMTUDISC_PROBE
 3

	)

114 #define 
	#IP_PMTUDISC_INTERFACE
 4

	)

116 #define 
	#IP_PMTUDISC_OMIT
 5

	)

118 #define 
	#IP_MULTICAST_IF
 32

	)

119 #define 
	#IP_MULTICAST_TTL
 33

	)

120 #define 
	#IP_MULTICAST_LOOP
 34

	)

121 #define 
	#IP_ADD_MEMBERSHIP
 35

	)

122 #define 
	#IP_DROP_MEMBERSHIP
 36

	)

123 #define 
	#IP_UNBLOCK_SOURCE
 37

	)

124 #define 
	#IP_BLOCK_SOURCE
 38

	)

125 #define 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

126 #define 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

127 #define 
	#IP_MSFILTER
 41

	)

128 #define 
	#IP_MULTICAST_ALL
 49

	)

129 #define 
	#IP_UNICAST_IF
 50

	)

132 #define 
	#SOL_IP
 0

	)

134 #define 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

135 #define 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

136 #define 
	#IP_MAX_MEMBERSHIPS
 20

	)

138 #ifdef 
__USE_MISC


142 struct 
	sip_opts


144 struct 
in_addr
 
	mip_dst
;

145 char 
	mip_opts
[40];

149 struct 
	sip_mreqn


151 struct 
in_addr
 
	mimr_multiaddr
;

152 struct 
in_addr
 
	mimr_address
;

153 int 
	mimr_ifindex
;

157 struct 
	sin_pktinfo


159 int 
	mipi_ifindex
;

160 struct 
in_addr
 
	mipi_spec_dst
;

161 struct 
in_addr
 
	mipi_addr
;

168 #define 
	#IPV6_ADDRFORM
 1

	)

169 #define 
	#IPV6_2292PKTINFO
 2

	)

170 #define 
	#IPV6_2292HOPOPTS
 3

	)

171 #define 
	#IPV6_2292DSTOPTS
 4

	)

172 #define 
	#IPV6_2292RTHDR
 5

	)

173 #define 
	#IPV6_2292PKTOPTIONS
 6

	)

174 #define 
	#IPV6_CHECKSUM
 7

	)

175 #define 
	#IPV6_2292HOPLIMIT
 8

	)

177 #define 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

179 #define 
	#IPV6_NEXTHOP
 9

	)

180 #define 
	#IPV6_AUTHHDR
 10

	)

181 #define 
	#IPV6_UNICAST_HOPS
 16

	)

182 #define 
	#IPV6_MULTICAST_IF
 17

	)

183 #define 
	#IPV6_MULTICAST_HOPS
 18

	)

184 #define 
	#IPV6_MULTICAST_LOOP
 19

	)

185 #define 
	#IPV6_JOIN_GROUP
 20

	)

186 #define 
	#IPV6_LEAVE_GROUP
 21

	)

187 #define 
	#IPV6_ROUTER_ALERT
 22

	)

188 #define 
	#IPV6_MTU_DISCOVER
 23

	)

189 #define 
	#IPV6_MTU
 24

	)

190 #define 
	#IPV6_RECVERR
 25

	)

191 #define 
	#IPV6_V6ONLY
 26

	)

192 #define 
	#IPV6_JOIN_ANYCAST
 27

	)

193 #define 
	#IPV6_LEAVE_ANYCAST
 28

	)

194 #define 
	#IPV6_MULTICAST_ALL
 29

	)

195 #define 
	#IPV6_IPSEC_POLICY
 34

	)

196 #define 
	#IPV6_XFRM_POLICY
 35

	)

197 #define 
	#IPV6_HDRINCL
 36

	)

200 #define 
	#IPV6_RECVPKTINFO
 49

	)

201 #define 
	#IPV6_PKTINFO
 50

	)

202 #define 
	#IPV6_RECVHOPLIMIT
 51

	)

203 #define 
	#IPV6_HOPLIMIT
 52

	)

204 #define 
	#IPV6_RECVHOPOPTS
 53

	)

205 #define 
	#IPV6_HOPOPTS
 54

	)

206 #define 
	#IPV6_RTHDRDSTOPTS
 55

	)

207 #define 
	#IPV6_RECVRTHDR
 56

	)

208 #define 
	#IPV6_RTHDR
 57

	)

209 #define 
	#IPV6_RECVDSTOPTS
 58

	)

210 #define 
	#IPV6_DSTOPTS
 59

	)

211 #define 
	#IPV6_RECVPATHMTU
 60

	)

212 #define 
	#IPV6_PATHMTU
 61

	)

213 #define 
	#IPV6_DONTFRAG
 62

	)

216 #define 
	#IPV6_RECVTCLASS
 66

	)

217 #define 
	#IPV6_TCLASS
 67

	)

219 #define 
	#IPV6_AUTOFLOWLABEL
 70

	)

222 #define 
	#IPV6_ADDR_PREFERENCES
 72

	)

225 #define 
	#IPV6_MINHOPCOUNT
 73

	)

227 #define 
	#IPV6_ORIGDSTADDR
 74

	)

228 #define 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

229 #define 
	#IPV6_TRANSPARENT
 75

	)

230 #define 
	#IPV6_UNICAST_IF
 76

	)

231 #define 
	#IPV6_RECVFRAGSIZE
 77

	)

232 #define 
	#IPV6_FREEBIND
 78

	)

235 #if !
__USE_KERNEL_IPV6_DEFS


236 #define 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

237 #define 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

239 #define 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

240 #define 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

243 #define 
	#IPV6_PMTUDISC_DONT
 0

	)

244 #define 
	#IPV6_PMTUDISC_WANT
 1

	)

245 #define 
	#IPV6_PMTUDISC_DO
 2

	)

246 #define 
	#IPV6_PMTUDISC_PROBE
 3

	)

247 #define 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

248 #define 
	#IPV6_PMTUDISC_OMIT
 5

	)

251 #define 
	#SOL_IPV6
 41

	)

252 #define 
	#SOL_ICMPV6
 58

	)

255 #define 
	#IPV6_RTHDR_LOOSE
 0

	)

256 #define 
	#IPV6_RTHDR_STRICT
 1

	)

258 #define 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/libc-header-start.h

27 #ifndef 
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #undef 
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 #include 
	~<features.h
>

37 #undef 
__GLIBC_USE_LIB_EXT2


38 #if (
defined
 
__USE_GNU
 \

39 || (
defined
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 #define 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 #define 
	#__GLIBC_USE_LIB_EXT2
 0

	)

47 #undef 
__GLIBC_USE_IEC_60559_BFP_EXT


48 #if 
defined
 
__USE_GNU
 || defined 
__STDC_WANT_IEC_60559_BFP_EXT__


49 #define 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

51 #define 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

56 #undef 
__GLIBC_USE_IEC_60559_FUNCS_EXT


57 #if 
defined
 
__USE_GNU
 || defined 
__STDC_WANT_IEC_60559_FUNCS_EXT__


58 #define 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

60 #define 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

65 #undef 
__GLIBC_USE_IEC_60559_TYPES_EXT


66 #if 
defined
 
__USE_GNU
 || defined 
__STDC_WANT_IEC_60559_TYPES_EXT__


67 #define 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

69 #define 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/netdb.h

18 #ifndef 
_NETDB_H


26 struct 
	snetent


28 char *
	mn_name
;

29 char **
	mn_aliases
;

30 int 
	mn_addrtype
;

31 
uint32_t
 
	mn_net
;

	@/usr/include/bits/pthreadtypes.h

19 #ifndef 
_BITS_PTHREADTYPES_COMMON_H


20 #define 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 #include 
	~<bits/thread-shared-types.h
>

27 typedef unsigned long int 
	tpthread_t
;

34 char 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 int 
	m__align
;

36 } 
	tpthread_mutexattr_t
;

43 char 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 int 
	m__align
;

45 } 
	tpthread_condattr_t
;

49 typedef unsigned int 
	tpthread_key_t
;

53 typedef int 
	t__ONCE_ALIGNMENT
 
	tpthread_once_t
;

56 union 
	upthread_attr_t


58 char 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 long int 
	m__align
;

61 #ifndef 
__have_pthread_attr_t


62 typedef union 
pthread_attr_t
 
	tpthread_attr_t
;

63 #define 
	#__have_pthread_attr_t
 1

	)

69 struct 
__pthread_mutex_s
 
	m__data
;

70 char 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 long int 
	m__align
;

72 } 
	tpthread_mutex_t
;

77 struct 
__pthread_cond_s
 
	m__data
;

78 char 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__extension__
 long long int 
	m__align
;

80 } 
	tpthread_cond_t
;

83 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


88 struct 
__pthread_rwlock_arch_t
 
	m__data
;

89 char 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 long int 
	m__align
;

91 } 
	tpthread_rwlock_t
;

95 char 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 long int 
	m__align
;

97 } 
	tpthread_rwlockattr_t
;

101 #ifdef 
__USE_XOPEN2K


103 typedef volatile int 
	tpthread_spinlock_t
;

110 char 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 long int 
	m__align
;

112 } 
	tpthread_barrier_t
;

116 char 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 int 
	m__align
;

118 } 
	tpthread_barrierattr_t
;

	@/usr/include/bits/socket.h

19 #ifndef 
__BITS_SOCKET_H


20 #define 
	#__BITS_SOCKET_H


	)

22 #ifndef 
_SYS_SOCKET_H


26 #define 
	#__need_size_t


	)

27 #include 
	~<stddef.h
>

29 #include 
	~<sys/types.h
>

32 #ifndef 
__socklen_t_defined


33 typedef 
__socklen_t
 
	tsocklen_t
;

34 #define 
	#__socklen_t_defined


	)

38 #include 
	~<bits/socket_type.h
>

41 #define 
	#PF_UNSPEC
 0

	)

42 #define 
	#PF_LOCAL
 1

	)

43 #define 
	#PF_UNIX
 
PF_LOCAL


	)

44 #define 
	#PF_FILE
 
PF_LOCAL


	)

45 #define 
	#PF_INET
 2

	)

46 #define 
	#PF_AX25
 3

	)

47 #define 
	#PF_IPX
 4

	)

48 #define 
	#PF_APPLETALK
 5

	)

49 #define 
	#PF_NETROM
 6

	)

50 #define 
	#PF_BRIDGE
 7

	)

51 #define 
	#PF_ATMPVC
 8

	)

52 #define 
	#PF_X25
 9

	)

53 #define 
	#PF_INET6
 10

	)

54 #define 
	#PF_ROSE
 11

	)

55 #define 
	#PF_DECnet
 12

	)

56 #define 
	#PF_NETBEUI
 13

	)

57 #define 
	#PF_SECURITY
 14

	)

58 #define 
	#PF_KEY
 15

	)

59 #define 
	#PF_NETLINK
 16

	)

60 #define 
	#PF_ROUTE
 
PF_NETLINK


	)

61 #define 
	#PF_PACKET
 17

	)

62 #define 
	#PF_ASH
 18

	)

63 #define 
	#PF_ECONET
 19

	)

64 #define 
	#PF_ATMSVC
 20

	)

65 #define 
	#PF_RDS
 21

	)

66 #define 
	#PF_SNA
 22

	)

67 #define 
	#PF_IRDA
 23

	)

68 #define 
	#PF_PPPOX
 24

	)

69 #define 
	#PF_WANPIPE
 25

	)

70 #define 
	#PF_LLC
 26

	)

71 #define 
	#PF_IB
 27

	)

72 #define 
	#PF_MPLS
 28

	)

73 #define 
	#PF_CAN
 29

	)

74 #define 
	#PF_TIPC
 30

	)

75 #define 
	#PF_BLUETOOTH
 31

	)

76 #define 
	#PF_IUCV
 32

	)

77 #define 
	#PF_RXRPC
 33

	)

78 #define 
	#PF_ISDN
 34

	)

79 #define 
	#PF_PHONET
 35

	)

80 #define 
	#PF_IEEE802154
 36

	)

81 #define 
	#PF_CAIF
 37

	)

82 #define 
	#PF_ALG
 38

	)

83 #define 
	#PF_NFC
 39

	)

84 #define 
	#PF_VSOCK
 40

	)

85 #define 
	#PF_KCM
 41

	)

86 #define 
	#PF_QIPCRTR
 42

	)

87 #define 
	#PF_SMC
 43

	)

88 #define 
	#PF_XDP
 44

	)

89 #define 
	#PF_MAX
 45

	)

92 #define 
	#AF_UNSPEC
 
PF_UNSPEC


	)

93 #define 
	#AF_LOCAL
 
PF_LOCAL


	)

94 #define 
	#AF_UNIX
 
PF_UNIX


	)

95 #define 
	#AF_FILE
 
PF_FILE


	)

96 #define 
	#AF_INET
 
PF_INET


	)

97 #define 
	#AF_AX25
 
PF_AX25


	)

98 #define 
	#AF_IPX
 
PF_IPX


	)

99 #define 
	#AF_APPLETALK
 
PF_APPLETALK


	)

100 #define 
	#AF_NETROM
 
PF_NETROM


	)

101 #define 
	#AF_BRIDGE
 
PF_BRIDGE


	)

102 #define 
	#AF_ATMPVC
 
PF_ATMPVC


	)

103 #define 
	#AF_X25
 
PF_X25


	)

104 #define 
	#AF_INET6
 
PF_INET6


	)

105 #define 
	#AF_ROSE
 
PF_ROSE


	)

106 #define 
	#AF_DECnet
 
PF_DECnet


	)

107 #define 
	#AF_NETBEUI
 
PF_NETBEUI


	)

108 #define 
	#AF_SECURITY
 
PF_SECURITY


	)

109 #define 
	#AF_KEY
 
PF_KEY


	)

110 #define 
	#AF_NETLINK
 
PF_NETLINK


	)

111 #define 
	#AF_ROUTE
 
PF_ROUTE


	)

112 #define 
	#AF_PACKET
 
PF_PACKET


	)

113 #define 
	#AF_ASH
 
PF_ASH


	)

114 #define 
	#AF_ECONET
 
PF_ECONET


	)

115 #define 
	#AF_ATMSVC
 
PF_ATMSVC


	)

116 #define 
	#AF_RDS
 
PF_RDS


	)

117 #define 
	#AF_SNA
 
PF_SNA


	)

118 #define 
	#AF_IRDA
 
PF_IRDA


	)

119 #define 
	#AF_PPPOX
 
PF_PPPOX


	)

120 #define 
	#AF_WANPIPE
 
PF_WANPIPE


	)

121 #define 
	#AF_LLC
 
PF_LLC


	)

122 #define 
	#AF_IB
 
PF_IB


	)

123 #define 
	#AF_MPLS
 
PF_MPLS


	)

124 #define 
	#AF_CAN
 
PF_CAN


	)

125 #define 
	#AF_TIPC
 
PF_TIPC


	)

126 #define 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

127 #define 
	#AF_IUCV
 
PF_IUCV


	)

128 #define 
	#AF_RXRPC
 
PF_RXRPC


	)

129 #define 
	#AF_ISDN
 
PF_ISDN


	)

130 #define 
	#AF_PHONET
 
PF_PHONET


	)

131 #define 
	#AF_IEEE802154
 
PF_IEEE802154


	)

132 #define 
	#AF_CAIF
 
PF_CAIF


	)

133 #define 
	#AF_ALG
 
PF_ALG


	)

134 #define 
	#AF_NFC
 
PF_NFC


	)

135 #define 
	#AF_VSOCK
 
PF_VSOCK


	)

136 #define 
	#AF_KCM
 
PF_KCM


	)

137 #define 
	#AF_QIPCRTR
 
PF_QIPCRTR


	)

138 #define 
	#AF_SMC
 
PF_SMC


	)

139 #define 
	#AF_XDP
 
PF_XDP


	)

140 #define 
	#AF_MAX
 
PF_MAX


	)

146 #define 
	#SOL_RAW
 255

	)

147 #define 
	#SOL_DECNET
 261

	)

148 #define 
	#SOL_X25
 262

	)

149 #define 
	#SOL_PACKET
 263

	)

150 #define 
	#SOL_ATM
 264

	)

151 #define 
	#SOL_AAL
 265

	)

152 #define 
	#SOL_IRDA
 266

	)

153 #define 
	#SOL_NETBEUI
 267

	)

154 #define 
	#SOL_LLC
 268

	)

155 #define 
	#SOL_DCCP
 269

	)

156 #define 
	#SOL_NETLINK
 270

	)

157 #define 
	#SOL_TIPC
 271

	)

158 #define 
	#SOL_RXRPC
 272

	)

159 #define 
	#SOL_PPPOL2TP
 273

	)

160 #define 
	#SOL_BLUETOOTH
 274

	)

161 #define 
	#SOL_PNPIPE
 275

	)

162 #define 
	#SOL_RDS
 276

	)

163 #define 
	#SOL_IUCV
 277

	)

164 #define 
	#SOL_CAIF
 278

	)

165 #define 
	#SOL_ALG
 279

	)

166 #define 
	#SOL_NFC
 280

	)

167 #define 
	#SOL_KCM
 281

	)

168 #define 
	#SOL_TLS
 282

	)

169 #define 
	#SOL_XDP
 283

	)

172 #define 
	#SOMAXCONN
 128

	)

175 #include 
	~<bits/sockaddr.h
>

178 struct 
	ssockaddr


180 
__SOCKADDR_COMMON
 (
sa_
);

181 char 
	msa_data
[14];

187 #define 
	#__ss_aligntype
 unsigned long int

	)

188 #define 
	#_SS_PADSIZE
 \

189 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 - sizeof (
__ss_aligntype
))

	)

191 struct 
	ssockaddr_storage


193 
__SOCKADDR_COMMON
 (
ss_
);

194 char 
	m__ss_padding
[
_SS_PADSIZE
];

195 
__ss_aligntype
 
	m__ss_align
;

202 
	mMSG_OOB
 = 0x01,

203 #define 
	#MSG_OOB
 
MSG_OOB


	)

204 
	mMSG_PEEK
 = 0x02,

205 #define 
	#MSG_PEEK
 
MSG_PEEK


	)

206 
	mMSG_DONTROUTE
 = 0x04,

207 #define 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

208 #ifdef 
__USE_GNU


210 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

211 #define 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

213 
	mMSG_CTRUNC
 = 0x08,

214 #define 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

215 
	mMSG_PROXY
 = 0x10,

216 #define 
	#MSG_PROXY
 
MSG_PROXY


	)

217 
	mMSG_TRUNC
 = 0x20,

218 #define 
	#MSG_TRUNC
 
MSG_TRUNC


	)

219 
	mMSG_DONTWAIT
 = 0x40,

220 #define 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

221 
	mMSG_EOR
 = 0x80,

222 #define 
	#MSG_EOR
 
MSG_EOR


	)

223 
	mMSG_WAITALL
 = 0x100,

224 #define 
	#MSG_WAITALL
 
MSG_WAITALL


	)

225 
	mMSG_FIN
 = 0x200,

226 #define 
	#MSG_FIN
 
MSG_FIN


	)

227 
	mMSG_SYN
 = 0x400,

228 #define 
	#MSG_SYN
 
MSG_SYN


	)

229 
	mMSG_CONFIRM
 = 0x800,

230 #define 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

231 
	mMSG_RST
 = 0x1000,

232 #define 
	#MSG_RST
 
MSG_RST


	)

233 
	mMSG_ERRQUEUE
 = 0x2000,

234 #define 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

235 
	mMSG_NOSIGNAL
 = 0x4000,

236 #define 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

237 
	mMSG_MORE
 = 0x8000,

238 #define 
	#MSG_MORE
 
MSG_MORE


	)

239 
	mMSG_WAITFORONE
 = 0x10000,

240 #define 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

241 
	mMSG_BATCH
 = 0x40000,

242 #define 
	#MSG_BATCH
 
MSG_BATCH


	)

243 
	mMSG_ZEROCOPY
 = 0x4000000,

244 #define 
	#MSG_ZEROCOPY
 
MSG_ZEROCOPY


	)

245 
	mMSG_FASTOPEN
 = 0x20000000,

246 #define 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

248 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

251 #define 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

257 struct 
	smsghdr


259 void *
	mmsg_name
;

260 
socklen_t
 
	mmsg_namelen
;

262 struct 
iovec
 *
	mmsg_iov
;

263 
size_t
 
	mmsg_iovlen
;

265 void *
	mmsg_control
;

266 
size_t
 
	mmsg_controllen
;

271 int 
	mmsg_flags
;

275 struct 
	scmsghdr


277 
size_t
 
	mcmsg_len
;

282 int 
	mcmsg_level
;

283 int 
	mcmsg_type
;

284 #if 
__glibc_c99_flexarr_available


285 
__extension__
 unsigned char 
__cmsg_data
 
	m__flexarr
;

290 #if 
__glibc_c99_flexarr_available


291 #define 
	#CMSG_DATA
(
cmsg
) ((cmsg)->
__cmsg_data
)

	)

293 #define 
	#CMSG_DATA
(
cmsg
) ((unsigned char *) ((struct 
cmsghdr
 *) (cmsg) + 1))

	)

295 #define 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
) 
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

296 #define 
	#CMSG_FIRSTHDR
(
mhdr
) \

297 ((
size_t
) (
mhdr
)->
msg_controllen
 >= sizeof (struct 
cmsghdr
) \

298 ? (struct 
cmsghdr
 *) (
mhdr
)->
msg_control
 : (struct cmsghdr *) 0)

	)

299 #define 
	#CMSG_ALIGN
(
len
) (((len) + sizeof (
size_t
) - 1) \

300 & (
size_t
) ~(sizeof (size_t) - 1))

	)

301 #define 
	#CMSG_SPACE
(
len
) (
	`CMSG_ALIGN
 (len) \

302 + 
	`CMSG_ALIGN
 (sizeof (struct 
cmsghdr
)))

	)

303 #define 
	#CMSG_LEN
(
len
) (
	`CMSG_ALIGN
 (sizeof (struct 
cmsghdr
)) + (len))

	)

305 extern struct 
cmsghdr
 *
	$__cmsg_nxthdr
 (struct 
msghdr
 *
__mhdr
,

306 struct 
cmsghdr
 *
__cmsg
) 
__THROW
;

307 #ifdef 
__USE_EXTERN_INLINES


308 #ifndef 
_EXTERN_INLINE


309 #define 
	#_EXTERN_INLINE
 
__extern_inline


	)

311 
_EXTERN_INLINE
 struct 
cmsghdr
 *

312 
	`__NTH
 (
	$__cmsg_nxthdr
 (struct 
msghdr
 *
__mhdr
, struct 
cmsghdr
 *
__cmsg
))

314 if ((
size_t
) 
__cmsg
->
cmsg_len
 < sizeof (struct 
cmsghdr
))

316 return (struct 
cmsghdr
 *) 0;

318 
__cmsg
 = (struct 
cmsghdr
 *) ((unsigned char *) __cmsg

319 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_len
));

320 if ((unsigned char *) (
__cmsg
 + 1) > ((unsigned char *) 
__mhdr
->
msg_control


321 + 
__mhdr
->
msg_controllen
)

322 || ((unsigned char *) 
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_len
)

323 > ((unsigned char *) 
__mhdr
->
msg_control
 + __mhdr->
msg_controllen
)))

325 return (struct 
cmsghdr
 *) 0;

326 return 
__cmsg
;

327 
	}
}

334 
	mSCM_RIGHTS
 = 0x01

335 #define 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

336 #ifdef 
__USE_GNU


337 , 
	mSCM_CREDENTIALS
 = 0x02

338 #define 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

342 #ifdef 
__USE_GNU


344 struct 
	sucred


346 
pid_t
 
	mpid
;

347 
uid_t
 
	muid
;

348 
gid_t
 
	mgid
;

353 #ifndef 
__USE_MISC


354 #ifndef 
FIOGETOWN


355 #define 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

357 #ifndef 
FIOSETOWN


358 #define 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

360 #ifndef 
SIOCATMARK


361 #define 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

363 #ifndef 
SIOCGPGRP


364 #define 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

366 #ifndef 
SIOCGSTAMP


367 #define 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

369 #ifndef 
SIOCGSTAMPNS


370 #define 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

372 #ifndef 
SIOCSPGRP


373 #define 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

376 #ifndef 
IOCSIZE_MASK


377 #define 
	#__SYS_SOCKET_H_undef_IOCSIZE_MASK


	)

379 #ifndef 
IOCSIZE_SHIFT


380 #define 
	#__SYS_SOCKET_H_undef_IOCSIZE_SHIFT


	)

382 #ifndef 
IOC_IN


383 #define 
	#__SYS_SOCKET_H_undef_IOC_IN


	)

385 #ifndef 
IOC_INOUT


386 #define 
	#__SYS_SOCKET_H_undef_IOC_INOUT


	)

388 #ifndef 
IOC_OUT


389 #define 
	#__SYS_SOCKET_H_undef_IOC_OUT


	)

393 #include 
	~<asm/socket.h
>

395 #ifndef 
__USE_MISC


396 #ifdef 
__SYS_SOCKET_H_undef_FIOGETOWN


397 #undef 
__SYS_SOCKET_H_undef_FIOGETOWN


398 #undef 
FIOGETOWN


400 #ifdef 
__SYS_SOCKET_H_undef_FIOSETOWN


401 #undef 
__SYS_SOCKET_H_undef_FIOSETOWN


402 #undef 
FIOSETOWN


404 #ifdef 
__SYS_SOCKET_H_undef_SIOCATMARK


405 #undef 
__SYS_SOCKET_H_undef_SIOCATMARK


406 #undef 
SIOCATMARK


408 #ifdef 
__SYS_SOCKET_H_undef_SIOCGPGRP


409 #undef 
__SYS_SOCKET_H_undef_SIOCGPGRP


410 #undef 
SIOCGPGRP


412 #ifdef 
__SYS_SOCKET_H_undef_SIOCGSTAMP


413 #undef 
__SYS_SOCKET_H_undef_SIOCGSTAMP


414 #undef 
SIOCGSTAMP


416 #ifdef 
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


417 #undef 
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


418 #undef 
SIOCGSTAMPNS


420 #ifdef 
__SYS_SOCKET_H_undef_SIOCSPGRP


421 #undef 
__SYS_SOCKET_H_undef_SIOCSPGRP


422 #undef 
SIOCSPGRP


425 #ifdef 
__SYS_SOCKET_H_undef_IOCSIZE_MASK


426 #undef 
__SYS_SOCKET_H_undef_IOCSIZE_MASK


427 #undef 
IOCSIZE_MASK


429 #ifdef 
__SYS_SOCKET_H_undef_IOCSIZE_SHIFT


430 #undef 
__SYS_SOCKET_H_undef_IOCSIZE_SHIFT


431 #undef 
IOCSIZE_SHIFT


433 #ifdef 
__SYS_SOCKET_H_undef_IOC_IN


434 #undef 
__SYS_SOCKET_H_undef_IOC_IN


435 #undef 
IOC_IN


437 #ifdef 
__SYS_SOCKET_H_undef_IOC_INOUT


438 #undef 
__SYS_SOCKET_H_undef_IOC_INOUT


439 #undef 
IOC_INOUT


441 #ifdef 
__SYS_SOCKET_H_undef_IOC_OUT


442 #undef 
__SYS_SOCKET_H_undef_IOC_OUT


443 #undef 
IOC_OUT


447 struct 
	slinger


449 int 
	ml_onoff
;

450 int 
	ml_linger
;

	@/usr/include/bits/socket2.h

19 #ifndef 
_SYS_SOCKET_H


23 extern 
ssize_t
 
__recv_chk
 (int 
__fd
, void *
__buf
, 
size_t
 
__n
, size_t 
__buflen
,

24 int 
__flags
);

25 extern 
ssize_t
 
__REDIRECT
 (
__recv_alias
, (int 
__fd
, void *
__buf
, 
size_t
 
__n
,

26 int 
__flags
), 
recv
);

27 extern 
ssize_t
 
__REDIRECT
 (
__recv_chk_warn
,

28 (int 
__fd
, void *
__buf
, 
size_t
 
__n
, size_t 
__buflen
,

29 int 
__flags
), 
__recv_chk
)

30 
__warnattr
 ("recv called with bigger length than size of destination "

33 
__fortify_function
 
ssize_t


34 
	$recv
 (int 
__fd
, void *
__buf
, 
size_t
 
__n
, int 
__flags
)

36 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

38 if (!
	`__builtin_constant_p
 (
__n
))

39 return 
	`__recv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__flags
);

41 if (
__n
 > 
	`__bos0
 (
__buf
))

42 return 
	`__recv_chk_warn
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__flags
);

44 return 
	`__recv_alias
 (
__fd
, 
__buf
, 
__n
, 
__flags
);

45 
	}
}

47 extern 
ssize_t
 
__recvfrom_chk
 (int 
__fd
, void *
__restrict
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buflen
, int 
__flags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
socklen_t
 *
__restrict
 
__addr_len
);

51 extern 
ssize_t
 
__REDIRECT
 (
__recvfrom_alias
,

52 (int 
__fd
, void *
__restrict
 
__buf
, 
size_t
 
__n
,

53 int 
__flags
, 
__SOCKADDR_ARG
 
__addr
,

54 
socklen_t
 *
__restrict
 
__addr_len
), 
recvfrom
);

55 extern 
ssize_t
 
__REDIRECT
 (
__recvfrom_chk_warn
,

56 (int 
__fd
, void *
__restrict
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buflen
, int 
__flags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
socklen_t
 *
__restrict
 
__addr_len
), 
__recvfrom_chk
)

60 
__warnattr
 ("recvfrom called with bigger length than size of "

63 
__fortify_function
 
ssize_t


64 
	$recvfrom
 (int 
__fd
, void *
__restrict
 
__buf
, 
size_t
 
__n
, int 
__flags
,

65 
__SOCKADDR_ARG
 
__addr
, 
socklen_t
 *
__restrict
 
__addr_len
)

67 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

69 if (!
	`__builtin_constant_p
 (
__n
))

70 return 
	`__recvfrom_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__flags
,

71 
__addr
, 
__addr_len
);

72 if (
__n
 > 
	`__bos0
 (
__buf
))

73 return 
	`__recvfrom_chk_warn
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__flags
,

74 
__addr
, 
__addr_len
);

76 return 
	`__recvfrom_alias
 (
__fd
, 
__buf
, 
__n
, 
__flags
, 
__addr
, 
__addr_len
);

77 
	}
}

	@/usr/include/bits/stdint-intn.h

19 #ifndef 
_BITS_STDINT_INTN_H


20 #define 
	#_BITS_STDINT_INTN_H
 1

	)

22 #include 
	~<bits/types.h
>

24 typedef 
__int8_t
 
	tint8_t
;

25 typedef 
__int16_t
 
	tint16_t
;

26 typedef 
__int32_t
 
	tint32_t
;

27 typedef 
__int64_t
 
	tint64_t
;

	@/usr/include/bits/stdint-uintn.h

19 #ifndef 
_BITS_STDINT_UINTN_H


20 #define 
	#_BITS_STDINT_UINTN_H
 1

	)

22 #include 
	~<bits/types.h
>

24 typedef 
__uint8_t
 
	tuint8_t
;

25 typedef 
__uint16_t
 
	tuint16_t
;

26 typedef 
__uint32_t
 
	tuint32_t
;

27 typedef 
__uint64_t
 
	tuint64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #ifndef 
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
fprintf
)

24 
	$__LDBL_REDIR_DECL
 (
printf
)

25 
	$__LDBL_REDIR_DECL
 (
sprintf
)

26 
	$__LDBL_REDIR_DECL
 (
vfprintf
)

27 
	$__LDBL_REDIR_DECL
 (
vprintf
)

28 
	$__LDBL_REDIR_DECL
 (
vsprintf
)

29 #if !
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

30 
	$__LDBL_REDIR1_DECL
 (
fscanf
, 
__nldbl___isoc99_fscanf
)

31 
	$__LDBL_REDIR1_DECL
 (
scanf
, 
__nldbl___isoc99_scanf
)

32 
	$__LDBL_REDIR1_DECL
 (
sscanf
, 
__nldbl___isoc99_sscanf
)

34 
	$__LDBL_REDIR_DECL
 (
fscanf
)

35 
	$__LDBL_REDIR_DECL
 (
scanf
)

36 
	$__LDBL_REDIR_DECL
 (
sscanf
)

39 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_UNIX98


40 
	$__LDBL_REDIR_DECL
 (
snprintf
)

41 
	$__LDBL_REDIR_DECL
 (
vsnprintf
)

44 #ifdef 
__USE_ISOC99


45 #if !
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

46 
	$__LDBL_REDIR1_DECL
 (
vfscanf
, 
__nldbl___isoc99_vfscanf
)

47 
	$__LDBL_REDIR1_DECL
 (
vscanf
, 
__nldbl___isoc99_vscanf
)

48 
	$__LDBL_REDIR1_DECL
 (
vsscanf
, 
__nldbl___isoc99_vsscanf
)

50 
	$__LDBL_REDIR_DECL
 (
vfscanf
)

51 
	$__LDBL_REDIR_DECL
 (
vsscanf
)

52 
	$__LDBL_REDIR_DECL
 (
vscanf
)

56 #ifdef 
__USE_XOPEN2K8


57 
	$__LDBL_REDIR_DECL
 (
vdprintf
)

58 
	$__LDBL_REDIR_DECL
 (
dprintf
)

61 #ifdef 
__USE_GNU


62 
	$__LDBL_REDIR_DECL
 (
vasprintf
)

63 
	$__LDBL_REDIR_DECL
 (
__asprintf
)

64 
	$__LDBL_REDIR_DECL
 (
asprintf
)

65 
	$__LDBL_REDIR_DECL
 (
obstack_printf
)

66 
	$__LDBL_REDIR_DECL
 (
obstack_vprintf
)

69 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


70 
	$__LDBL_REDIR_DECL
 (
__sprintf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vsprintf_chk
)

72 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_UNIX98


73 
	$__LDBL_REDIR_DECL
 (
__snprintf_chk
)

74 
	$__LDBL_REDIR_DECL
 (
__vsnprintf_chk
)

76 #if 
__USE_FORTIFY_LEVEL
 > 1

77 
	$__LDBL_REDIR_DECL
 (
__fprintf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__printf_chk
)

79 
	$__LDBL_REDIR_DECL
 (
__vfprintf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__vprintf_chk
)

81 #ifdef 
__USE_XOPEN2K8


82 
	$__LDBL_REDIR_DECL
 (
__dprintf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__vdprintf_chk
)

85 #ifdef 
__USE_GNU


86 
	$__LDBL_REDIR_DECL
 (
__asprintf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__vasprintf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__obstack_printf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__obstack_vprintf_chk
)

	@/usr/include/bits/stdio.h

19 #ifndef 
_BITS_STDIO_H


20 #define 
	#_BITS_STDIO_H
 1

	)

22 #ifndef 
_STDIO_H


26 #ifndef 
__extern_inline


27 #define 
	#__STDIO_INLINE
 
inline


	)

29 #define 
	#__STDIO_INLINE
 
__extern_inline


	)

33 #ifdef 
__USE_EXTERN_INLINES


36 #if !(
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function
)

38 
__STDIO_INLINE
 int

39 
	$vprintf
 (const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__arg
)

41 return 
	`vfprintf
 (
stdout
, 
__fmt
, 
__arg
);

42 
	}
}

46 
__STDIO_INLINE
 int

47 
	$getchar
 (void)

49 return 
	`getc
 (
stdin
);

50 
	}
}

53 #ifdef 
__USE_MISC


55 
__STDIO_INLINE
 int

56 
	$fgetc_unlocked
 (
FILE
 *
__fp
)

58 return 
	`__getc_unlocked_body
 (
__fp
);

59 
	}
}

63 #ifdef 
__USE_POSIX


65 
__STDIO_INLINE
 int

66 
	$getc_unlocked
 (
FILE
 *
__fp
)

68 return 
	`__getc_unlocked_body
 (
__fp
);

69 
	}
}

72 
__STDIO_INLINE
 int

73 
	$getchar_unlocked
 (void)

75 return 
	`__getc_unlocked_body
 (
stdin
);

76 
	}
}

81 
__STDIO_INLINE
 int

82 
	$putchar
 (int 
__c
)

84 return 
	`putc
 (
__c
, 
stdout
);

85 
	}
}

88 #ifdef 
__USE_MISC


90 
__STDIO_INLINE
 int

91 
	$fputc_unlocked
 (int 
__c
, 
FILE
 *
__stream
)

93 return 
	`__putc_unlocked_body
 (
__c
, 
__stream
);

94 
	}
}

98 #ifdef 
__USE_POSIX


100 
__STDIO_INLINE
 int

101 
	$putc_unlocked
 (int 
__c
, 
FILE
 *
__stream
)

103 return 
	`__putc_unlocked_body
 (
__c
, 
__stream
);

104 
	}
}

107 
__STDIO_INLINE
 int

108 
	$putchar_unlocked
 (int 
__c
)

110 return 
	`__putc_unlocked_body
 (
__c
, 
stdout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$getline
 (char **
__lineptr
, 
size_t
 *
__n
, 
FILE
 *
__stream
)

120 return 
	`__getdelim
 (
__lineptr
, 
__n
, '\n', 
__stream
);

121 
	}
}

125 #ifdef 
__USE_MISC


127 
__STDIO_INLINE
 int

128 
__NTH
 (
	$feof_unlocked
 (
FILE
 *
__stream
))

130 return 
	`__feof_unlocked_body
 (
__stream
);

131 
	}
}

134 
__STDIO_INLINE
 int

135 
__NTH
 (
	$ferror_unlocked
 (
FILE
 *
__stream
))

137 return 
	`__ferror_unlocked_body
 (
__stream
);

138 
	}
}

144 #if 
defined
 
__USE_MISC
 && defined 
__GNUC__
 && defined 
__OPTIMIZE__
 \

145 && !
defined
 
	g__cplusplus


147 #define 
	#fread_unlocked
(
ptr
, 
size
, 
n
, 
stream
) \

148 (
	`__extension__
 ((
	`__builtin_constant_p
 (
size
) && __builtin_constant_p (
n
) \

149 && (
size_t
) (
size
) * (size_t) (
n
) <= 8 \

150 && (
size_t
) (
size
) != 0) \

151 ? ({ char *
__ptr
 = (char *) (
ptr
); \

152 
FILE
 *
__stream
 = (
stream
); \

153 
size_t
 
__cnt
; \

154 for (
__cnt
 = (
size_t
) (
size
) * (size_t) (
n
); \

155 
__cnt
 > 0; --__cnt) \

157 int 
__c
 = 
	`getc_unlocked
 (
__stream
); \

158 if (
__c
 == 
EOF
) \

160 *
__ptr
++ = 
__c
; \

162 ((
size_t
) (
size
) * (size_t) (
n
) - 
__cnt
) \

163 / (
size_t
) (
size
); }) \

164 : (((
	`__builtin_constant_p
 (
size
) && (
size_t
) (size) == 0) \

165 || (
	`__builtin_constant_p
 (
n
) && (
size_t
) (n) == 0)) \

167 ? ((void) (
ptr
), (void) (
stream
), (void) (
size
), \

168 (void) (
n
), (
size_t
) 0) \

169 : 
	`fread_unlocked
 (
ptr
, 
size
, 
n
, 
stream
))))

	)

171 #define 
	#fwrite_unlocked
(
ptr
, 
size
, 
n
, 
stream
) \

172 (
	`__extension__
 ((
	`__builtin_constant_p
 (
size
) && __builtin_constant_p (
n
) \

173 && (
size_t
) (
size
) * (size_t) (
n
) <= 8 \

174 && (
size_t
) (
size
) != 0) \

175 ? ({ const char *
__ptr
 = (const char *) (
ptr
); \

176 
FILE
 *
__stream
 = (
stream
); \

177 
size_t
 
__cnt
; \

178 for (
__cnt
 = (
size_t
) (
size
) * (size_t) (
n
); \

179 
__cnt
 > 0; --__cnt) \

180 if (
	`putc_unlocked
 (*
__ptr
++, 
__stream
) == 
EOF
) \

182 ((
size_t
) (
size
) * (size_t) (
n
) - 
__cnt
) \

183 / (
size_t
) (
size
); }) \

184 : (((
	`__builtin_constant_p
 (
size
) && (
size_t
) (size) == 0) \

185 || (
	`__builtin_constant_p
 (
n
) && (
size_t
) (n) == 0)) \

187 ? ((void) (
ptr
), (void) (
stream
), (void) (
size
), \

188 (void) (
n
), (
size_t
) 0) \

189 : 
	`fwrite_unlocked
 (
ptr
, 
size
, 
n
, 
stream
))))

	)

193 #undef 
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #ifndef 
_BITS_STDIO2_H


20 #define 
	#_BITS_STDIO2_H
 1

	)

22 #ifndef 
_STDIO_H


26 extern int 
	$__sprintf_chk
 (char *
__restrict
 
__s
, int 
__flag
, 
size_t
 
__slen
,

27 const char *
__restrict
 
__format
, ...) 
__THROW
;

28 extern int 
	$__vsprintf_chk
 (char *
__restrict
 
__s
, int 
__flag
, 
size_t
 
__slen
,

29 const char *
__restrict
 
__format
,

30 
__gnuc_va_list
 
__ap
) 
__THROW
;

32 #ifdef 
__va_arg_pack


33 
__fortify_function
 int

34 
	`__NTH
 (
	$sprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__fmt
, ...))

36 return 
	`__builtin___sprintf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

37 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_arg_pack
 ());

38 
	}
}

39 #elif !
defined
 
__cplusplus


40 #define 
	#sprintf
(
str
, ...) \

41 
	`__builtin___sprintf_chk
 (
str
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

42 
__VA_ARGS__
)

	)

45 
__fortify_function
 int

46 
__NTH
 (
	$vsprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__fmt
,

47 
__gnuc_va_list
 
__ap
))

49 return 
	`__builtin___vsprintf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

50 
	`__bos
 (
__s
), 
__fmt
, 
__ap
);

51 
	}
}

53 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_UNIX98


55 extern int 
	$__snprintf_chk
 (char *
__restrict
 
__s
, 
size_t
 
__n
, int 
__flag
,

56 
size_t
 
__slen
, const char *
__restrict
 
__format
,

57 ...) 
__THROW
;

58 extern int 
	$__vsnprintf_chk
 (char *
__restrict
 
__s
, 
size_t
 
__n
, int 
__flag
,

59 
size_t
 
__slen
, const char *
__restrict
 
__format
,

60 
__gnuc_va_list
 
__ap
) 
__THROW
;

62 #ifdef 
__va_arg_pack


63 
__fortify_function
 int

64 
	`__NTH
 (
	$snprintf
 (char *
__restrict
 
__s
, 
size_t
 
__n
,

65 const char *
__restrict
 
__fmt
, ...))

67 return 
	`__builtin___snprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

68 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_arg_pack
 ());

69 
	}
}

70 #elif !
defined
 
__cplusplus


71 #define 
	#snprintf
(
str
, 
len
, ...) \

72 
	`__builtin___snprintf_chk
 (
str
, 
len
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

73 
__VA_ARGS__
)

	)

76 
__fortify_function
 int

77 
__NTH
 (
	$vsnprintf
 (char *
__restrict
 
__s
, 
size_t
 
__n
,

78 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
))

80 return 
	`__builtin___vsnprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

81 
	`__bos
 (
__s
), 
__fmt
, 
__ap
);

82 
	}
}

86 #if 
__USE_FORTIFY_LEVEL
 > 1

88 extern int 
__fprintf_chk
 (
FILE
 *
__restrict
 
__stream
, int 
__flag
,

89 const char *
__restrict
 
__format
, ...);

90 extern int 
__printf_chk
 (int 
__flag
, const char *
__restrict
 
__format
, ...);

91 extern int 
__vfprintf_chk
 (
FILE
 *
__restrict
 
__stream
, int 
__flag
,

92 const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__ap
);

93 extern int 
__vprintf_chk
 (int 
__flag
, const char *
__restrict
 
__format
,

94 
__gnuc_va_list
 
__ap
);

96 #ifdef 
__va_arg_pack


97 
__fortify_function
 int

98 
	$fprintf
 (
FILE
 *
__restrict
 
__stream
, const char *__restrict 
__fmt
, ...)

100 return 
	`__fprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

101 
	`__va_arg_pack
 ());

102 
	}
}

104 
__fortify_function
 int

105 
	$printf
 (const char *
__restrict
 
__fmt
, ...)

107 return 
	`__printf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_arg_pack
 ());

108 
	}
}

109 #elif !
defined
 
__cplusplus


110 #define 
	#printf
(...) \

111 
	`__printf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

112 #define 
	#fprintf
(
stream
, ...) \

113 
	`__fprintf_chk
 (
stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

116 
__fortify_function
 int

117 
	$vprintf
 (const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

119 #ifdef 
__USE_EXTERN_INLINES


120 return 
	`__vfprintf_chk
 (
stdout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

122 return 
	`__vprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

124 
	}
}

126 
__fortify_function
 int

127 
	$vfprintf
 (
FILE
 *
__restrict
 
__stream
,

128 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

130 return 
	`__vfprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

131 
	}
}

133 #ifdef 
__USE_XOPEN2K8


134 extern int 
	$__dprintf_chk
 (int 
__fd
, int 
__flag
, const char *
__restrict
 
__fmt
,

135 ...) 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

136 extern int 
	$__vdprintf_chk
 (int 
__fd
, int 
__flag
,

137 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__arg
)

138 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

140 #ifdef 
__va_arg_pack


141 
__fortify_function
 int

142 
	$dprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, ...)

144 return 
	`__dprintf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

145 
	`__va_arg_pack
 ());

146 
	}
}

147 #elif !
defined
 
__cplusplus


148 #define 
	#dprintf
(
fd
, ...) \

149 
	`__dprintf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

152 
__fortify_function
 int

153 
	$vdprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

155 return 
	`__vdprintf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

156 
	}
}

159 #ifdef 
__USE_GNU


161 extern int 
	$__asprintf_chk
 (char **
__restrict
 
__ptr
, int 
__flag
,

162 const char *
__restrict
 
__fmt
, ...)

163 
__THROW
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 3, 4))) 
__wur
;

164 extern int 
	$__vasprintf_chk
 (char **
__restrict
 
__ptr
, int 
__flag
,

165 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__arg
)

166 
__THROW
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 3, 0))) 
__wur
;

167 extern int 
	$__obstack_printf_chk
 (struct 
obstack
 *
__restrict
 
__obstack
,

168 int 
__flag
, const char *
__restrict
 
__format
,

170 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

171 extern int 
	$__obstack_vprintf_chk
 (struct 
obstack
 *
__restrict
 
__obstack
,

172 int 
__flag
,

173 const char *
__restrict
 
__format
,

174 
__gnuc_va_list
 
__args
)

175 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

177 #ifdef 
__va_arg_pack


178 
__fortify_function
 int

179 
	`__NTH
 (
	$asprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
, ...))

181 return 
	`__asprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_arg_pack
 ());

183 
	}
}

185 
__fortify_function
 int

186 
__NTH
 (
	$__asprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
,

189 return 
	`__asprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

190 
	`__va_arg_pack
 ());

191 
	}
}

193 
__fortify_function
 int

194 
__NTH
 (
	$obstack_printf
 (struct 
obstack
 *
__restrict
 
__obstack
,

195 const char *
__restrict
 
__fmt
, ...))

197 return 
	`__obstack_printf_chk
 (
__obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

198 
	`__va_arg_pack
 ());

199 
	}
}

200 #elif !
defined
 
__cplusplus


201 #define 
	#asprintf
(
ptr
, ...) \

202 
	`__asprintf_chk
 (
ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

203 #define 
	#__asprintf
(
ptr
, ...) \

204 
	`__asprintf_chk
 (
ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

205 #define 
	#obstack_printf
(
obstack
, ...) \

206 
	`__obstack_printf_chk
 (
obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

209 
__fortify_function
 int

210 
__NTH
 (
	$vasprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
,

211 
__gnuc_va_list
 
__ap
))

213 return 
	`__vasprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

214 
	}
}

216 
__fortify_function
 int

217 
__NTH
 (
	$obstack_vprintf
 (struct 
obstack
 *
__restrict
 
__obstack
,

218 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
))

220 return 
	`__obstack_vprintf_chk
 (
__obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

221 
__ap
);

222 
	}
}

228 #if 
__GLIBC_USE
 (
DEPRECATED_GETS
)

229 extern char *
	$__gets_chk
 (char *
__str
, 
size_t
) 
__wur
;

230 extern char *
	`__REDIRECT
 (
__gets_warn
, (char *
__str
), 
gets
)

231 
__wur
 
	`__warnattr
 ("please use fgets or getline instead, gets can't "

234 
__fortify_function
 
__wur
 char *

235 
	$gets
 (char *
__str
)

237 if (
	`__bos
 (
__str
) != (
size_t
) -1)

238 return 
	`__gets_chk
 (
__str
, 
	`__bos
 (__str));

239 return 
	`__gets_warn
 (
__str
);

240 
	}
}

243 extern char *
	$__fgets_chk
 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

244 
FILE
 *
__restrict
 
__stream
) 
__wur
;

245 extern char *
	`__REDIRECT
 (
__fgets_alias
,

246 (char *
__restrict
 
__s
, int 
__n
,

247 
FILE
 *
__restrict
 
__stream
), 
fgets
) 
__wur
;

248 extern char *
	`__REDIRECT
 (
__fgets_chk_warn
,

249 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

250 
FILE
 *
__restrict
 
__stream
), 
__fgets_chk
)

251 
__wur
 
	`__warnattr
 ("fgets called with bigger size than length "

254 
__fortify_function
 
__wur
 char *

255 
	$fgets
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

257 if (
	`__bos
 (
__s
) != (
size_t
) -1)

259 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

260 return 
	`__fgets_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

262 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
))

263 return 
	`__fgets_chk_warn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

265 return 
	`__fgets_alias
 (
__s
, 
__n
, 
__stream
);

266 
	}
}

268 extern 
size_t
 
	$__fread_chk
 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

269 
size_t
 
__size
, size_t 
__n
,

270 
FILE
 *
__restrict
 
__stream
) 
__wur
;

271 extern 
size_t
 
	`__REDIRECT
 (
__fread_alias
,

272 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

273 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
),

274 
fread
) 
__wur
;

275 extern 
size_t
 
	`__REDIRECT
 (
__fread_chk_warn
,

276 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

277 
size_t
 
__size
, size_t 
__n
,

278 
FILE
 *
__restrict
 
__stream
),

279 
__fread_chk
)

280 
__wur
 
	`__warnattr
 ("fread called with bigger size * nmemb than length "

283 
__fortify_function
 
__wur
 
size_t


284 
	$fread
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
, size_t 
__n
,

285 
FILE
 *
__restrict
 
__stream
)

287 if (
	`__bos0
 (
__ptr
) != (
size_t
) -1)

289 if (!
	`__builtin_constant_p
 (
__size
)

290 || !
	`__builtin_constant_p
 (
__n
)

291 || (
__size
 | 
__n
) >= (((
size_t
) 1) << (8 * sizeof (size_t) / 2)))

292 return 
	`__fread_chk
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
, 
__stream
);

294 if (
__size
 * 
__n
 > 
	`__bos0
 (
__ptr
))

295 return 
	`__fread_chk_warn
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
, 
__stream
);

297 return 
	`__fread_alias
 (
__ptr
, 
__size
, 
__n
, 
__stream
);

298 
	}
}

300 #ifdef 
__USE_GNU


301 extern char *
	$__fgets_unlocked_chk
 (char *
__restrict
 
__s
, 
size_t
 
__size
,

302 int 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

303 extern char *
	`__REDIRECT
 (
__fgets_unlocked_alias
,

304 (char *
__restrict
 
__s
, int 
__n
,

305 
FILE
 *
__restrict
 
__stream
), 
fgets_unlocked
) 
__wur
;

306 extern char *
	`__REDIRECT
 (
__fgets_unlocked_chk_warn
,

307 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

308 
FILE
 *
__restrict
 
__stream
), 
__fgets_unlocked_chk
)

309 
__wur
 
	`__warnattr
 ("fgets_unlocked called with bigger size than length "

312 
__fortify_function
 
__wur
 char *

313 
	$fgets_unlocked
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

315 if (
	`__bos
 (
__s
) != (
size_t
) -1)

317 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

318 return 
	`__fgets_unlocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

320 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
))

321 return 
	`__fgets_unlocked_chk_warn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

323 return 
	`__fgets_unlocked_alias
 (
__s
, 
__n
, 
__stream
);

324 
	}
}

327 #ifdef 
__USE_MISC


328 #undef 
fread_unlocked


329 extern 
size_t
 
	$__fread_unlocked_chk
 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

330 
size_t
 
__size
, size_t 
__n
,

331 
FILE
 *
__restrict
 
__stream
) 
__wur
;

332 extern 
size_t
 
	`__REDIRECT
 (
__fread_unlocked_alias
,

333 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

334 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
),

335 
fread_unlocked
) 
__wur
;

336 extern 
size_t
 
	`__REDIRECT
 (
__fread_unlocked_chk_warn
,

337 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

338 
size_t
 
__size
, size_t 
__n
,

339 
FILE
 *
__restrict
 
__stream
),

340 
__fread_unlocked_chk
)

341 
__wur
 
	`__warnattr
 ("fread_unlocked called with bigger size * nmemb than "

344 
__fortify_function
 
__wur
 
size_t


345 
	$fread_unlocked
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
, size_t 
__n
,

346 
FILE
 *
__restrict
 
__stream
)

348 if (
	`__bos0
 (
__ptr
) != (
size_t
) -1)

350 if (!
	`__builtin_constant_p
 (
__size
)

351 || !
	`__builtin_constant_p
 (
__n
)

352 || (
__size
 | 
__n
) >= (((
size_t
) 1) << (8 * sizeof (size_t) / 2)))

353 return 
	`__fread_unlocked_chk
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
,

354 
__stream
);

356 if (
__size
 * 
__n
 > 
	`__bos0
 (
__ptr
))

357 return 
	`__fread_unlocked_chk_warn
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
,

358 
__stream
);

361 #ifdef 
__USE_EXTERN_INLINES


362 if (
	`__builtin_constant_p
 (
__size
)

363 && 
	`__builtin_constant_p
 (
__n
)

364 && (
__size
 | 
__n
) < (((
size_t
) 1) << (8 * sizeof (size_t) / 2))

365 && 
__size
 * 
__n
 <= 8)

367 
size_t
 
__cnt
 = 
__size
 * 
__n
;

368 char *
__cptr
 = (char *) 
__ptr
;

369 if (
__cnt
 == 0)

372 for (; 
__cnt
 > 0; --__cnt)

374 int 
__c
 = 
	`getc_unlocked
 (
__stream
);

375 if (
__c
 == 
EOF
)

377 *
__cptr
++ = 
__c
;

379 return (
__cptr
 - (char *) 
__ptr
) / 
__size
;

382 return 
	`__fread_unlocked_alias
 (
__ptr
, 
__size
, 
__n
, 
__stream
);

383 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #ifndef 
_BITS_STDIO_LIM_H


19 #define 
	#_BITS_STDIO_LIM_H
 1

	)

21 #ifndef 
_STDIO_H


25 #define 
	#L_tmpnam
 20

	)

26 #define 
	#TMP_MAX
 238328

	)

27 #define 
	#FILENAME_MAX
 4096

	)

29 #ifdef 
__USE_POSIX


30 #define 
	#L_ctermid
 9

	)

31 #if !
defined
 
__USE_XOPEN2K
 || defined 
__USE_GNU


32 #define 
	#L_cuserid
 9

	)

36 #undef 
FOPEN_MAX


37 #define 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/string_fortified.h

18 #ifndef 
_BITS_STRING_FORTIFIED_H


19 #define 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #ifndef 
_STRING_H


25 #if !
__GNUC_PREREQ
 (5,0)

26 
__warndecl
 (
__warn_memset_zero_len
,

30 
__fortify_function
 void *

31 
__NTH
 (
	$memcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

32 
size_t
 
__len
))

34 return 
	`__builtin___memcpy_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

35 
	}
}

37 
__fortify_function
 void *

38 
__NTH
 (
	$memmove
 (void *
__dest
, const void *
__src
, 
size_t
 
__len
))

40 return 
	`__builtin___memmove_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

41 
	}
}

43 #ifdef 
__USE_GNU


44 
__fortify_function
 void *

45 
__NTH
 (
	$mempcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

46 
size_t
 
__len
))

48 return 
	`__builtin___mempcpy_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

49 
	}
}

58 
__fortify_function
 void *

59 
__NTH
 (
	$memset
 (void *
__dest
, int 
__ch
, 
size_t
 
__len
))

63 #if !
	`__GNUC_PREREQ
 (5,0)

64 if (
	`__builtin_constant_p
 (
__len
) && __len == 0

65 && (!
	`__builtin_constant_p
 (
__ch
) || __ch != 0))

67 
	`__warn_memset_zero_len
 ();

68 return 
__dest
;

71 return 
	`__builtin___memset_chk
 (
__dest
, 
__ch
, 
__len
, 
	`__bos0
 (__dest));

72 
	}
}

74 #ifdef 
__USE_MISC


75 #include 
	~<bits/strings_fortified.h
>

77 void 
	$__explicit_bzero_chk
 (void *
__dest
, 
size_t
 
__len
, size_t 
__destlen
)

78 
__THROW
 
	`__nonnull
 ((1));

80 
__fortify_function
 void

81 
	`__NTH
 (
	$explicit_bzero
 (void *
__dest
, 
size_t
 
__len
))

83 
	`__explicit_bzero_chk
 (
__dest
, 
__len
, 
	`__bos0
 (__dest));

84 
	}
}

87 
__fortify_function
 char *

88 
__NTH
 (
	$strcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
))

90 return 
	`__builtin___strcpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest));

91 
	}
}

93 #ifdef 
__USE_GNU


94 
__fortify_function
 char *

95 
__NTH
 (
	$stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
))

97 return 
	`__builtin___stpcpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest));

98 
	}
}

102 
__fortify_function
 char *

103 
__NTH
 (
	$strncpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

104 
size_t
 
__len
))

106 return 
	`__builtin___strncpy_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos
 (__dest));

107 
	}
}

110 extern char *
	$__stpncpy_chk
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
,

111 
size_t
 
__destlen
) 
__THROW
;

112 extern char *
	`__REDIRECT_NTH
 (
__stpncpy_alias
, (char *
__dest
, const char *
__src
,

113 
size_t
 
__n
), 
stpncpy
);

115 
__fortify_function
 char *

116 
	`__NTH
 (
	$stpncpy
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
))

118 if (
	`__bos
 (
__dest
) != (
size_t
) -1

119 && (!
	`__builtin_constant_p
 (
__n
) || __n > 
	`__bos
 (
__dest
)))

120 return 
	`__stpncpy_chk
 (
__dest
, 
__src
, 
__n
, 
	`__bos
 (__dest));

121 return 
	`__stpncpy_alias
 (
__dest
, 
__src
, 
__n
);

122 
	}
}

125 
__fortify_function
 char *

126 
__NTH
 (
	$strcat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
))

128 return 
	`__builtin___strcat_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest));

129 
	}
}

132 
__fortify_function
 char *

133 
__NTH
 (
	$strncat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

134 
size_t
 
__len
))

136 return 
	`__builtin___strncat_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos
 (__dest));

137 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #ifndef 
_STDIO_H


25 #ifdef 
__USE_MISC


26 extern int 
sys_nerr
;

27 extern const char *const 
sys_errlist
[];

29 #ifdef 
__USE_GNU


30 extern int 
_sys_nerr
;

31 extern const char *const 
_sys_errlist
[];

	@/usr/include/bits/types.h

23 #ifndef 
_BITS_TYPES_H


24 #define 
	#_BITS_TYPES_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/wordsize.h
>

28 #include 
	~<bits/timesize.h
>

31 typedef unsigned char 
	t__u_char
;

32 typedef unsigned short int 
	t__u_short
;

33 typedef unsigned int 
	t__u_int
;

34 typedef unsigned long int 
	t__u_long
;

37 typedef signed char 
	t__int8_t
;

38 typedef unsigned char 
	t__uint8_t
;

39 typedef signed short int 
	t__int16_t
;

40 typedef unsigned short int 
	t__uint16_t
;

41 typedef signed int 
	t__int32_t
;

42 typedef unsigned int 
	t__uint32_t
;

43 #if 
__WORDSIZE
 == 64

44 typedef signed long int 
	t__int64_t
;

45 typedef unsigned long int 
	t__uint64_t
;

47 
__extension__
 typedef signed long long int 
	t__int64_t
;

48 
__extension__
 typedef unsigned long long int 
	t__uint64_t
;

52 typedef 
__int8_t
 
	t__int_least8_t
;

53 typedef 
__uint8_t
 
	t__uint_least8_t
;

54 typedef 
__int16_t
 
	t__int_least16_t
;

55 typedef 
__uint16_t
 
	t__uint_least16_t
;

56 typedef 
__int32_t
 
	t__int_least32_t
;

57 typedef 
__uint32_t
 
	t__uint_least32_t
;

58 typedef 
__int64_t
 
	t__int_least64_t
;

59 typedef 
__uint64_t
 
	t__uint_least64_t
;

62 #if 
__WORDSIZE
 == 64

63 typedef long int 
	t__quad_t
;

64 typedef unsigned long int 
	t__u_quad_t
;

66 
__extension__
 typedef long long int 
	t__quad_t
;

67 
__extension__
 typedef unsigned long long int 
	t__u_quad_t
;

71 #if 
__WORDSIZE
 == 64

72 typedef long int 
	t__intmax_t
;

73 typedef unsigned long int 
	t__uintmax_t
;

75 
__extension__
 typedef long long int 
	t__intmax_t
;

76 
__extension__
 typedef unsigned long long int 
	t__uintmax_t
;

109 #define 
	#__S16_TYPE
 short int

	)

110 #define 
	#__U16_TYPE
 unsigned short int

	)

111 #define 
	#__S32_TYPE
 int

	)

112 #define 
	#__U32_TYPE
 unsigned int

	)

113 #define 
	#__SLONGWORD_TYPE
 long int

	)

114 #define 
	#__ULONGWORD_TYPE
 unsigned long int

	)

115 #if 
__WORDSIZE
 == 32

116 #define 
	#__SQUAD_TYPE
 
__int64_t


	)

117 #define 
	#__UQUAD_TYPE
 
__uint64_t


	)

118 #define 
	#__SWORD_TYPE
 int

	)

119 #define 
	#__UWORD_TYPE
 unsigned int

	)

120 #define 
	#__SLONG32_TYPE
 long int

	)

121 #define 
	#__ULONG32_TYPE
 unsigned long int

	)

122 #define 
	#__S64_TYPE
 
__int64_t


	)

123 #define 
	#__U64_TYPE
 
__uint64_t


	)

126 #define 
	#__STD_TYPE
 
__extension__
 typedef

	)

127 #elif 
__WORDSIZE
 == 64

128 #define 
	t__SQUAD_TYPE
 long int

	)

129 #define 
	t__UQUAD_TYPE
 unsigned long int

	)

130 #define 
	t__SWORD_TYPE
 long int

	)

131 #define 
	t__UWORD_TYPE
 unsigned long int

	)

132 #define 
	t__SLONG32_TYPE
 int

	)

133 #define 
	t__ULONG32_TYPE
 unsigned int

	)

134 #define 
	t__S64_TYPE
 long int

	)

135 #define 
	t__U64_TYPE
 unsigned long int

	)

137 #define 
	t__STD_TYPE
 typedef

	)

141 #include 
	~<bits/typesizes.h
>

142 #include 
	~<bits/time64.h
>

145 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

146 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

147 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

148 
__STD_TYPE
 
__INO_T_TYPE
 
	g__ino_t
;

149 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__ino64_t
;

150 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

151 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__nlink_t
;

152 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

153 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

154 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

155 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

156 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__clock_t
;

157 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__rlim_t
;

158 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__rlim64_t
;

159 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

160 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

161 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__useconds_t
;

162 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__suseconds_t
;

164 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

165 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

168 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__clockid_t
;

171 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timer_t
;

174 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

179 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blkcnt_t
;

180 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blkcnt64_t
;

183 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblkcnt_t
;

184 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblkcnt64_t
;

187 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfilcnt_t
;

188 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfilcnt64_t
;

191 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsword_t
;

193 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

196 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__syscall_slong_t
;

198 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__syscall_ulong_t
;

202 typedef 
__off64_t
 
	t__loff_t
;

203 typedef char *
	t__caddr_t
;

206 
__STD_TYPE
 
__SWORD_TYPE
 
	g__intptr_t
;

209 
__STD_TYPE
 
__U32_TYPE
 
	g__socklen_t
;

214 typedef int 
	t__sig_atomic_t
;

216 #if 
__TIMESIZE
 == 64

217 #define 
	#__time64_t
 
__time_t


	)

219 
__STD_TYPE
 
__TIME64_T_TYPE
 
	g__time64_t
;

222 #undef 
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #ifndef 
__FILE_defined


2 #define 
	#__FILE_defined
 1

	)

4 struct 
	g_IO_FILE
;

7 typedef struct 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #ifndef 
____FILE_defined


2 #define 
	#____FILE_defined
 1

	)

4 struct 
	g_IO_FILE
;

5 typedef struct 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #ifndef 
_____fpos64_t_defined


2 #define 
	#_____fpos64_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

5 #include 
	~<bits/types/__mbstate_t.h
>

10 typedef struct 
	s_G_fpos64_t


12 
__off64_t
 
	m__pos
;

13 
__mbstate_t
 
	m__state
;

14 } 
	t__fpos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #ifndef 
_____fpos_t_defined


2 #define 
	#_____fpos_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

5 #include 
	~<bits/types/__mbstate_t.h
>

10 typedef struct 
	s_G_fpos_t


12 
__off_t
 
	m__pos
;

13 
__mbstate_t
 
	m__state
;

14 } 
	t__fpos_t
;

	@/usr/include/bits/types/clock_t.h

1 #ifndef 
__clock_t_defined


2 #define 
	#__clock_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

7 typedef 
__clock_t
 
	tclock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #ifndef 
__clockid_t_defined


2 #define 
	#__clockid_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

7 typedef 
__clockid_t
 
	tclockid_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #ifndef 
__cookie_io_functions_t_defined


19 #define 
	#__cookie_io_functions_t_defined
 1

	)

21 #include 
	~<bits/types.h
>

27 typedef 
__ssize_t
 
	tcookie_read_function_t
 (void *
	t__cookie
, char *
	t__buf
,

28 
	tsize_t
 
	t__nbytes
);

36 typedef 
__ssize_t
 
	tcookie_write_function_t
 (void *
	t__cookie
, const char *
	t__buf
,

37 
	tsize_t
 
	t__nbytes
);

45 typedef int 
	tcookie_seek_function_t
 (void *
	t__cookie
, 
	t__off64_t
 *
	t__pos
, int 
	t__w
);

48 typedef int 
	tcookie_close_function_t
 (void *
	t__cookie
);

55 typedef struct 
	s_IO_cookie_io_functions_t


57 
cookie_read_function_t
 *
	mread
;

58 
cookie_write_function_t
 *
	mwrite
;

59 
cookie_seek_function_t
 *
	mseek
;

60 
cookie_close_function_t
 *
	mclose
;

61 } 
	tcookie_io_functions_t
;

	@/usr/include/bits/types/locale_t.h

19 #ifndef 
_BITS_TYPES_LOCALE_T_H


20 #define 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 #include 
	~<bits/types/__locale_t.h
>

24 typedef 
__locale_t
 
	tlocale_t
;

	@/usr/include/bits/types/sigevent_t.h

1 #ifndef 
__sigevent_t_defined


2 #define 
	#__sigevent_t_defined
 1

	)

4 #include 
	~<bits/wordsize.h
>

5 #include 
	~<bits/types.h
>

6 #include 
	~<bits/types/__sigval_t.h
>

8 #define 
	#__SIGEV_MAX_SIZE
 64

	)

9 #if 
__WORDSIZE
 == 64

10 #define 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 / sizeof (int)) - 4)

	)

12 #define 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 / sizeof (int)) - 3)

	)

16 #ifndef 
__have_pthread_attr_t


17 typedef union 
pthread_attr_t
 
	tpthread_attr_t
;

18 #define 
	#__have_pthread_attr_t
 1

	)

22 typedef struct 
	ssigevent


24 
__sigval_t
 
	msigev_value
;

25 int 
	msigev_signo
;

26 int 
	msigev_notify
;

30 int 
	m_pad
[
__SIGEV_PAD_SIZE
];

34 
__pid_t
 
	m_tid
;

38 void (*
	m_function
) (
	m__sigval_t
);

39 
pthread_attr_t
 *
	m_attribute
;

40 } 
	m_sigev_thread
;

41 } 
	m_sigev_un
;

42 } 
	tsigevent_t
;

45 #define 
	#sigev_notify_function
 
_sigev_un
.
_sigev_thread
.
_function


	)

46 #define 
	#sigev_notify_attributes
 
_sigev_un
.
_sigev_thread
.
_attribute


	)

	@/usr/include/bits/types/struct_FILE.h

18 #ifndef 
__struct_FILE_defined


19 #define 
	#__struct_FILE_defined
 1

	)

25 #if 
defined
 
_IO_USE_OLD_IO_FILE
 && !defined 
_LIBC


29 #if 
defined
 
_IO_lock_t_defined
 && !defined 
_LIBC


33 #include 
	~<bits/types.h
>

35 struct 
	g_IO_FILE
;

36 struct 
	g_IO_marker
;

37 struct 
	g_IO_codecvt
;

38 struct 
	g_IO_wide_data
;

42 #ifndef 
_IO_lock_t_defined


43 typedef void 
	t_IO_lock_t
;

49 struct 
	s_IO_FILE


51 int 
	m_flags
;

54 char *
	m_IO_read_ptr
;

55 char *
	m_IO_read_end
;

56 char *
	m_IO_read_base
;

57 char *
	m_IO_write_base
;

58 char *
	m_IO_write_ptr
;

59 char *
	m_IO_write_end
;

60 char *
	m_IO_buf_base
;

61 char *
	m_IO_buf_end
;

64 char *
	m_IO_save_base
;

65 char *
	m_IO_backup_base
;

66 char *
	m_IO_save_end
;

68 struct 
_IO_marker
 *
	m_markers
;

70 struct 
_IO_FILE
 *
	m_chain
;

72 int 
	m_fileno
;

73 int 
	m_flags2
;

74 
__off_t
 
	m_old_offset
;

77 unsigned short 
	m_cur_column
;

78 signed char 
	m_vtable_offset
;

79 char 
	m_shortbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifdef 
_IO_USE_OLD_IO_FILE


85 struct 
	s_IO_FILE_complete


87 struct 
_IO_FILE
 
	m_file
;

89 
__off64_t
 
	m_offset
;

91 struct 
_IO_codecvt
 *
	m_codecvt
;

92 struct 
_IO_wide_data
 *
	m_wide_data
;

93 struct 
_IO_FILE
 *
	m_freeres_list
;

94 void *
	m_freeres_buf
;

95 
size_t
 
	m__pad5
;

96 int 
	m_mode
;

98 char 
	m_unused2
[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (
size_t
)];

102 #define 
	#__getc_unlocked_body
(
_fp
) \

103 (
	`__glibc_unlikely
 ((
_fp
)->
_IO_read_ptr
 >= (_fp)->
_IO_read_end
) \

104 ? 
	`__uflow
 (
_fp
) : *(unsigned char *) (_fp)->
_IO_read_ptr
++)

	)

106 #define 
	#__putc_unlocked_body
(
_ch
, 
_fp
) \

107 (
	`__glibc_unlikely
 ((
_fp
)->
_IO_write_ptr
 >= (_fp)->
_IO_write_end
) \

108 ? 
	`__overflow
 (
_fp
, (unsigned char) (
_ch
)) \

109 : (unsigned char) (*(
_fp
)->
_IO_write_ptr
++ = (
_ch
)))

	)

111 #define 
	#_IO_EOF_SEEN
 0x0010

	)

112 #define 
	#__feof_unlocked_body
(
_fp
) (((_fp)->
_flags
 & 
_IO_EOF_SEEN
) != 0)

	)

114 #define 
	#_IO_ERR_SEEN
 0x0020

	)

115 #define 
	#__ferror_unlocked_body
(
_fp
) (((_fp)->
_flags
 & 
_IO_ERR_SEEN
) != 0)

	)

117 #define 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/types/struct_iovec.h

19 #ifndef 
__iovec_defined


20 #define 
	#__iovec_defined
 1

	)

22 #define 
	#__need_size_t


	)

23 #include 
	~<stddef.h
>

26 struct 
	siovec


28 void *
	miov_base
;

29 
size_t
 
	miov_len
;

	@/usr/include/bits/types/struct_osockaddr.h

1 #ifndef 
__osockaddr_defined


2 #define 
	#__osockaddr_defined
 1

	)

6 struct 
	sosockaddr


8 unsigned short int 
	msa_family
;

9 unsigned char 
	msa_data
[14];

	@/usr/include/bits/types/struct_timespec.h

2 #ifndef 
_STRUCT_TIMESPEC


3 #define 
	#_STRUCT_TIMESPEC
 1

	)

5 #include 
	~<bits/types.h
>

9 struct 
	stimespec


11 
__time_t
 
	mtv_sec
;

12 
__syscall_slong_t
 
	mtv_nsec
;

	@/usr/include/bits/types/time_t.h

1 #ifndef 
__time_t_defined


2 #define 
	#__time_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

7 typedef 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #ifndef 
__timer_t_defined


2 #define 
	#__timer_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

7 typedef 
__timer_t
 
	ttimer_t
;

	@/usr/include/bits/uintn-identity.h

19 #if !
defined
 
_NETINET_IN_H
 && !defined 
_ENDIAN_H


23 #ifndef 
_BITS_UINTN_IDENTITY_H


24 #define 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 #include 
	~<bits/types.h
>

32 static 
__inline
 
__uint16_t


33 
	$__uint16_identity
 (
__uint16_t
 
__x
)

35 return 
__x
;

36 
	}
}

38 static 
__inline
 
__uint32_t


39 
	$__uint32_identity
 (
__uint32_t
 
__x
)

41 return 
__x
;

42 
	}
}

44 static 
__inline
 
__uint64_t


45 
	$__uint64_identity
 (
__uint64_t
 
__x
)

47 return 
__x
;

48 
	}
}

	@/usr/include/endian.h

18 #ifndef 
_ENDIAN_H


19 #define 
	#_ENDIAN_H
 1

	)

21 #include 
	~<features.h
>

31 #define 
	#__LITTLE_ENDIAN
 1234

	)

32 #define 
	#__BIG_ENDIAN
 4321

	)

33 #define 
	#__PDP_ENDIAN
 3412

	)

36 #include 
	~<bits/endian.h
>

40 #ifndef 
__FLOAT_WORD_ORDER


41 #define 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 #define 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 #define 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 #define 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 #define 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


52 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) LO, 
	)
HI

53 #elif 
__BYTE_ORDER
 == 
__BIG_ENDIAN


54 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) HI, 
	)
LO

58 #if 
defined
 
__USE_MISC
 && !defined 
__ASSEMBLER__


60 #include 
	~<bits/byteswap.h
>

61 #include 
	~<bits/uintn-identity.h
>

63 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


64 #define 
	#htobe16
(
x
) 
	`__bswap_16
 (x)

	)

65 #define 
	#htole16
(
x
) 
	`__uint16_identity
 (x)

	)

66 #define 
	#be16toh
(
x
) 
	`__bswap_16
 (x)

	)

67 #define 
	#le16toh
(
x
) 
	`__uint16_identity
 (x)

	)

69 #define 
	#htobe32
(
x
) 
	`__bswap_32
 (x)

	)

70 #define 
	#htole32
(
x
) 
	`__uint32_identity
 (x)

	)

71 #define 
	#be32toh
(
x
) 
	`__bswap_32
 (x)

	)

72 #define 
	#le32toh
(
x
) 
	`__uint32_identity
 (x)

	)

74 #define 
	#htobe64
(
x
) 
	`__bswap_64
 (x)

	)

75 #define 
	#htole64
(
x
) 
	`__uint64_identity
 (x)

	)

76 #define 
	#be64toh
(
x
) 
	`__bswap_64
 (x)

	)

77 #define 
	#le64toh
(
x
) 
	`__uint64_identity
 (x)

	)

80 #define 
	#htobe16
(
x
) 
	`__uint16_identity
 (x)

	)

81 #define 
	#htole16
(
x
) 
	`__bswap_16
 (x)

	)

82 #define 
	#be16toh
(
x
) 
	`__uint16_identity
 (x)

	)

83 #define 
	#le16toh
(
x
) 
	`__bswap_16
 (x)

	)

85 #define 
	#htobe32
(
x
) 
	`__uint32_identity
 (x)

	)

86 #define 
	#htole32
(
x
) 
	`__bswap_32
 (x)

	)

87 #define 
	#be32toh
(
x
) 
	`__uint32_identity
 (x)

	)

88 #define 
	#le32toh
(
x
) 
	`__bswap_32
 (x)

	)

90 #define 
	#htobe64
(
x
) 
	`__uint64_identity
 (x)

	)

91 #define 
	#htole64
(
x
) 
	`__bswap_64
 (x)

	)

92 #define 
	#be64toh
(
x
) 
	`__uint64_identity
 (x)

	)

93 #define 
	#le64toh
(
x
) 
	`__bswap_64
 (x)

	)

	@/usr/include/features.h

18 #ifndef 
_FEATURES_H


19 #define 
	#_FEATURES_H
 1

	)

119 #undef 
__USE_ISOC11


120 #undef 
__USE_ISOC99


121 #undef 
__USE_ISOC95


122 #undef 
__USE_ISOCXX11


123 #undef 
__USE_POSIX


124 #undef 
__USE_POSIX2


125 #undef 
__USE_POSIX199309


126 #undef 
__USE_POSIX199506


127 #undef 
__USE_XOPEN


128 #undef 
__USE_XOPEN_EXTENDED


129 #undef 
__USE_UNIX98


130 #undef 
__USE_XOPEN2K


131 #undef 
__USE_XOPEN2KXSI


132 #undef 
__USE_XOPEN2K8


133 #undef 
__USE_XOPEN2K8XSI


134 #undef 
__USE_LARGEFILE


135 #undef 
__USE_LARGEFILE64


136 #undef 
__USE_FILE_OFFSET64


137 #undef 
__USE_MISC


138 #undef 
__USE_ATFILE


139 #undef 
__USE_GNU


140 #undef 
__USE_FORTIFY_LEVEL


141 #undef 
__KERNEL_STRICT_NAMES


142 #undef 
__GLIBC_USE_DEPRECATED_GETS


143 #undef 
__GLIBC_USE_DEPRECATED_SCANF


147 #ifndef 
_LOOSE_KERNEL_NAMES


148 #define 
	#__KERNEL_STRICT_NAMES


	)

158 #if 
defined
 
__GNUC__
 && defined 
__GNUC_MINOR__


159 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) \

160 ((
__GNUC__
 << 16) + 
__GNUC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

162 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) 0

	)

169 #if 
defined
 
__clang_major__
 && defined 
__clang_minor__


170 #define 
	#__glibc_clang_prereq
(
maj
, 
min
) \

171 ((
__clang_major__
 << 16) + 
__clang_minor__
 >= ((
maj
) << 16) + (
min
))

	)

173 #define 
	#__glibc_clang_prereq
(
maj
, 
min
) 0

	)

177 #define 
	#__GLIBC_USE
(
F
) 
__GLIBC_USE_
 ## 
	)
F

183 #if (
defined
 
_BSD_SOURCE
 || defined 
_SVID_SOURCE
) \

184 && !
defined
 
	g_DEFAULT_SOURCE


186 #undef 
_DEFAULT_SOURCE


187 #define 
	#_DEFAULT_SOURCE
 1

	)

191 #ifdef 
_GNU_SOURCE


192 #undef 
_ISOC95_SOURCE


193 #define 
	#_ISOC95_SOURCE
 1

	)

194 #undef 
_ISOC99_SOURCE


195 #define 
	#_ISOC99_SOURCE
 1

	)

196 #undef 
_ISOC11_SOURCE


197 #define 
	#_ISOC11_SOURCE
 1

	)

198 #undef 
_POSIX_SOURCE


199 #define 
	#_POSIX_SOURCE
 1

	)

200 #undef 
_POSIX_C_SOURCE


201 #define 
	#_POSIX_C_SOURCE
 200809L

	)

202 #undef 
_XOPEN_SOURCE


203 #define 
	#_XOPEN_SOURCE
 700

	)

204 #undef 
_XOPEN_SOURCE_EXTENDED


205 #define 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

206 #undef 
_LARGEFILE64_SOURCE


207 #define 
	#_LARGEFILE64_SOURCE
 1

	)

208 #undef 
_DEFAULT_SOURCE


209 #define 
	#_DEFAULT_SOURCE
 1

	)

210 #undef 
_ATFILE_SOURCE


211 #define 
	#_ATFILE_SOURCE
 1

	)

216 #if (
defined
 
_DEFAULT_SOURCE
 \

217 || (!
defined
 
	g__STRICT_ANSI__
 \

218 && !
defined
 
	g_ISOC99_SOURCE
 && !defined 
	g_ISOC11_SOURCE
 \

219 && !
defined
 
	g_POSIX_SOURCE
 && !defined 
	g_POSIX_C_SOURCE
 \

220 && !
defined
 
	g_XOPEN_SOURCE
))

221 #undef 
_DEFAULT_SOURCE


222 #define 
	#_DEFAULT_SOURCE
 1

	)

226 #if (
defined
 
_ISOC11_SOURCE
 \

227 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

228 #define 
	#__USE_ISOC11
 1

	)

232 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

233 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

234 #define 
	#__USE_ISOC99
 1

	)

238 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

239 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

240 #define 
	#__USE_ISOC95
 1

	)

243 #ifdef 
__cplusplus


245 #if 
__cplusplus
 >= 201703L

246 #define 
	#__USE_ISOC11
 1

	)

250 #if 
__cplusplus
 >= 201103L || 
defined
 
__GXX_EXPERIMENTAL_CXX0X__


251 #define 
	#__USE_ISOCXX11
 1

	)

252 #define 
	#__USE_ISOC99
 1

	)

259 #ifdef 
_DEFAULT_SOURCE


260 #if !
defined
 
_POSIX_SOURCE
 && !defined 
_POSIX_C_SOURCE


261 #define 
	#__USE_POSIX_IMPLICITLY
 1

	)

263 #undef 
_POSIX_SOURCE


264 #define 
	#_POSIX_SOURCE
 1

	)

265 #undef 
_POSIX_C_SOURCE


266 #define 
	#_POSIX_C_SOURCE
 200809L

	)

269 #if ((!
defined
 
__STRICT_ANSI__
 \

270 || (
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

271 && !
defined
 
_POSIX_SOURCE
 && !defined 
_POSIX_C_SOURCE
)

272 #define 
	#_POSIX_SOURCE
 1

	)

273 #if 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

274 #define 
	#_POSIX_C_SOURCE
 2

	)

275 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

276 #define 
	#_POSIX_C_SOURCE
 199506L

	)

277 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

278 #define 
	#_POSIX_C_SOURCE
 200112L

	)

280 #define 
	#_POSIX_C_SOURCE
 200809L

	)

282 #define 
	#__USE_POSIX_IMPLICITLY
 1

	)

291 #if ((!
defined
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

292 && (
defined
 
_REENTRANT
 || defined 
_THREAD_SAFE
))

293 #define 
	#_POSIX_SOURCE
 1

	)

294 #undef 
_POSIX_C_SOURCE


295 #define 
	#_POSIX_C_SOURCE
 199506L

	)

298 #if (
defined
 
_POSIX_SOURCE
 \

299 || (
defined
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

300 || 
defined
 
_XOPEN_SOURCE
)

301 #define 
	#__USE_POSIX
 1

	)

304 #if 
defined
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 2 || defined 
_XOPEN_SOURCE


305 #define 
	#__USE_POSIX2
 1

	)

308 #if 
defined
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

309 #define 
	#__USE_POSIX199309
 1

	)

312 #if 
defined
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

313 #define 
	#__USE_POSIX199506
 1

	)

316 #if 
defined
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

317 #define 
	#__USE_XOPEN2K
 1

	)

318 #undef 
__USE_ISOC95


319 #define 
	#__USE_ISOC95
 1

	)

320 #undef 
__USE_ISOC99


321 #define 
	#__USE_ISOC99
 1

	)

324 #if 
defined
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

325 #define 
	#__USE_XOPEN2K8
 1

	)

326 #undef 
_ATFILE_SOURCE


327 #define 
	#_ATFILE_SOURCE
 1

	)

330 #ifdef 
_XOPEN_SOURCE


331 #define 
	#__USE_XOPEN
 1

	)

332 #if (
_XOPEN_SOURCE
 - 0) >= 500

333 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

334 #define 
	#__USE_UNIX98
 1

	)

335 #undef 
_LARGEFILE_SOURCE


336 #define 
	#_LARGEFILE_SOURCE
 1

	)

337 #if (
_XOPEN_SOURCE
 - 0) >= 600

338 #if (
_XOPEN_SOURCE
 - 0) >= 700

339 #define 
	#__USE_XOPEN2K8
 1

	)

340 #define 
	#__USE_XOPEN2K8XSI
 1

	)

342 #define 
	#__USE_XOPEN2K
 1

	)

343 #define 
	#__USE_XOPEN2KXSI
 1

	)

344 #undef 
__USE_ISOC95


345 #define 
	#__USE_ISOC95
 1

	)

346 #undef 
__USE_ISOC99


347 #define 
	#__USE_ISOC99
 1

	)

350 #ifdef 
_XOPEN_SOURCE_EXTENDED


351 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

356 #ifdef 
_LARGEFILE_SOURCE


357 #define 
	#__USE_LARGEFILE
 1

	)

360 #ifdef 
_LARGEFILE64_SOURCE


361 #define 
	#__USE_LARGEFILE64
 1

	)

364 #if 
defined
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

365 #define 
	#__USE_FILE_OFFSET64
 1

	)

368 #if 
defined
 
_DEFAULT_SOURCE


369 #define 
	#__USE_MISC
 1

	)

372 #ifdef 
_ATFILE_SOURCE


373 #define 
	#__USE_ATFILE
 1

	)

376 #ifdef 
_GNU_SOURCE


377 #define 
	#__USE_GNU
 1

	)

380 #if 
defined
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

381 #if !
defined
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

382 #warning 
_FORTIFY_SOURCE
 
requires
 
compiling
 
with
 
optimization
 (-
O
)

383 #elif !
__GNUC_PREREQ
 (4, 1)

384 #warning 
_FORTIFY_SOURCE
 
requires
 
GCC
 4.1 
or
 
later


385 #elif 
_FORTIFY_SOURCE
 > 1

386 #define 
	#__USE_FORTIFY_LEVEL
 2

	)

388 #define 
	#__USE_FORTIFY_LEVEL
 1

	)

391 #ifndef 
__USE_FORTIFY_LEVEL


392 #define 
	#__USE_FORTIFY_LEVEL
 0

	)

399 #if 
defined
 
__cplusplus
 ? __cplusplus >= 201402L : defined 
__USE_ISOC11


400 #define 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

402 #define 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

417 #if 
defined
 
__USE_GNU
 && \

418 (
defined
 
	g__cplusplus
 \

419 ? (
	g__cplusplus
 < 201103L && !
defined
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

420 : (!
defined
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L))

421 #define 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

423 #define 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

428 #include 
	~<stdc-predef.h
>

436 #undef 
__GNU_LIBRARY__


437 #define 
	#__GNU_LIBRARY__
 6

	)

441 #define 
	#__GLIBC__
 2

	)

442 #define 
	#__GLIBC_MINOR__
 29

	)

444 #define 
	#__GLIBC_PREREQ
(
maj
, 
min
) \

445 ((
__GLIBC__
 << 16) + 
__GLIBC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

448 #ifndef 
__ASSEMBLER__


449 #ifndef 
_SYS_CDEFS_H


450 #include 
	~<sys/cdefs.h
>

455 #if 
defined
 
__USE_FILE_OFFSET64
 && !defined 
__REDIRECT


456 #define 
	#__USE_LARGEFILE
 1

	)

457 #define 
	#__USE_LARGEFILE64
 1

	)

463 #if 
__GNUC_PREREQ
 (2, 7) && 
defined
 
__OPTIMIZE__
 \

464 && !
defined
 
	g__OPTIMIZE_SIZE__
 && !defined 
	g__NO_INLINE__
 \

465 && 
defined
 
	g__extern_inline


466 #define 
	#__USE_EXTERN_INLINES
 1

	)

474 #include 
	~<gnu/stubs.h
>

	@/usr/include/rpc/netdb.h

36 #ifndef 
_RPC_NETDB_H


37 #define 
	#_RPC_NETDB_H
 1

	)

39 #include 
	~<features.h
>

41 #define 
	#__need_size_t


	)

42 #include 
	~<stddef.h
>

44 
__BEGIN_DECLS


46 struct 
	srpcent


48 char *
	mr_name
;

49 char **
	mr_aliases
;

50 int 
	mr_number
;

53 extern void 
	$setrpcent
 (int 
__stayopen
) 
__THROW
;

54 extern void 
	$endrpcent
 (void) 
__THROW
;

55 extern struct 
rpcent
 *
	$getrpcbyname
 (const char *
__name
) 
__THROW
;

56 extern struct 
rpcent
 *
	$getrpcbynumber
 (int 
__number
) 
__THROW
;

57 extern struct 
rpcent
 *
	$getrpcent
 (void) 
__THROW
;

59 #ifdef 
__USE_MISC


60 extern int 
	$getrpcbyname_r
 (const char *
__name
, struct 
rpcent
 *
__result_buf
,

61 char *
__buffer
, 
size_t
 
__buflen
,

62 struct 
rpcent
 **
__result
) 
__THROW
;

64 extern int 
	$getrpcbynumber_r
 (int 
__number
, struct 
rpcent
 *
__result_buf
,

65 char *
__buffer
, 
size_t
 
__buflen
,

66 struct 
rpcent
 **
__result
) 
__THROW
;

68 extern int 
	$getrpcent_r
 (struct 
rpcent
 *
__result_buf
, char *
__buffer
,

69 
size_t
 
__buflen
, struct 
rpcent
 **
__result
) 
__THROW
;

72 
__END_DECLS


	@/usr/include/strings.h

18 #ifndef 
_STRINGS_H


19 #define 
	#_STRINGS_H
 1

	)

21 #include 
	~<features.h
>

22 #define 
	#__need_size_t


	)

23 #include 
	~<stddef.h
>

26 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (4, 4)

27 #define 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #if 
defined
 
__USE_MISC
 || !defined 
__USE_XOPEN2K8


34 extern int 
	$bcmp
 (const void *
__s1
, const void *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

38 extern void 
	$bcopy
 (const void *
__src
, void *
__dest
, 
size_t
 
__n
)

39 
__THROW
 
	`__nonnull
 ((1, 2));

42 extern void 
	$bzero
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

45 #ifdef 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 extern char *
	`index
 (char *
__s
, int 
__c
)

49 
__THROW
 
	`__asm
 ("index") 
__attribute_pure__
 
	`__nonnull
 ((1));

50 extern const char *
	`index
 (const char *
__s
, int 
__c
)

51 
__THROW
 
	`__asm
 ("index") 
__attribute_pure__
 
	`__nonnull
 ((1));

53 #if 
defined
 
__OPTIMIZE__


54 
__extern_always_inline
 char *

55 
	`index
 (char *
__s
, int 
__c
) 
__THROW


57 return 
	`__builtin_index
 (
__s
, 
__c
);

60 
__extern_always_inline
 const char *

61 
	`index
 (const char *
__s
, int 
__c
) 
__THROW


63 return 
	`__builtin_index
 (
__s
, 
__c
);

66 
	}
}

68 extern char *
	$index
 (const char *
__s
, int 
__c
)

69 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

73 #ifdef 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 extern char *
	`rindex
 (char *
__s
, int 
__c
)

77 
__THROW
 
	`__asm
 ("rindex") 
__attribute_pure__
 
	`__nonnull
 ((1));

78 extern const char *
	`rindex
 (const char *
__s
, int 
__c
)

79 
__THROW
 
	`__asm
 ("rindex") 
__attribute_pure__
 
	`__nonnull
 ((1));

81 #if 
defined
 
__OPTIMIZE__


82 
__extern_always_inline
 char *

83 
	`rindex
 (char *
__s
, int 
__c
) 
__THROW


85 return 
	`__builtin_rindex
 (
__s
, 
__c
);

88 
__extern_always_inline
 const char *

89 
	`rindex
 (const char *
__s
, int 
__c
) 
__THROW


91 return 
	`__builtin_rindex
 (
__s
, 
__c
);

94 
	}
}

96 extern char *
	$rindex
 (const char *
__s
, int 
__c
)

97 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

101 #if 
defined
 
__USE_MISC
 || !defined 
__USE_XOPEN2K8
 || defined 
__USE_XOPEN2K8XSI


104 extern int 
	$ffs
 (int 
__i
) 
__THROW
 
__attribute_const__
;

109 #ifdef 
__USE_MISC


110 extern int 
	$ffsl
 (long int 
__l
) 
__THROW
 
__attribute_const__
;

111 
__extension__
 extern int 
	$ffsll
 (long long int 
__ll
)

112 
__THROW
 
__attribute_const__
;

116 extern int 
	$strcasecmp
 (const char *
__s1
, const char *
__s2
)

117 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

120 extern int 
	$strncasecmp
 (const char *
__s1
, const char *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 #include 
	~<bits/types/locale_t.h
>

128 extern int 
	$strcasecmp_l
 (const char *
__s1
, const char *
__s2
, 
locale_t
 
__loc
)

129 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 3));

133 extern int 
	$strncasecmp_l
 (const char *
__s1
, const char *
__s2
,

134 
size_t
 
__n
, 
locale_t
 
__loc
)

135 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 4));

138 
__END_DECLS


140 #if 
	`__GNUC_PREREQ
 (3,4) && 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
defined
 
__fortify_function


143 #if 
defined
 
__USE_MISC
 || !defined 
__USE_XOPEN2K8


144 #include 
	~<bits/strings_fortified.h
>

	@/usr/include/sys/select.h

21 #ifndef 
_SYS_SELECT_H


22 #define 
	#_SYS_SELECT_H
 1

	)

24 #include 
	~<features.h
>

27 #include 
	~<bits/types.h
>

30 #include 
	~<bits/select.h
>

33 #include 
	~<bits/types/sigset_t.h
>

36 #include 
	~<bits/types/time_t.h
>

37 #include 
	~<bits/types/struct_timeval.h
>

38 #ifdef 
__USE_XOPEN2K


39 #include 
	~<bits/types/struct_timespec.h
>

42 #ifndef 
__suseconds_t_defined


43 typedef 
__suseconds_t
 
	tsuseconds_t
;

44 #define 
	#__suseconds_t_defined


	)

49 typedef long int 
	t__fd_mask
;

52 #undef 
__NFDBITS


54 #define 
	#__NFDBITS
 (8 * (int) sizeof (
__fd_mask
))

	)

55 #define 
	#__FD_ELT
(
d
) ((d) / 
__NFDBITS
)

	)

56 #define 
	#__FD_MASK
(
d
) ((
__fd_mask
) (1UL << ((d) % 
__NFDBITS
)))

	)

63 #ifdef 
__USE_XOPEN


64 
__fd_mask
 
	mfds_bits
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 #define 
	#__FDS_BITS
(
set
) ((set)->
fds_bits
)

	)

67 
__fd_mask
 
	m__fds_bits
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 #define 
	#__FDS_BITS
(
set
) ((set)->
__fds_bits
)

	)

70 } 
	tfd_set
;

73 #define 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifdef 
__USE_MISC


77 typedef 
__fd_mask
 
	tfd_mask
;

80 #define 
	#NFDBITS
 
__NFDBITS


	)

85 #define 
	#FD_SET
(
fd
, 
fdsetp
) 
	`__FD_SET
 (fd, fdsetp)

	)

86 #define 
	#FD_CLR
(
fd
, 
fdsetp
) 
	`__FD_CLR
 (fd, fdsetp)

	)

87 #define 
	#FD_ISSET
(
fd
, 
fdsetp
) 
	`__FD_ISSET
 (fd, fdsetp)

	)

88 #define 
	#FD_ZERO
(
fdsetp
) 
	`__FD_ZERO
 (fdsetp)

	)

91 
__BEGIN_DECLS


101 extern int 
select
 (int 
__nfds
, 
fd_set
 *
__restrict
 
__readfds
,

102 
fd_set
 *
__restrict
 
__writefds
,

103 
fd_set
 *
__restrict
 
__exceptfds
,

104 struct 
timeval
 *
__restrict
 
__timeout
);

106 #ifdef 
__USE_XOPEN2K


113 extern int 
pselect
 (int 
__nfds
, 
fd_set
 *
__restrict
 
__readfds
,

114 
fd_set
 *
__restrict
 
__writefds
,

115 
fd_set
 *
__restrict
 
__exceptfds
,

116 const struct 
timespec
 *
__restrict
 
__timeout
,

117 const 
__sigset_t
 *
__restrict
 
__sigmask
);

122 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__GNUC__


123 #include 
	~<bits/select2.h
>

126 
	g__END_DECLS


	@/usr/include/asm/socket.h

1 #include 
	~<asm-generic/socket.h
>

	@/usr/include/bits/endian.h

3 #ifndef 
_ENDIAN_H


7 #define 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/getopt_core.h

20 #ifndef 
_GETOPT_CORE_H


21 #define 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 extern char *
optarg
;

50 extern int 
optind
;

55 extern int 
opterr
;

59 extern int 
optopt
;

91 extern int 
	$getopt
 (int 
___argc
, char *const *
___argv
, const char *
__shortopts
)

92 
__THROW
 
	`__nonnull
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/select.h

18 #ifndef 
_SYS_SELECT_H


22 #include 
	~<bits/wordsize.h
>

25 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2

27 #if 
__WORDSIZE
 == 64

28 #define 
	#__FD_ZERO_STOS
 "stosq"

	)

30 #define 
	#__FD_ZERO_STOS
 "stosl"

	)

33 #define 
	#__FD_ZERO
(
fdsp
) \

35 int 
__d0
, 
__d1
; \

36 
__asm__
 
	`__volatile__
 ("cld; rep; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" (sizeof (
fd_set
) \

39 / sizeof (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fdsp
)[0]) \

42 } while (0)

	)

48 #define 
	#__FD_ZERO
(
set
) \

50 unsigned int 
__i
; \

51 
fd_set
 *
__arr
 = (
set
); \

52 for (
__i
 = 0; __i < sizeof (
fd_set
) / sizeof (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__arr
)[
__i
] = 0; \

54 } while (0)

	)

58 #define 
	#__FD_SET
(
d
, 
set
) \

59 ((void) (
	`__FDS_BITS
 (
set
)[
	`__FD_ELT
 (
d
)] |= 
	`__FD_MASK
 (d)))

	)

60 #define 
	#__FD_CLR
(
d
, 
set
) \

61 ((void) (
	`__FDS_BITS
 (
set
)[
	`__FD_ELT
 (
d
)] &= ~
	`__FD_MASK
 (d)))

	)

62 #define 
	#__FD_ISSET
(
d
, 
set
) \

63 ((
	`__FDS_BITS
 (
set
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)) != 0)

	)

	@/usr/include/bits/select2.h

19 #ifndef 
_SYS_SELECT_H


24 extern long int 
__fdelt_chk
 (long int 
__d
);

25 extern long int 
	$__fdelt_warn
 (long int 
__d
)

26 
	`__warnattr
 ("bit outside of fd_set selected");

27 #undef 
__FD_ELT


28 #define 
	#__FD_ELT
(
d
) \

29 
__extension__
 \

30 ({ long int 
__d
 = (
d
); \

31 (
	`__builtin_constant_p
 (
__d
) \

32 ? (0 <= 
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdelt_warn
 (
__d
)) \

35 : 
	`__fdelt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sockaddr.h

23 #ifndef 
_BITS_SOCKADDR_H


24 #define 
	#_BITS_SOCKADDR_H
 1

	)

28 typedef unsigned short int 
	tsa_family_t
;

34 #define 
	#__SOCKADDR_COMMON
(
sa_prefix
) \

35 
sa_family_t
 
sa_prefix
##
family


	)

37 #define 
	#__SOCKADDR_COMMON_SIZE
 (sizeof (unsigned short int))

	)

40 #define 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket_type.h

19 #ifndef 
_SYS_SOCKET_H


24 enum 
	e__socket_type


26 
	mSOCK_STREAM
 = 1,

28 #define 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 #define 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 #define 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 #define 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 #define 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 #define 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 #define 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 #define 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 #define 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/strings_fortified.h

19 #ifndef 
__STRINGS_FORTIFIED


20 #define 
	#__STRINGS_FORTIFIED
 1

	)

22 
__fortify_function
 void

23 
__NTH
 (
	$bcopy
 (const void *
__src
, void *
__dest
, 
size_t
 
__len
))

25 (void) 
	`__builtin___memmove_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

26 
	}
}

28 
__fortify_function
 void

29 
__NTH
 (
	$bzero
 (void *
__dest
, 
size_t
 
__len
))

31 (void) 
	`__builtin___memset_chk
 (
__dest
, '\0', 
__len
, 
	`__bos0
 (__dest));

32 
	}
}

	@/usr/include/bits/thread-shared-types.h

19 #ifndef 
_THREAD_SHARED_TYPES_H


20 #define 
	#_THREAD_SHARED_TYPES_H
 1

	)

77 #include 
	~<bits/pthreadtypes-arch.h
>

81 #if !
__PTHREAD_MUTEX_USE_UNION


82 typedef struct 
	s__pthread_internal_list


84 struct 
__pthread_internal_list
 *
	m__prev
;

85 struct 
__pthread_internal_list
 *
	m__next
;

86 } 
	t__pthread_list_t
;

88 typedef struct 
	s__pthread_internal_slist


90 struct 
__pthread_internal_slist
 *
	m__next
;

91 } 
	t__pthread_slist_t
;

95 #if 
__PTHREAD_MUTEX_LOCK_ELISION


96 #if !
__PTHREAD_MUTEX_USE_UNION


97 #define 
	#__PTHREAD_SPINS_DATA
 \

98 short 
__spins
; \

99 short 
__elision


	)

100 #define 
	#__PTHREAD_SPINS
 0, 0

	)

102 #define 
	#__PTHREAD_SPINS_DATA
 \

105 short 
__espins
; \

106 short 
__eelision
; \

107 } 
__elision_data


	)

108 #define 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

109 #define 
	#__spins
 
__elision_data
.
__espins


	)

110 #define 
	#__elision
 
__elision_data
.
__eelision


	)

113 #define 
	#__PTHREAD_SPINS_DATA
 int 
__spins


	)

115 #define 
	#__PTHREAD_SPINS
 0

	)

118 struct 
	s__pthread_mutex_s


120 int 
__lock
 
	m__LOCK_ALIGNMENT
;

121 unsigned int 
	m__count
;

122 int 
	m__owner
;

123 #if !
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


124 unsigned int 
	m__nusers
;

148 int 
	m__kind
;

149 
	m__PTHREAD_COMPAT_PADDING_MID


150 #if 
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


151 unsigned int 
	m__nusers
;

153 #if !
__PTHREAD_MUTEX_USE_UNION


154 
	m__PTHREAD_SPINS_DATA
;

155 
__pthread_list_t
 
	m__list
;

156 #define 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

158 
__extension__
 union

160 
	m__PTHREAD_SPINS_DATA
;

161 
__pthread_slist_t
 
	m__list
;

163 #define 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

165 
	m__PTHREAD_COMPAT_PADDING_END


171 struct 
	s__pthread_cond_s


173 
__extension__
 union

175 
__extension__
 unsigned long long int 
	m__wseq
;

178 unsigned int 
	m__low
;

179 unsigned int 
	m__high
;

180 } 
	m__wseq32
;

182 
__extension__
 union

184 
__extension__
 unsigned long long int 
	m__g1_start
;

187 unsigned int 
	m__low
;

188 unsigned int 
	m__high
;

189 } 
	m__g1_start32
;

191 unsigned int 
	m__g_refs
[2] 
	m__LOCK_ALIGNMENT
;

192 unsigned int 
	m__g_size
[2];

193 unsigned int 
	m__g1_orig_size
;

194 unsigned int 
	m__wrefs
;

195 unsigned int 
	m__g_signals
[2];

	@/usr/include/bits/time64.h

19 #ifndef 
_BITS_TYPES_H


23 #ifndef 
_BITS_TIME64_H


24 #define 
	#_BITS_TIME64_H
 1

	)

28 #if 
__TIMESIZE
 == 64

30 #define 
	#__TIME64_T_TYPE
 
__TIME_T_TYPE


	)

33 #define 
	#__TIME64_T_TYPE
 
__SQUAD_TYPE


	)

	@/usr/include/bits/timesize.h

19 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


21 #define 
	#__TIMESIZE
 64

	)

24 #define 
	#__TIMESIZE
 
__WORDSIZE


	)

	@/usr/include/bits/types/__locale_t.h

20 #ifndef 
_BITS_TYPES___LOCALE_T_H


21 #define 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

28 struct 
	s__locale_struct


31 struct 
__locale_data
 *
	m__locales
[13];

34 const unsigned short int *
	m__ctype_b
;

35 const int *
	m__ctype_tolower
;

36 const int *
	m__ctype_toupper
;

39 const char *
	m__names
[13];

42 typedef struct 
__locale_struct
 *
	t__locale_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #ifndef 
____mbstate_t_defined


2 #define 
	#____mbstate_t_defined
 1

	)

8 #ifndef 
__WINT_TYPE__


9 #define 
	#__WINT_TYPE__
 unsigned int

	)

15 int 
	m__count
;

18 
__WINT_TYPE__
 
	m__wch
;

19 char 
	m__wchb
[4];

20 } 
	m__value
;

21 } 
	t__mbstate_t
;

	@/usr/include/bits/types/__sigval_t.h

19 #ifndef 
____sigval_t_defined


20 #define 
	#____sigval_t_defined


	)

23 #ifdef 
__USE_POSIX199309


24 union 
	usigval


26 int 
	msival_int
;

27 void *
	msival_ptr
;

30 typedef union 
sigval
 
	t__sigval_t
;

32 union 
	u__sigval


34 int 
	m__sival_int
;

35 void *
	m__sival_ptr
;

38 typedef union 
__sigval
 
	t__sigval_t
;

	@/usr/include/bits/types/sigset_t.h

1 #ifndef 
__sigset_t_defined


2 #define 
	#__sigset_t_defined
 1

	)

4 #include 
	~<bits/types/__sigset_t.h
>

7 typedef 
__sigset_t
 
	tsigset_t
;

	@/usr/include/bits/types/struct_timeval.h

1 #ifndef 
__timeval_defined


2 #define 
	#__timeval_defined
 1

	)

4 #include 
	~<bits/types.h
>

8 struct 
	stimeval


10 
__time_t
 
	mtv_sec
;

11 
__suseconds_t
 
	mtv_usec
;

	@/usr/include/bits/typesizes.h

19 #ifndef 
_BITS_TYPES_H


23 #ifndef 
_BITS_TYPESIZES_H


24 #define 
	#_BITS_TYPESIZES_H
 1

	)

30 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


31 #define 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 #define 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 #define 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 #define 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 #define 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 #define 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 #define 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 #define 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 #define 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 #define 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifdef 
__x86_64__


45 #define 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 #define 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 #define 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 #define 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 #define 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 #define 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 #define 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 #define 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 #define 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 #define 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 #define 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 #define 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 #define 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 #define 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 #define 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 #define 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 #define 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 #define 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 #define 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 #define 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 #define 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 #define 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 #define 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 #define 
	#__TIMER_T_TYPE
 void *

	)

71 #define 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 #define 
	#__FSID_T_TYPE
 struct { int 
__val
[2]; }

	)

73 #define 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 #define 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifdef 
__x86_64__


80 #define 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 #define 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 #define 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

88 #define 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

92 #define 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #if 
defined
 
__x86_64__
 && !defined 
__ILP32__


4 #define 
	#__WORDSIZE
 64

	)

6 #define 
	#__WORDSIZE
 32

	)

7 #define 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 #define 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifdef 
__x86_64__


12 #define 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 #define 
	#__SYSCALL_WORDSIZE
 64

	)

16 #define 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/gnu/stubs.h

6 #if !
defined
 
__x86_64__


7 #include 
	~<gnu/stubs-32.h
>

9 #if 
defined
 
__x86_64__
 && defined 
__LP64__


10 #include 
	~<gnu/stubs-64.h
>

12 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


13 #include 
	~<gnu/stubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #ifndef 
_STDC_PREDEF_H


19 #define 
	#_STDC_PREDEF_H
 1

	)

36 #ifdef 
__GCC_IEC_559


37 #if 
__GCC_IEC_559
 > 0

38 #define 
	#__STDC_IEC_559__
 1

	)

41 #define 
	#__STDC_IEC_559__
 1

	)

44 #ifdef 
__GCC_IEC_559_COMPLEX


45 #if 
__GCC_IEC_559_COMPLEX
 > 0

46 #define 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 #define 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 #define 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/sys/cdefs.h

18 #ifndef 
_SYS_CDEFS_H


19 #define 
	#_SYS_CDEFS_H
 1

	)

22 #ifndef 
_FEATURES_H


23 #include 
	~<features.h
>

29 #if 
defined
 
__GNUC__
 && !defined 
__STDC__


34 #undef 
__P


35 #undef 
__PMT


37 #ifdef 
__GNUC__


41 #if 
__GNUC_PREREQ
 (4, 6) && !
defined
 
_LIBC


42 #define 
	#__LEAF
 , 
__leaf__


	)

43 #define 
	#__LEAF_ATTR
 
	`__attribute__
 ((
__leaf__
))

	)

45 #define 
	#__LEAF


	)

46 #define 
	#__LEAF_ATTR


	)

54 #if !
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (3, 3)

55 #define 
	#__THROW
 
	`__attribute__
 ((
__nothrow__
 
__LEAF
))

	)

56 #define 
	#__THROWNL
 
	`__attribute__
 ((
__nothrow__
))

	)

57 #define 
	#__NTH
(
fct
) 
	`__attribute__
 ((
__nothrow__
 
__LEAF
)) 
	)
fct

58 #define 
	#__NTHNL
(
fct
) 
	`__attribute__
 ((
__nothrow__
)) 
	)
fct

60 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (2,8)

61 #define 
	#__THROW
 
	`throw
 ()

	)

62 #define 
	#__THROWNL
 
	`throw
 ()

	)

63 #define 
	#__NTH
(
fct
) 
__LEAF_ATTR
 fct 
	`throw
 ()

	)

64 #define 
	#__NTHNL
(
fct
) fct 
	`throw
 ()

	)

66 #define 
	#__THROW


	)

67 #define 
	#__THROWNL


	)

68 #define 
	#__NTH
(
fct
) 
	)
fct

69 #define 
	#__NTHNL
(
fct
) 
	)
fct

75 #if (
defined
 
__cplusplus
 \

76 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

77 #define 
	#__inline
 
inline


	)

79 #define 
	#__inline


	)

82 #define 
	#__THROW


	)

83 #define 
	#__THROWNL


	)

84 #define 
	#__NTH
(
fct
) 
	)
fct

91 #if 
defined
 
__clang__
 && defined 
__has_extension


92 #define 
	#__glibc_clang_has_extension
(
ext
) 
	`__has_extension
 (ext)

	)

94 #define 
	#__glibc_clang_has_extension
(
ext
) 0

	)

99 #define 
	#__P
(
args
) 
	)
args

100 #define 
	#__PMT
(
args
) 
	)
args

105 #define 
	#__CONCAT
(
x
,
y
) x ## 
	)
y

106 #define 
	#__STRING
(
x
) #x

	)

109 #define 
	#__ptr_t
 void *

	)

113 #ifdef 
__cplusplus


114 #define 
	#__BEGIN_DECLS
 extern "C" {

	)

115 #define 
	#__END_DECLS
 }

	)

117 #define 
	#__BEGIN_DECLS


	)

118 #define 
	#__END_DECLS


	)

123 #define 
	#__bos
(
ptr
) 
	`__builtin_object_size
 (ptr, 
__USE_FORTIFY_LEVEL
 > 1)

	)

124 #define 
	#__bos0
(
ptr
) 
	`__builtin_object_size
 (ptr, 0)

	)

126 #if 
__GNUC_PREREQ
 (4,3)

127 #define 
	#__warndecl
(
name
, 
msg
) \

128 extern void 
	`name
 (void) 
	`__attribute__
((
	`__warning__
 (
msg
)))

	)

129 #define 
	#__warnattr
(
msg
) 
	`__attribute__
((
	`__warning__
 (msg)))

	)

130 #define 
	#__errordecl
(
name
, 
msg
) \

131 extern void 
	`name
 (void) 
	`__attribute__
((
	`__error__
 (
msg
)))

	)

133 #define 
	#__warndecl
(
name
, 
msg
) extern void 
	`name
 (void)

	)

134 #define 
	#__warnattr
(
msg
)

	)

135 #define 
	#__errordecl
(
name
, 
msg
) extern void 
	`name
 (void)

	)

142 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

143 #define 
	#__flexarr
 []

	)

144 #define 
	#__glibc_c99_flexarr_available
 1

	)

145 #elif 
__GNUC_PREREQ
 (2,97)

148 #define 
	#__flexarr
 []

	)

149 #define 
	#__glibc_c99_flexarr_available
 1

	)

150 #elif 
defined
 
__GNUC__


153 #define 
	#__flexarr
 [0]

	)

154 #define 
	#__glibc_c99_flexarr_available
 1

	)

157 #define 
	#__flexarr
 [1]

	)

158 #define 
	#__glibc_c99_flexarr_available
 0

	)

172 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2

174 #define 
	#__REDIRECT
(
name
, 
proto
, 
alias
) name proto 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

175 #ifdef 
__cplusplus


176 #define 
	#__REDIRECT_NTH
(
name
, 
proto
, 
alias
) \

177 
name
 
proto
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

178 #define 
	#__REDIRECT_NTHNL
(
name
, 
proto
, 
alias
) \

179 
name
 
proto
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

181 #define 
	#__REDIRECT_NTH
(
name
, 
proto
, 
alias
) \

182 
name
 
proto
 
	`__asm__
 (
	`__ASMNAME
 (#alias)) 
__THROW


	)

183 #define 
	#__REDIRECT_NTHNL
(
name
, 
proto
, 
alias
) \

184 
name
 
proto
 
	`__asm__
 (
	`__ASMNAME
 (#alias)) 
__THROWNL


	)

186 #define 
	#__ASMNAME
(
cname
) 
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, cname)

	)

187 #define 
	#__ASMNAME2
(
prefix
, 
cname
) 
	`__STRING
 (prefix) 
	)
cname

200 #if !
defined
 
__GNUC__
 || __GNUC__ < 2

201 #define 
	#__attribute__
(
xyz
)

	)

207 #if 
__GNUC_PREREQ
 (2,96)

208 #define 
	#__attribute_malloc__
 
	`__attribute__
 ((
__malloc__
))

	)

210 #define 
	#__attribute_malloc__


	)

215 #if 
__GNUC_PREREQ
 (4, 3)

216 #define 
	#__attribute_alloc_size__
(
params
) \

217 
	`__attribute__
 ((
__alloc_size__
 
params
))

	)

219 #define 
	#__attribute_alloc_size__
(
params
)

	)

225 #if 
__GNUC_PREREQ
 (2,96)

226 #define 
	#__attribute_pure__
 
	`__attribute__
 ((
__pure__
))

	)

228 #define 
	#__attribute_pure__


	)

232 #if 
__GNUC_PREREQ
 (2,5)

233 #define 
	#__attribute_const__
 
	`__attribute__
 ((
__const__
))

	)

235 #define 
	#__attribute_const__


	)

241 #if 
__GNUC_PREREQ
 (3,1)

242 #define 
	#__attribute_used__
 
	`__attribute__
 ((
__used__
))

	)

243 #define 
	#__attribute_noinline__
 
	`__attribute__
 ((
__noinline__
))

	)

245 #define 
	#__attribute_used__
 
	`__attribute__
 ((
__unused__
))

	)

246 #define 
	#__attribute_noinline__


	)

250 #if 
__GNUC_PREREQ
 (3,2)

251 #define 
	#__attribute_deprecated__
 
	`__attribute__
 ((
__deprecated__
))

	)

253 #define 
	#__attribute_deprecated__


	)

259 #if 
__GNUC_PREREQ
 (4,5) || \

260 
	$__glibc_clang_has_extension
 (
__attribute_deprecated_with_message__
)

261 #define 
	#__attribute_deprecated_msg__
(
msg
) \

262 
	`__attribute__
 ((
	`__deprecated__
 (
msg
)))

	)

264 #define 
	#__attribute_deprecated_msg__
(
msg
) 
__attribute_deprecated__


	)

273 #if 
	`__GNUC_PREREQ
 (2,8)

274 #define 
	#__attribute_format_arg__
(
x
) 
	`__attribute__
 ((
	`__format_arg__
 (x)))

	)

276 #define 
	#__attribute_format_arg__
(
x
)

	)

283 #if 
	`__GNUC_PREREQ
 (2,97)

284 #define 
	#__attribute_format_strfmon__
(
a
,
b
) \

285 
	`__attribute__
 ((
	`__format__
 (
__strfmon__
, 
a
, 
b
)))

	)

287 #define 
	#__attribute_format_strfmon__
(
a
,
b
)

	)

292 #if 
	`__GNUC_PREREQ
 (3,3)

293 #define 
	#__nonnull
(
params
) 
	`__attribute__
 ((
__nonnull__
 params))

	)

295 #define 
	#__nonnull
(
params
)

	)

300 #if 
	`__GNUC_PREREQ
 (3,4)

301 #define 
	#__attribute_warn_unused_result__
 \

302 
	`__attribute__
 ((
__warn_unused_result__
))

	)

303 #if 
__USE_FORTIFY_LEVEL
 > 0

304 #define 
	#__wur
 
__attribute_warn_unused_result__


	)

307 #define 
	#__attribute_warn_unused_result__


	)

309 #ifndef 
__wur


310 #define 
	#__wur


	)

314 #if 
	`__GNUC_PREREQ
 (3,2)

318 #undef 
__always_inline


319 #define 
	#__always_inline
 
__inline
 
	`__attribute__
 ((
__always_inline__
))

	)

321 #undef 
__always_inline


322 #define 
	#__always_inline
 
__inline


	)

327 #if 
	`__GNUC_PREREQ
 (4,3)

328 #define 
	#__attribute_artificial__
 
	`__attribute__
 ((
__artificial__
))

	)

330 #define 
	#__attribute_artificial__


	)

342 #if (!
defined
 
__cplusplus
 || 
	`__GNUC_PREREQ
 (4,3) \

343 || (
defined
 
__clang__
 && (defined 
__GNUC_STDC_INLINE__
 \

344 || 
defined
 
__GNUC_GNU_INLINE__
)))

345 #if 
defined
 
__GNUC_STDC_INLINE__
 || defined 
__cplusplus


346 #define 
	#__extern_inline
 extern 
__inline
 
	`__attribute__
 ((
__gnu_inline__
))

	)

347 #define 
	#__extern_always_inline
 \

348 extern 
__always_inline
 
	`__attribute__
 ((
__gnu_inline__
))

	)

350 #define 
	#__extern_inline
 extern 
__inline


	)

351 #define 
	#__extern_always_inline
 extern 
__always_inline


	)

355 #ifdef 
__extern_always_inline


356 #define 
	#__fortify_function
 
__extern_always_inline
 
__attribute_artificial__


	)

361 #if 
	`__GNUC_PREREQ
 (4,3)

362 #define 
	#__va_arg_pack
() 
	`__builtin_va_arg_pack
 ()

	)

363 #define 
	#__va_arg_pack_len
() 
	`__builtin_va_arg_pack_len
 ()

	)

370 #if !
	`__GNUC_PREREQ
 (2,8)

371 #define 
	#__extension__


	)

375 #if !
	`__GNUC_PREREQ
 (2,92)

376 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

377 #define 
	#__restrict
 
restrict


	)

379 #define 
	#__restrict


	)

386 #if 
	`__GNUC_PREREQ
 (3,1) && !
defined
 
__GNUG__


387 #define 
	#__restrict_arr
 
__restrict


	)

389 #ifdef 
__GNUC__


390 #define 
	#__restrict_arr


	)

392 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

393 #define 
	#__restrict_arr
 
restrict


	)

396 #define 
	#__restrict_arr


	)

401 #if 
__GNUC__
 >= 3

402 #define 
	#__glibc_unlikely
(
cond
) 
	`__builtin_expect
 ((cond), 0)

	)

403 #define 
	#__glibc_likely
(
cond
) 
	`__builtin_expect
 ((cond), 1)

	)

405 #define 
	#__glibc_unlikely
(
cond
) (cond)

	)

406 #define 
	#__glibc_likely
(
cond
) (cond)

	)

409 #ifdef 
__has_attribute


410 #define 
	#__glibc_has_attribute
(
attr
) 
	`__has_attribute
 (attr)

	)

412 #define 
	#__glibc_has_attribute
(
attr
) 0

	)

415 #ifdef 
__has_include


418 #define 
	#__glibc_has_include
 
__has_include


	)

420 #define 
	#__glibc_has_include
(
header
) 0

	)

423 #if (!
defined
 
_Noreturn
 \

424 && (
defined
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

425 && !
	$__GNUC_PREREQ
 (4,7))

426 #if 
	`__GNUC_PREREQ
 (2,8)

427 #define 
	#_Noreturn
 
	`__attribute__
 ((
__noreturn__
))

	)

429 #define 
	#_Noreturn


	)

433 #if 
	`__GNUC_PREREQ
 (8, 0)

437 #define 
	#__attribute_nonstring__
 
	`__attribute__
 ((
__nonstring__
))

	)

439 #define 
	#__attribute_nonstring__


	)

443 #undef 
__attribute_copy__


444 #if 
	`__GNUC_PREREQ
 (9, 0)

447 #define 
	#__attribute_copy__
(
arg
) 
	`__attribute__
 ((
	`__copy__
 (arg)))

	)

449 #define 
	#__attribute_copy__
(
arg
)

	)

452 #if (!
defined
 
_Static_assert
 && !defined 
__cplusplus
 \

453 && (
defined
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

454 && (!
	`__GNUC_PREREQ
 (4, 6) || 
defined
 
__STRICT_ANSI__
))

455 #define 
	#_Static_assert
(
expr
, 
diagnostic
) \

456 extern int (*
	`__Static_assert_function
 (void)) \

457 [!!sizeof (struct { int 
__error_if_negative
: (
expr
) ? 2 : -1; })]

	)

460 #include 
	~<bits/wordsize.h
>

461 #include 
	~<bits/long-double.h
>

463 #if 
defined
 
__LONG_DOUBLE_MATH_OPTIONAL
 && defined 
__NO_LONG_DOUBLE_MATH


464 #define 
	#__LDBL_COMPAT
 1

	)

465 #ifdef 
__REDIRECT


466 #define 
	#__LDBL_REDIR1
(
name
, 
proto
, 
alias
) 
	`__REDIRECT
 (name, proto, alias)

	)

467 #define 
	#__LDBL_REDIR
(
name
, 
proto
) \

468 
	`__LDBL_REDIR1
 (
name
, 
proto
, 
__nldbl_
##name)

	)

469 #define 
	#__LDBL_REDIR1_NTH
(
name
, 
proto
, 
alias
) 
	`__REDIRECT_NTH
 (name, proto, alias)

	)

470 #define 
	#__LDBL_REDIR_NTH
(
name
, 
proto
) \

471 
	`__LDBL_REDIR1_NTH
 (
name
, 
proto
, 
__nldbl_
##name)

	)

472 #define 
	#__LDBL_REDIR1_DECL
(
name
, 
alias
) \

473 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 (#alias));

	)

474 #define 
	#__LDBL_REDIR_DECL
(
name
) \

475 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 ("__nldbl_" #name));

	)

476 #define 
	#__REDIRECT_LDBL
(
name
, 
proto
, 
alias
) \

477 
	`__LDBL_REDIR1
 (
name
, 
proto
, 
__nldbl_
##
alias
)

	)

478 #define 
	#__REDIRECT_NTH_LDBL
(
name
, 
proto
, 
alias
) \

479 
	`__LDBL_REDIR1_NTH
 (
name
, 
proto
, 
__nldbl_
##
alias
)

	)

482 #if !
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT


483 #define 
	#__LDBL_REDIR1
(
name
, 
proto
, 
alias
) name 
	)
proto

484 #define 
	#__LDBL_REDIR
(
name
, 
proto
) name 
	)
proto

485 #define 
	#__LDBL_REDIR1_NTH
(
name
, 
proto
, 
alias
) name proto 
__THROW


	)

486 #define 
	#__LDBL_REDIR_NTH
(
name
, 
proto
) name proto 
__THROW


	)

487 #define 
	#__LDBL_REDIR_DECL
(
name
)

	)

488 #ifdef 
__REDIRECT


489 #define 
	#__REDIRECT_LDBL
(
name
, 
proto
, 
alias
) 
	`__REDIRECT
 (name, proto, alias)

	)

490 #define 
	#__REDIRECT_NTH_LDBL
(
name
, 
proto
, 
alias
) \

491 
	`__REDIRECT_NTH
 (
name
, 
proto
, 
alias
)

	)

500 #if 
	`__GNUC_PREREQ
 (4,8) || 
	`__glibc_clang_prereq
 (3,5)

501 #define 
	#__glibc_macro_warning1
(
message
) 
	`_Pragma
 (#message)

	)

502 #define 
	#__glibc_macro_warning
(
message
) \

503 
	`__glibc_macro_warning1
 (
GCC
 
warning
 
message
)

	)

505 #define 
	#__glibc_macro_warning
(
msg
)

	)

515 #if !
defined
 
__cplusplus
 \

516 && (
	`__GNUC_PREREQ
 (4, 9) \

517 || 
	`__glibc_clang_has_extension
 (
c_generic_selections
) \

518 || (!
defined
 
__GNUC__
 && defined 
__STDC_VERSION__
 \

519 && 
__STDC_VERSION__
 >= 201112L))

520 #define 
	#__HAVE_GENERIC_SELECTION
 1

	)

522 #define 
	#__HAVE_GENERIC_SELECTION
 0

	)

	@/usr/include/asm-generic/socket.h

2 #ifndef 
__ASM_GENERIC_SOCKET_H


3 #define 
	#__ASM_GENERIC_SOCKET_H


	)

5 #include 
	~<linux/posix_types.h
>

6 #include 
	~<asm/sockios.h
>

9 #define 
	#SOL_SOCKET
 1

	)

11 #define 
	#SO_DEBUG
 1

	)

12 #define 
	#SO_REUSEADDR
 2

	)

13 #define 
	#SO_TYPE
 3

	)

14 #define 
	#SO_ERROR
 4

	)

15 #define 
	#SO_DONTROUTE
 5

	)

16 #define 
	#SO_BROADCAST
 6

	)

17 #define 
	#SO_SNDBUF
 7

	)

18 #define 
	#SO_RCVBUF
 8

	)

19 #define 
	#SO_SNDBUFFORCE
 32

	)

20 #define 
	#SO_RCVBUFFORCE
 33

	)

21 #define 
	#SO_KEEPALIVE
 9

	)

22 #define 
	#SO_OOBINLINE
 10

	)

23 #define 
	#SO_NO_CHECK
 11

	)

24 #define 
	#SO_PRIORITY
 12

	)

25 #define 
	#SO_LINGER
 13

	)

26 #define 
	#SO_BSDCOMPAT
 14

	)

27 #define 
	#SO_REUSEPORT
 15

	)

28 #ifndef 
SO_PASSCRED


29 #define 
	#SO_PASSCRED
 16

	)

30 #define 
	#SO_PEERCRED
 17

	)

31 #define 
	#SO_RCVLOWAT
 18

	)

32 #define 
	#SO_SNDLOWAT
 19

	)

33 #define 
	#SO_RCVTIMEO_OLD
 20

	)

34 #define 
	#SO_SNDTIMEO_OLD
 21

	)

38 #define 
	#SO_SECURITY_AUTHENTICATION
 22

	)

39 #define 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

40 #define 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

42 #define 
	#SO_BINDTODEVICE
 25

	)

45 #define 
	#SO_ATTACH_FILTER
 26

	)

46 #define 
	#SO_DETACH_FILTER
 27

	)

47 #define 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

49 #define 
	#SO_PEERNAME
 28

	)

51 #define 
	#SO_ACCEPTCONN
 30

	)

53 #define 
	#SO_PEERSEC
 31

	)

54 #define 
	#SO_PASSSEC
 34

	)

56 #define 
	#SO_MARK
 36

	)

58 #define 
	#SO_PROTOCOL
 38

	)

59 #define 
	#SO_DOMAIN
 39

	)

61 #define 
	#SO_RXQ_OVFL
 40

	)

63 #define 
	#SO_WIFI_STATUS
 41

	)

64 #define 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

65 #define 
	#SO_PEEK_OFF
 42

	)

68 #define 
	#SO_NOFCS
 43

	)

70 #define 
	#SO_LOCK_FILTER
 44

	)

72 #define 
	#SO_SELECT_ERR_QUEUE
 45

	)

74 #define 
	#SO_BUSY_POLL
 46

	)

76 #define 
	#SO_MAX_PACING_RATE
 47

	)

78 #define 
	#SO_BPF_EXTENSIONS
 48

	)

80 #define 
	#SO_INCOMING_CPU
 49

	)

82 #define 
	#SO_ATTACH_BPF
 50

	)

83 #define 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

85 #define 
	#SO_ATTACH_REUSEPORT_CBPF
 51

	)

86 #define 
	#SO_ATTACH_REUSEPORT_EBPF
 52

	)

88 #define 
	#SO_CNX_ADVICE
 53

	)

90 #define 
	#SCM_TIMESTAMPING_OPT_STATS
 54

	)

92 #define 
	#SO_MEMINFO
 55

	)

94 #define 
	#SO_INCOMING_NAPI_ID
 56

	)

96 #define 
	#SO_COOKIE
 57

	)

98 #define 
	#SCM_TIMESTAMPING_PKTINFO
 58

	)

100 #define 
	#SO_PEERGROUPS
 59

	)

102 #define 
	#SO_ZEROCOPY
 60

	)

104 #define 
	#SO_TXTIME
 61

	)

105 #define 
	#SCM_TXTIME
 
SO_TXTIME


	)

107 #define 
	#SO_BINDTOIFINDEX
 62

	)

109 #define 
	#SO_TIMESTAMP_OLD
 29

	)

110 #define 
	#SO_TIMESTAMPNS_OLD
 35

	)

111 #define 
	#SO_TIMESTAMPING_OLD
 37

	)

113 #define 
	#SO_TIMESTAMP_NEW
 63

	)

114 #define 
	#SO_TIMESTAMPNS_NEW
 64

	)

115 #define 
	#SO_TIMESTAMPING_NEW
 65

	)

117 #define 
	#SO_RCVTIMEO_NEW
 66

	)

118 #define 
	#SO_SNDTIMEO_NEW
 67

	)

120 #define 
	#SO_DETACH_REUSEPORT_BPF
 68

	)

123 #if 
__BITS_PER_LONG
 == 64 || (
defined
(
__x86_64__
) && defined(
__ILP32__
))

125 #define 
	#SO_TIMESTAMP
 
SO_TIMESTAMP_OLD


	)

126 #define 
	#SO_TIMESTAMPNS
 
SO_TIMESTAMPNS_OLD


	)

127 #define 
	#SO_TIMESTAMPING
 
SO_TIMESTAMPING_OLD


	)

129 #define 
	#SO_RCVTIMEO
 
SO_RCVTIMEO_OLD


	)

130 #define 
	#SO_SNDTIMEO
 
SO_SNDTIMEO_OLD


	)

132 #define 
	#SO_TIMESTAMP
 (sizeof(
time_t
) == sizeof(
__kernel_long_t
) ? 
SO_TIMESTAMP_OLD
 : 
SO_TIMESTAMP_NEW
)

	)

133 #define 
	#SO_TIMESTAMPNS
 (sizeof(
time_t
) == sizeof(
__kernel_long_t
) ? 
SO_TIMESTAMPNS_OLD
 : 
SO_TIMESTAMPNS_NEW
)

	)

134 #define 
	#SO_TIMESTAMPING
 (sizeof(
time_t
) == sizeof(
__kernel_long_t
) ? 
SO_TIMESTAMPING_OLD
 : 
SO_TIMESTAMPING_NEW
)

	)

136 #define 
	#SO_RCVTIMEO
 (sizeof(
time_t
) == sizeof(
__kernel_long_t
) ? 
SO_RCVTIMEO_OLD
 : 
SO_RCVTIMEO_NEW
)

	)

137 #define 
	#SO_SNDTIMEO
 (sizeof(
time_t
) == sizeof(
__kernel_long_t
) ? 
SO_SNDTIMEO_OLD
 : 
SO_SNDTIMEO_NEW
)

	)

140 #define 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

141 #define 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

142 #define 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

	@/usr/include/bits/long-double.h

	@/usr/include/bits/pthreadtypes-arch.h

18 #ifndef 
_BITS_PTHREADTYPES_ARCH_H


19 #define 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 #include 
	~<bits/wordsize.h
>

23 #ifdef 
__x86_64__


24 #if 
__WORDSIZE
 == 64

25 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

29 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

31 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

32 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

33 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

34 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

35 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

38 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

39 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

40 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

41 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 #define 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

45 #define 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

46 #define 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

47 #define 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

48 #define 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

51 #define 
	#__PTHREAD_COMPAT_PADDING_MID


	)

52 #define 
	#__PTHREAD_COMPAT_PADDING_END


	)

53 #define 
	#__PTHREAD_MUTEX_LOCK_ELISION
 1

	)

54 #ifdef 
__x86_64__


55 #define 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 0

	)

56 #define 
	#__PTHREAD_MUTEX_USE_UNION
 0

	)

58 #define 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 1

	)

59 #define 
	#__PTHREAD_MUTEX_USE_UNION
 1

	)

62 #define 
	#__LOCK_ALIGNMENT


	)

63 #define 
	#__ONCE_ALIGNMENT


	)

65 struct 
	s__pthread_rwlock_arch_t


67 unsigned int 
	m__readers
;

68 unsigned int 
	m__writers
;

69 unsigned int 
	m__wrphase_futex
;

70 unsigned int 
	m__writers_futex
;

71 unsigned int 
	m__pad3
;

72 unsigned int 
	m__pad4
;

73 #ifdef 
__x86_64__


74 int 
	m__cur_writer
;

75 int 
	m__shared
;

76 signed char 
	m__rwelision
;

77 #ifdef 
__ILP32__


78 unsigned char 
	m__pad1
[3];

79 #define 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

81 unsigned char 
	m__pad1
[7];

82 #define 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

84 unsigned long int 
	m__pad2
;

87 unsigned int 
	m__flags
;

88 #define 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

92 unsigned char 
	m__flags
;

93 unsigned char 
	m__shared
;

94 signed char 
	m__rwelision
;

95 #define 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

96 unsigned char 
	m__pad2
;

97 int 
	m__cur_writer
;

101 #ifndef 
__x86_64__


103 #define 
	#__cleanup_fct_attribute
 
	`__attribute__
 ((
	`__regparm__
 (1)))

	)

	@/usr/include/bits/types/__sigset_t.h

1 #ifndef 
____sigset_t_defined


2 #define 
	#____sigset_t_defined


	)

4 #define 
	#_SIGSET_NWORDS
 (1024 / (8 * sizeof (unsigned long int)))

	)

7 unsigned long int 
	m__val
[
_SIGSET_NWORDS
];

8 } 
	t__sigset_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifdef 
_LIBC


7 #error 
Applications
 
may
 
not
 
define
 
the
 
macro
 
_LIBC


10 #define 
	#__stub_chflags


	)

11 #define 
	#__stub_fattach


	)

12 #define 
	#__stub_fchflags


	)

13 #define 
	#__stub_fdetach


	)

14 #define 
	#__stub_gtty


	)

15 #define 
	#__stub_lchmod


	)

16 #define 
	#__stub_revoke


	)

17 #define 
	#__stub_setlogin


	)

18 #define 
	#__stub_sigreturn


	)

19 #define 
	#__stub_sstk


	)

20 #define 
	#__stub_stty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifdef 
_LIBC


7 #error 
Applications
 
may
 
not
 
define
 
the
 
macro
 
_LIBC


10 #define 
	#__stub___compat_bdflush


	)

11 #define 
	#__stub_chflags


	)

12 #define 
	#__stub_fattach


	)

13 #define 
	#__stub_fchflags


	)

14 #define 
	#__stub_fdetach


	)

15 #define 
	#__stub_getmsg


	)

16 #define 
	#__stub_gtty


	)

17 #define 
	#__stub_lchmod


	)

18 #define 
	#__stub_putmsg


	)

19 #define 
	#__stub_revoke


	)

20 #define 
	#__stub_setlogin


	)

21 #define 
	#__stub_sigreturn


	)

22 #define 
	#__stub_sstk


	)

23 #define 
	#__stub_stty


	)

	@/usr/include/asm/sockios.h

1 #include 
	~<asm-generic/sockios.h
>

	@/usr/include/linux/posix_types.h

2 #ifndef 
_LINUX_POSIX_TYPES_H


3 #define 
	#_LINUX_POSIX_TYPES_H


	)

5 #include 
	~<linux/stddef.h
>

22 #undef 
__FD_SETSIZE


23 #define 
	#__FD_SETSIZE
 1024

	)

26 unsigned long 
	mfds_bits
[
__FD_SETSIZE
 / (8 * sizeof(long))];

27 } 
	t__kernel_fd_set
;

30 typedef void (*
	t__kernel_sighandler_t
)(int);

33 typedef int 
	t__kernel_key_t
;

34 typedef int 
	t__kernel_mqd_t
;

36 #include 
	~<asm/posix_types.h
>

	@/usr/include/asm-generic/sockios.h

2 #ifndef 
__ASM_GENERIC_SOCKIOS_H


3 #define 
	#__ASM_GENERIC_SOCKIOS_H


	)

6 #define 
	#FIOSETOWN
 0x8901

	)

7 #define 
	#SIOCSPGRP
 0x8902

	)

8 #define 
	#FIOGETOWN
 0x8903

	)

9 #define 
	#SIOCGPGRP
 0x8904

	)

10 #define 
	#SIOCATMARK
 0x8905

	)

11 #define 
	#SIOCGSTAMP_OLD
 0x8906

	)

12 #define 
	#SIOCGSTAMPNS_OLD
 0x8907

	)

	@/usr/include/asm/posix_types.h

2 #ifdef 
__i386__


3 #include 
	~<asm/posix_types_32.h
>

4 #elif 
defined
(
__ILP32__
)

5 #include 
	~<asm/posix_types_x32.h
>

7 #include 
	~<asm/posix_types_64.h
>

	@/usr/include/linux/stddef.h

4 #ifndef 
__always_inline


5 #define 
	#__always_inline
 
__inline__


	)

	@/usr/include/asm/posix_types_32.h

2 #ifndef 
_ASM_X86_POSIX_TYPES_32_H


3 #define 
	#_ASM_X86_POSIX_TYPES_32_H


	)

11 typedef unsigned short 
	t__kernel_mode_t
;

12 #define 
	#__kernel_mode_t
 
__kernel_mode_t


	)

14 typedef unsigned short 
	t__kernel_ipc_pid_t
;

15 #define 
	#__kernel_ipc_pid_t
 
__kernel_ipc_pid_t


	)

17 typedef unsigned short 
	t__kernel_uid_t
;

18 typedef unsigned short 
	t__kernel_gid_t
;

19 #define 
	#__kernel_uid_t
 
__kernel_uid_t


	)

21 typedef unsigned short 
	t__kernel_old_dev_t
;

22 #define 
	#__kernel_old_dev_t
 
__kernel_old_dev_t


	)

24 #include 
	~<asm-generic/posix_types.h
>

	@/usr/include/asm/posix_types_64.h

2 #ifndef 
_ASM_X86_POSIX_TYPES_64_H


3 #define 
	#_ASM_X86_POSIX_TYPES_64_H


	)

11 typedef unsigned short 
	t__kernel_old_uid_t
;

12 typedef unsigned short 
	t__kernel_old_gid_t
;

13 #define 
	#__kernel_old_uid_t
 
__kernel_old_uid_t


	)

15 typedef unsigned long 
	t__kernel_old_dev_t
;

16 #define 
	#__kernel_old_dev_t
 
__kernel_old_dev_t


	)

18 #include 
	~<asm-generic/posix_types.h
>

	@/usr/include/asm/posix_types_x32.h

2 #ifndef 
_ASM_X86_POSIX_TYPES_X32_H


3 #define 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

14 typedef long long 
	t__kernel_long_t
;

15 typedef unsigned long long 
	t__kernel_ulong_t
;

16 #define 
	#__kernel_long_t
 
__kernel_long_t


	)

18 #include 
	~<asm/posix_types_64.h
>

	@/usr/include/asm-generic/posix_types.h

2 #ifndef 
__ASM_GENERIC_POSIX_TYPES_H


3 #define 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

5 #include 
	~<asm/bitsperlong.h
>

14 #ifndef 
__kernel_long_t


15 typedef long 
	t__kernel_long_t
;

16 typedef unsigned long 
	t__kernel_ulong_t
;

19 #ifndef 
__kernel_ino_t


20 typedef 
__kernel_ulong_t
 
	t__kernel_ino_t
;

23 #ifndef 
__kernel_mode_t


24 typedef unsigned int 
	t__kernel_mode_t
;

27 #ifndef 
__kernel_pid_t


28 typedef int 
	t__kernel_pid_t
;

31 #ifndef 
__kernel_ipc_pid_t


32 typedef int 
	t__kernel_ipc_pid_t
;

35 #ifndef 
__kernel_uid_t


36 typedef unsigned int 
	t__kernel_uid_t
;

37 typedef unsigned int 
	t__kernel_gid_t
;

40 #ifndef 
__kernel_suseconds_t


41 typedef 
__kernel_long_t
 
	t__kernel_suseconds_t
;

44 #ifndef 
__kernel_daddr_t


45 typedef int 
	t__kernel_daddr_t
;

48 #ifndef 
__kernel_uid32_t


49 typedef unsigned int 
	t__kernel_uid32_t
;

50 typedef unsigned int 
	t__kernel_gid32_t
;

53 #ifndef 
__kernel_old_uid_t


54 typedef 
__kernel_uid_t
 
	t__kernel_old_uid_t
;

55 typedef 
__kernel_gid_t
 
	t__kernel_old_gid_t
;

58 #ifndef 
__kernel_old_dev_t


59 typedef unsigned int 
	t__kernel_old_dev_t
;

66 #ifndef 
__kernel_size_t


67 #if 
__BITS_PER_LONG
 != 64

68 typedef unsigned int 
	t__kernel_size_t
;

69 typedef int 
	t__kernel_ssize_t
;

70 typedef int 
	t__kernel_ptrdiff_t
;

72 typedef 
__kernel_ulong_t
 
	t__kernel_size_t
;

73 typedef 
__kernel_long_t
 
	t__kernel_ssize_t
;

74 typedef 
__kernel_long_t
 
	t__kernel_ptrdiff_t
;

78 #ifndef 
__kernel_fsid_t


80 int 
	mval
[2];

81 } 
	t__kernel_fsid_t
;

87 typedef 
__kernel_long_t
 
	t__kernel_off_t
;

88 typedef long long 
	t__kernel_loff_t
;

89 typedef 
__kernel_long_t
 
	t__kernel_time_t
;

90 typedef long long 
	t__kernel_time64_t
;

91 typedef 
__kernel_long_t
 
	t__kernel_clock_t
;

92 typedef int 
	t__kernel_timer_t
;

93 typedef int 
	t__kernel_clockid_t
;

94 typedef char * 
	t__kernel_caddr_t
;

95 typedef unsigned short 
	t__kernel_uid16_t
;

96 typedef unsigned short 
	t__kernel_gid16_t
;

	@/usr/include/asm/bitsperlong.h

2 #ifndef 
__ASM_X86_BITSPERLONG_H


3 #define 
	#__ASM_X86_BITSPERLONG_H


	)

5 #if 
defined
(
__x86_64__
) && !defined(
__ILP32__
)

6 #define 
	#__BITS_PER_LONG
 64

	)

8 #define 
	#__BITS_PER_LONG
 32

	)

11 #include 
	~<asm-generic/bitsperlong.h
>

	@/usr/include/asm-generic/bitsperlong.h

2 #ifndef 
__ASM_GENERIC_BITS_PER_LONG


3 #define 
	#__ASM_GENERIC_BITS_PER_LONG


	)

12 #ifndef 
__BITS_PER_LONG


13 #define 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
84
2622
src/showip.c
/usr/include/arpa/inet.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/stdio.h
/usr/include/string.h
/usr/include/sys/socket.h
/usr/include/sys/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/in.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/netdb.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/string_fortified.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/sigevent_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/types/struct_iovec.h
/usr/include/bits/types/struct_osockaddr.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/uintn-identity.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/rpc/netdb.h
/usr/include/strings.h
/usr/include/sys/select.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/getopt_core.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/time64.h
/usr/include/bits/timesize.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/__sigval_t.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/socket.h
/usr/include/bits/long-double.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/types/__sigset_t.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/asm/sockios.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/posix_types.h
/usr/include/linux/stddef.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
